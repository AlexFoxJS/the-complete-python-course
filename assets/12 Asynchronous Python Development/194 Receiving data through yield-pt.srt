1
00:00:00,140 --> 00:00:01,740
Jos: Ol, bem vindo de volta.

2
00:00:01,740 --> 00:00:03,770
Algo que vamos ver neste

3
00:00:03,770 --> 00:00:07,140
vdeo  bem mental, e muitas pessoas na

4
00:00:07,140 --> 00:00:09,117
comunidade Python realmente no entendem

5
00:00:09,117 --> 00:00:12,310
como isso funciona, ou seja, voc pode

6
00:00:12,310 --> 00:00:14,835
usar a instruo yield para receber

7
00:00:14,835 --> 00:00:17,880
dados, ao contrrio para apenas devolver.

8
00:00:17,880 --> 00:00:21,140
Aqui est um exemplo: vamos definir uma funo

9
00:00:23,140 --> 00:00:27,680
de saudao, e isso vai dizer, amigo  igual a rendimento.

10
00:00:27,680 --> 00:00:30,320
Espere, espere, espere, o que est acontecendo aqui?

11
00:00:30,320 --> 00:00:31,520
Bem, vamos dar uma olhada.

12
00:00:31,520 --> 00:00:34,910
Ento ns vamos imprimir, ol amigo.

13
00:00:38,181 --> 00:00:40,330
Ento isso parece estranho; parece bizarro.

14
00:00:40,330 --> 00:00:42,390
E parece estranho para mim tambm,

15
00:00:42,390 --> 00:00:44,257
mas o que est acontecendo

16
00:00:44,257 --> 00:00:46,780
 que vamos dizer, amigo  igual

17
00:00:48,375 --> 00:00:50,010
a suspender a funo.

18
00:00:52,288 --> 00:00:55,230
E ento ns vamos imprimir o valor do amigo.

19
00:00:55,230 --> 00:00:57,230
E isso foi projetado dessa

20
00:00:57,230 --> 00:01:00,880
maneira em Python, para que possamos suspender a funo,

21
00:01:02,110 --> 00:01:06,500
mas tambm receber um valor depois de retomarmos a funo.

22
00:01:06,500 --> 00:01:09,330
E o valor que recebemos est entrando em

23
00:01:09,330 --> 00:01:11,700
amizade, e ento podemos imprimir isso aqui.

24
00:01:11,700 --> 00:01:13,300
Ns vamos dizer, g  igual

25
00:01:14,345 --> 00:01:15,610
a cumprimentar, e a primeira

26
00:01:15,610 --> 00:01:19,130
coisa que temos que fazer  executar a funo antes do rendimento.

27
00:01:20,170 --> 00:01:25,160
Ento podemos dizer g. envie, nenhum.

28
00:01:25,160 --> 00:01:28,360
Isso  chamado de preparao do gerador.

29
00:01:28,360 --> 00:01:31,410
Priming, preparando o gerador.

30
00:01:32,990 --> 00:01:35,260
E o que isso faz,  como

31
00:01:35,260 --> 00:01:36,440
se fosse antes do

32
00:01:37,320 --> 00:01:41,630
rendimento, e ento podemos fazer g. envie, Adam, por exemplo.

33
00:01:43,370 --> 00:01:46,980
Isto  o que est entrando no rendimento, e a

34
00:01:46,980 --> 00:01:49,860
funo  ento atribuir Adam ao amigo, e

35
00:01:49,860 --> 00:01:51,270
ns vamos continuar aqui.

36
00:01:51,270 --> 00:01:52,270
Vamos rodar esse arquivo.

37
00:01:53,750 --> 00:01:55,190
OK?

38
00:01:55,190 --> 00:01:56,950
Ento, ns temos algumas coisas.

39
00:01:56,950 --> 00:02:00,000
Ns pegamos, ol, Adam, ento isso  incrvel, isso funciona.

40
00:02:00,000 --> 00:02:03,230
Mas  claro, ns tambm obtemos, StopIteration, porque h um rendimento

41
00:02:03,230 --> 00:02:04,390
aqui, o que significa

42
00:02:04,390 --> 00:02:05,990
que este  um gerador,

43
00:02:06,960 --> 00:02:09,230
e o gerador termina aps a impresso.

44
00:02:09,230 --> 00:02:10,480
No h nenhum tipo de

45
00:02:10,480 --> 00:02:11,870
repetio, no h mais nada

46
00:02:11,870 --> 00:02:13,340
a render, ento temos uma StopIteration,

47
00:02:13,340 --> 00:02:14,980
porque  o fim do gerador.

48
00:02:14,980 --> 00:02:18,380
Portanto, esse recebimento atravs do yield  estranho,

49
00:02:18,380 --> 00:02:22,280
mas  realmente o que torna possvel o desenvolvimento

50
00:02:22,280 --> 00:02:23,770
assncrono do Python.

51
00:02:23,770 --> 00:02:26,320
Vamos ver outro exemplo agora.

52
00:02:28,670 --> 00:02:30,730
Ns vamos ter nosso deque,

53
00:02:33,783 --> 00:02:36,056
ento ns vamos ter nossos amigos,

54
00:02:36,056 --> 00:02:39,056
o que vai ser um deque de Rolf,

55
00:02:44,585 --> 00:02:49,585
Jos, e assim por diante, e ento, ns vamos ter uma funo friend_upper.

56
00:02:49,870 --> 00:02:54,210
Isto vai dizer, enquanto ns temos amigos em nosso deque, ns vamos

57
00:02:54,210 --> 00:02:59,210
dizer amigos amigos iguais. popleft (). upper (), ento ele

58
00:03:00,150 --> 00:03:03,370
vai pegar o elemento mais  esquerda dos

59
00:03:03,370 --> 00:03:05,250
amigos, vai remov-lo do deque,

60
00:03:05,250 --> 00:03:07,190
e est tudo em maisculas.

61
00:03:07,190 --> 00:03:09,390
Esta  a maneira de fazer isso em Python.

62
00:03:09,390 --> 00:03:13,870
Ento ele dir, cumprimentando o mesmo

63
00:03:14,950 --> 00:03:19,090
rendimento, e vai imprimir, saudao, amigo.

64
00:03:23,410 --> 00:03:28,410
Ok, isso  muito estranho do jeito que parece.

65
00:03:28,420 --> 00:03:30,820
Vai passar por cima dos amigos, vai

66
00:03:31,880 --> 00:03:34,750
pegar o primeiro amigo e transform-lo em maiscula,

67
00:03:34,750 --> 00:03:36,900
e ento ele vai suspender a

68
00:03:36,900 --> 00:03:40,820
funo at recebermos um valor aqui atravs do rendimento e o valor

69
00:03:40,820 --> 00:03:44,440
que vamos receber  algum tipo de saudao, e ento quando

70
00:03:44,440 --> 00:03:47,030
ns recebemos esse valor, ele vai imprimir saudaes

71
00:03:47,030 --> 00:03:50,230
e o amigo, e ento ele vai repetir novamente,

72
00:03:50,230 --> 00:03:53,360
colocando o prximo amigo fora da lista, fora do

73
00:03:53,360 --> 00:03:55,420
deque, desculpe, e ento esperando novamente

74
00:03:55,420 --> 00:03:57,770
por alguns dados para obter este rendimento.

75
00:03:57,770 --> 00:03:58,930
Ento, a funo vai

76
00:03:58,930 --> 00:03:59,763
suspender neste ponto,

77
00:03:59,763 --> 00:04:02,530
at obtermos mais dados e, quando o fizermos,

78
00:04:02,530 --> 00:04:04,600
esses dados sero atribudos  saudao,

79
00:04:04,600 --> 00:04:06,940
que ser impressa e assim por diante.

80
00:04:09,270 --> 00:04:13,640
E ento, ns tambm vamos ter uma funo de saudao novamente.

81
00:04:15,270 --> 00:04:19,360
Esta funo vai preparar o gerador enviando

82
00:04:20,443 --> 00:04:22,280
nada para ele.

83
00:04:22,280 --> 00:04:24,310
Ento, novamente, est recebendo um

84
00:04:24,310 --> 00:04:26,600
gerador aqui, que vai ser esse

85
00:04:26,600 --> 00:04:28,400
amigo aqui em cima, e

86
00:04:28,400 --> 00:04:31,320
no vai enviar nada para ele preparar e

87
00:04:31,320 --> 00:04:32,680
trazer para a primeira

88
00:04:34,240 --> 00:04:38,395
parte do rendimento aqui antes do rendimento, e ento, enquanto 

89
00:04:38,395 --> 00:04:43,395
verdade, vai novamente receber uma saudao e entreg-la, e envi-la para o gerador

90
00:04:45,148 --> 00:04:47,360
que foi passado como um parmetro.

91
00:04:49,901 --> 00:04:51,620
Ento, coisas muito estranhas acontecendo aqui.

92
00:04:51,620 --> 00:04:53,528
Vamos terminar o cdigo para ver

93
00:04:53,528 --> 00:04:55,270
se isso faz mais sentido.

94
00:04:56,357 --> 00:04:57,880
Ns vamos criar uma varivel

95
00:04:57,880 --> 00:04:59,700
de saudao, que vai ser,

96
00:04:59,700 --> 00:05:01,820
cumprimentar, e vamos pass-la em um

97
00:05:01,820 --> 00:05:03,970
gerador, que ser um gerador superior amigo.

98
00:05:05,210 --> 00:05:07,180
A primeira coisa que vamos fazer 

99
00:05:07,180 --> 00:05:08,570
preparar o gerador do greeter.

100
00:05:08,570 --> 00:05:11,000
Ento vamos fazer uma saudao. enviar (nenhum).

101
00:05:12,310 --> 00:05:14,040
Mais uma vez, voc sabe o que isso faz.

102
00:05:14,040 --> 00:05:18,348
Apenas move o gerador at antes do rendimento,

103
00:05:18,348 --> 00:05:22,340
por isso acenar. send (None) vai mover o

104
00:05:22,340 --> 00:05:24,760
gerador at aqui executando este primer.

105
00:05:24,760 --> 00:05:28,250
Ento vai ser o primeiro amigo, e ento vai parar

106
00:05:28,250 --> 00:05:29,450
logo antes do rendimento.

107
00:05:30,880 --> 00:05:33,220
Ento, ns vamos fazer saudaes. envie ('Ol').

108
00:05:35,860 --> 00:05:38,000
Esta string aqui vai para o

109
00:05:38,000 --> 00:05:40,590
rendimento e ser enviada para saudao, e

110
00:05:40,590 --> 00:05:43,520
ento ser enviada para o amigo upper, que

111
00:05:43,520 --> 00:05:45,152
 o nosso g.

112
00:05:45,152 --> 00:05:49,010
Quando fazemos isso, isso ser atribudo  saudao.

113
00:05:49,010 --> 00:05:51,060
Lembre-se, foi preparado anteriormente,

114
00:05:51,060 --> 00:05:52,560
e depois ser

115
00:05:52,560 --> 00:05:55,590
impresso usando essa coisa de amigo.

116
00:05:57,800 --> 00:05:58,760
Vamos correr isso.

117
00:06:01,807 --> 00:06:02,907
E a voc tem isso.

118
00:06:04,250 --> 00:06:09,150
Ns imprimimos, ol, Rolf, e  isso.

119
00:06:09,150 --> 00:06:11,788
O que temos aqui

120
00:06:11,788 --> 00:06:14,140
 uma coisa incrvel.

121
00:06:15,280 --> 00:06:16,770
Nenhuma dessas funes est

122
00:06:16,770 --> 00:06:19,933
em execuo, mas todas esto suspensas, permitindo

123
00:06:19,933 --> 00:06:22,030
que algo mais seja executado.

124
00:06:22,030 --> 00:06:23,590
Por exemplo, poderamos

125
00:06:24,780 --> 00:06:26,290
imprimir: "Ol, mundo!

126
00:06:26,290 --> 00:06:27,560
'Multitarefa. e

127
00:06:28,820 --> 00:06:33,820
depois cumprimentamos. envie "como vai voc", por exemplo.

128
00:06:35,750 --> 00:06:36,950
Ns poderamos executar isso novamente.

129
00:06:38,740 --> 00:06:43,740
E agora voc pode ver que somos multitarefas, essencialmente.

130
00:06:44,200 --> 00:06:45,740
Primeiro temos oi Rolf, ento

131
00:06:46,583 --> 00:06:48,485
temos algo completamente separado da nossa

132
00:06:48,485 --> 00:06:49,850
cadeia de funes, mesmo

133
00:06:49,850 --> 00:06:52,170
que eles estejam rodando em um loop,

134
00:06:52,170 --> 00:06:54,480
e ento ns temos, como voc est, Jose.

135
00:06:54,480 --> 00:06:57,370
E observe como isso est tomando dados deste deque at aqui.

136
00:06:59,730 --> 00:07:03,427
Se tivermos um monte desse tipo de coisa em execuo

137
00:07:03,427 --> 00:07:05,500
em um agendador de tarefas,

138
00:07:05,500 --> 00:07:07,480
por exemplo, em vez de

139
00:07:07,480 --> 00:07:10,130
aparecer de amigos, pode estar solicitando algo

140
00:07:10,130 --> 00:07:12,750
da Internet, como algumas pginas para raspar,

141
00:07:12,750 --> 00:07:15,770
voc pode ver como elas poderiam ser usadas

142
00:07:15,770 --> 00:07:18,690
para dividir o trabalho usando esses rendimentos.

143
00:07:19,830 --> 00:07:21,400
E est muito confuso, ok?

144
00:07:21,400 --> 00:07:23,150
Bem,  assim que funciona.

145
00:07:24,050 --> 00:07:27,780
E  assim que o desenvolvimento assncrono do

146
00:07:27,780 --> 00:07:29,380
Python funciona internamente.

147
00:07:30,610 --> 00:07:32,510
Agora, em vez de fazer Eu no gosto disso; ningum na comunidade

148
00:07:33,510 --> 00:07:36,120
tudo isso, podemos realmente fazer alguma coisa, qual. Python gosta, que , podemos fazer rendimento de g.

149
00:07:37,030 --> 00:07:40,250
Isso, que analisamos antes, foi usado para extrair valores

150
00:07:40,250 --> 00:07:41,980
de um iterador, e tambm

151
00:07:44,420 --> 00:07:46,760
pode ser usado para comunicao bidirecional.

152
00:07:46,760 --> 00:07:49,110
Ele pode ser usado para receber

153
00:07:49,110 --> 00:07:51,590
dados e encaminh-lo para outro gerador.

154
00:07:51,590 --> 00:07:54,030
Ento, aqui quando ns enviamos,

155
00:07:54,030 --> 00:07:57,720
ol, ele vem aqui, e ele  passado

156
00:07:57,720 --> 00:07:59,870
para g tambm, e ento

157
00:07:59,870 --> 00:08:04,190
ele pode ser usado, e ento qualquer valor ento retornado.

158
00:08:04,190 --> 00:08:06,210
Ento, essa  outra maneira de

159
00:08:06,210 --> 00:08:08,240
escrever exatamente o mesmo que tnhamos antes.

160
00:08:08,240 --> 00:08:10,740
Ento, isso, enviar (None), e tipo de repetir

161
00:08:10,740 --> 00:08:11,870
constantemente, cedendo as

162
00:08:12,710 --> 00:08:17,010
coisas, e enviando o valor pode ser substitudo por, rendimento de g, ok?

163
00:08:17,010 --> 00:08:21,510
Assim, podemos facilmente encadear esses geradores, e quando voc

164
00:08:21,510 --> 00:08:23,350
tem geradores que recebem

165
00:08:25,390 --> 00:08:28,490
dados, eles no so mais chamados

166
00:08:28,490 --> 00:08:31,720
de geradores porque no esto gerando nada.

167
00:08:31,720 --> 00:08:34,460
Agora eles esto recebendo dados e fazendo algo com isso.

168
00:08:34,460 --> 00:08:36,450
Ento, a partir de agora, esse

169
00:08:36,450 --> 00:08:38,750
tipo de gerador ser conhecido como co-rotina.

170
00:08:38,750 --> 00:08:43,206
E em Python, eles so conhecidos como co-rotinas porque eles

171
00:08:43,206 --> 00:08:45,810
coletam dados e podem ser suspensos,

172
00:08:45,810 --> 00:08:47,960
ento  uma co-rotina.

173
00:08:47,960 --> 00:08:50,622
Na seo de recursos desta palestra,

174
00:08:50,622 --> 00:08:52,210
temos mais algumas leituras.

175
00:08:53,070 --> 00:08:54,710
 avanado, ento leve seu tempo.

176
00:08:54,710 --> 00:08:57,130
Eu no espero que voc esteja

177
00:08:57,130 --> 00:09:00,410
voando por esta seo por qualquer meio.

178
00:09:00,410 --> 00:09:02,550
Espero que voc esteja lendo os recursos extras.

179
00:09:02,550 --> 00:09:03,480
H um curso muito

180
00:09:03,480 --> 00:09:06,330
longo l em co-rotinas e concorrncia de David Beazley que  realmente bom.

181
00:09:06,330 --> 00:09:09,470
Se voc no est to interessado em saber tudo

182
00:09:09,470 --> 00:09:12,110
o que h para saber sobre concorrncia

183
00:09:12,110 --> 00:09:14,860
e Python, sinta-se  vontade para pular isso.

184
00:09:14,860 --> 00:09:17,390
Mas se voc quiser realmente entender o

185
00:09:17,390 --> 00:09:20,480
que est acontecendo nos bastidores, leia todas as leituras

186
00:09:20,480 --> 00:09:22,760
e recursos adicionais aos quais eu ligo.

187
00:09:22,760 --> 00:09:26,610
 isso para este vdeo.

188
00:09:26,610 --> 00:09:28,260
Espero que isso seja interessante, e eu

189
00:09:29,610 --> 00:09:30,670
vou te ver no prximo.

190
00:09:30,670 --> 00:09:32,100
&nbsp;

191
00:09:32,100 --> 00:09:33,750
&nbsp;

