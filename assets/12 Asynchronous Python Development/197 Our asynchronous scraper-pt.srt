1
00:00:00,120 --> 00:00:01,690
Jose: Ol e bem vindo de volta.

2
00:00:01,690 --> 00:00:04,520
Espero que voc tenha assistido s

3
00:00:04,520 --> 00:00:08,460
palestras da ltima palestra e, neste, vamos transformar

4
00:00:08,460 --> 00:00:13,030
nosso raspador que criamos anteriormente em um raspador assncrono.

5
00:00:13,030 --> 00:00:15,790
Apenas para usar as coisas que aprendemos e

6
00:00:15,790 --> 00:00:18,090
tambm algumas coisas que foram mencionadas

7
00:00:18,090 --> 00:00:20,570
brevemente nas palestras que vamos explicar tambm.

8
00:00:21,950 --> 00:00:24,870
Quando analisamos os sites de scraping

9
00:00:24,870 --> 00:00:29,030
antes, chegamos a 50 pginas aqui, uma aps a

10
00:00:29,030 --> 00:00:33,840
outra, de nossos livros. raspar. com site, mas pode ser um pouco

11
00:00:33,840 --> 00:00:35,630
lento por causa de todas essas pginas.

12
00:00:35,630 --> 00:00:37,650
Se voc se lembra, quando ns

13
00:00:37,650 --> 00:00:42,020
rodamos o menu, o que eu vou fazer agora, ns meio que temos

14
00:00:42,020 --> 00:00:44,380
um perodo em que nada parecia acontecer.

15
00:00:45,520 --> 00:00:48,630
Foi quando as pginas estavam todas carregando.

16
00:00:48,630 --> 00:00:51,830
Eventualmente, algo aparece assim que todas as pginas so

17
00:00:51,830 --> 00:00:54,040
carregadas e ns extramos todos os

18
00:00:54,040 --> 00:00:57,570
livros para o nosso tipo de lista de livros mestres.

19
00:00:57,570 --> 00:01:02,200
Eu s vou sair deste menu e recolher isso.

20
00:01:03,070 --> 00:01:05,180
Se pudssemos fazer isso de

21
00:01:05,180 --> 00:01:07,820
forma assncrona, poderamos aumentar a velocidade massivamente

22
00:01:07,820 --> 00:01:10,950
e a razo para isso  a seguinte.

23
00:01:10,950 --> 00:01:15,030
O que est acontecendo aqui  que a primeira

24
00:01:15,030 --> 00:01:18,840
coisa que estamos fazendo  que estamos criando uma

25
00:01:18,840 --> 00:01:20,750
nova string, bem direta.

26
00:01:20,750 --> 00:01:23,780
Ento, estamos solicitando e obtendo o contedo da pgina

27
00:01:24,640 --> 00:01:26,520
e, em seguida, estamos registrando algo.

28
00:01:26,520 --> 00:01:29,360
Criando um AllBooksPage e meio que estendendo isso.

29
00:01:31,060 --> 00:01:34,760
A principal melhoria do uso de solicitaes assncronas, que

30
00:01:34,760 --> 00:01:36,460
veremos em breve, est

31
00:01:37,550 --> 00:01:39,620
nesta linha aqui, linha 22.

32
00:01:40,610 --> 00:01:43,250
A razo para isso  porque h

33
00:01:43,250 --> 00:01:46,640
algumas coisas acontecendo em segundo plano quando fazemos isso.

34
00:01:46,640 --> 00:01:49,760
Esta linha inicia uma requisio ao servidor, envia

35
00:01:49,760 --> 00:01:52,150
algo para o servidor informando, ei,

36
00:01:52,150 --> 00:01:55,700
eu quero iniciar uma conexo com voc e ento

37
00:01:55,700 --> 00:01:58,510
ele tem que esperar que o servidor responda.

38
00:01:59,400 --> 00:02:01,450
Depois que a conexo  configurada, ela

39
00:02:01,450 --> 00:02:03,540
precisa solicitar ao servidor o URL que

40
00:02:03,540 --> 00:02:04,780
contm o contedo da

41
00:02:04,780 --> 00:02:06,730
pgina e deve aguardar a devoluo dos dados.

42
00:02:06,730 --> 00:02:08,840
Tem que baixar todo o contedo

43
00:02:08,840 --> 00:02:11,700
da pgina e esperar por todos esses dados.

44
00:02:11,700 --> 00:02:13,220
Como voc pode ver, houve

45
00:02:13,220 --> 00:02:15,510
algumas vezes em que estvamos apenas esperando que

46
00:02:15,510 --> 00:02:17,150
o servidor nos desse alguma coisa.

47
00:02:17,150 --> 00:02:19,540
Para nos informar que uma conexo foi configurada ou

48
00:02:19,540 --> 00:02:22,040
para nos informar que os dados esto prontos e,

49
00:02:22,040 --> 00:02:24,240
 claro, para fazer o download dos dados.

50
00:02:26,430 --> 00:02:29,150
Do que vimos na programao

51
00:02:29,150 --> 00:02:34,150
assncrona, espera significa melhorias em potencial ao usar a simultaneidade.

52
00:02:35,630 --> 00:02:37,870
Em Python no podemos executar duas coisas

53
00:02:37,870 --> 00:02:40,820
ao mesmo tempo, a menos que usemos o mdulo

54
00:02:40,820 --> 00:02:43,980
de multiprocessamento, mas poderamos potencialmente enviar o servidor, hey, me

55
00:02:43,980 --> 00:02:46,580
d isso, hey, me d isso, hey, me

56
00:02:46,580 --> 00:02:49,520
d isso e espere por todos trs ao mesmo tempo.

57
00:02:49,520 --> 00:02:51,940
O servidor presumivelmente ser capaz de responder

58
00:02:51,940 --> 00:02:54,420
a essas solicitaes mais ou menos rapidamente

59
00:02:54,420 --> 00:02:57,310
e, em seguida, no ficaremos esperando muito tempo.

60
00:02:57,310 --> 00:02:59,230
S estaremos esperando o servidor

61
00:02:59,230 --> 00:03:02,130
responder aos trs, mais ou menos, simultaneamente.

62
00:03:03,820 --> 00:03:05,110
OK.

63
00:03:05,110 --> 00:03:08,710
Assim como fizemos com nosso agendador de tarefas geradoras simples, no qual tnhamos

64
00:03:08,710 --> 00:03:12,100
nossas trs contagens regressivas e comeamos uma e comeamos a outra, e

65
00:03:12,100 --> 00:03:13,810
ento comeamos a outra, e depois

66
00:03:13,810 --> 00:03:16,850
usamos a prxima para passar por cima de cada uma.

67
00:03:16,850 --> 00:03:19,540
Ns vamos estar fazendo algo assim.

68
00:03:19,540 --> 00:03:22,860
Vamos ter um agendador de tarefas, mas

69
00:03:22,860 --> 00:03:26,600
vamos usar a biblioteca asyncio do Python para

70
00:03:26,600 --> 00:03:29,530
percorrer as vrias tarefas que estaremos

71
00:03:29,530 --> 00:03:31,260
criando e cada tarefa

72
00:03:31,260 --> 00:03:34,470
ser responsvel por buscar uma dessas URLs.

73
00:03:36,010 --> 00:03:39,010
Ns vamos ter uma tarefa por URL

74
00:03:39,010 --> 00:03:40,450
e vamos comear

75
00:03:40,450 --> 00:03:43,550
todos eles ao mesmo tempo usando rendimentos.

76
00:03:43,550 --> 00:03:46,100
Ns vamos esperar e retomar ou suspend-los conforme

77
00:03:46,100 --> 00:03:47,210
os dados retornam.

78
00:03:48,530 --> 00:03:49,990
OK.

79
00:03:49,990 --> 00:03:52,080
Tambm usaremos uma nova biblioteca

80
00:03:52,080 --> 00:03:57,080
chamada aiohttp e usamos anteriormente a biblioteca de solicitaes, como fizemos aqui,

81
00:03:57,410 --> 00:03:59,240
mas a biblioteca de

82
00:03:59,240 --> 00:04:01,600
solicitaes no nos permite fazer

83
00:04:01,600 --> 00:04:03,280
solicitaes de forma assncrona.

84
00:04:03,280 --> 00:04:07,960
Apenas no tem essa declarao suculenta do rendimento para dentro.

85
00:04:07,960 --> 00:04:11,810
Ento, o aiohttp tem eles e est tudo pronto

86
00:04:11,810 --> 00:04:15,420
para ser usado com o asyncio, ento vamos

87
00:04:15,420 --> 00:04:19,100
usar isso nos prximos vdeos para transformar isso

88
00:04:19,100 --> 00:04:21,800
em um scraper da web assncrono.

89
00:04:22,900 --> 00:04:27,470
Alm disso, como um lembrete, a biblioteca assyncio est integrada,

90
00:04:27,470 --> 00:04:31,009
o aiohttp  uma biblioteca de terceiros.

91
00:04:31,009 --> 00:04:32,040
Apenas uma pequena distino.

92
00:04:32,040 --> 00:04:35,410
Ns vamos olhar atravs disso nesta seo.

93
00:04:36,340 --> 00:04:37,570
Vamos para o

94
00:04:37,570 --> 00:04:41,700
prximo vdeo e comearemos com um primeiro pedido com o aiohttp.

95
00:04:41,700 --> 00:04:42,650
Eu te vejo l.

