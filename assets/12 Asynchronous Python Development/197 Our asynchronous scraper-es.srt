1
00:00:00,120 --> 00:00:01,690
Jos: Hola y bienvenido de nuevo.

2
00:00:01,690 --> 00:00:04,520
Espero que hayan visto las charlas

3
00:00:04,520 --> 00:00:08,460
de la ltima conferencia y en esta, vamos a

4
00:00:08,460 --> 00:00:13,030
convertir nuestro raspador que creamos anteriormente en un raspador asincrnico.

5
00:00:13,030 --> 00:00:15,790
Solo para usar las cosas que hemos aprendido y tambin

6
00:00:15,790 --> 00:00:18,090
un par de cosas que se mencionaron brevemente

7
00:00:18,090 --> 00:00:20,570
en las conversaciones que vamos a explicar tambin.

8
00:00:21,950 --> 00:00:24,870
Cuando miramos raspando sitios web antes,

9
00:00:24,870 --> 00:00:29,030
conseguimos hasta 50 pginas aqu, una despus de otra,

10
00:00:29,030 --> 00:00:33,840
de nuestros libros. raspar. com sitio, pero podra ser un

11
00:00:33,840 --> 00:00:35,630
poco lento debido a todas estas pginas.

12
00:00:35,630 --> 00:00:37,650
Si recuerdas, cuando ejecutamos el

13
00:00:37,650 --> 00:00:42,020
men, lo cual voy a hacer ahora, tenemos un perodo

14
00:00:42,020 --> 00:00:44,380
en el que nada pareca suceder.

15
00:00:45,520 --> 00:00:48,630
Esto fue cuando todas las pginas se estaban cargando.

16
00:00:48,630 --> 00:00:51,830
Eventualmente, algo aparece una vez que todas las pginas

17
00:00:51,830 --> 00:00:54,040
se han cargado y hemos extrado

18
00:00:54,040 --> 00:00:57,570
todos los libros en nuestra lista de libros maestros.

19
00:00:57,570 --> 00:01:02,200
Voy a salir de este men y colapsar eso.

20
00:01:03,070 --> 00:01:05,180
Si pudiramos hacer esto de forma

21
00:01:05,180 --> 00:01:07,820
asncrona, podramos aumentar la velocidad de forma

22
00:01:07,820 --> 00:01:10,950
masiva y la razn de esto es la siguiente.

23
00:01:10,950 --> 00:01:15,030
Lo que est sucediendo aqu es que lo primero

24
00:01:15,030 --> 00:01:18,840
que estamos haciendo es que estamos creando una

25
00:01:18,840 --> 00:01:20,750
nueva cadena, bastante directa.

26
00:01:20,750 --> 00:01:23,780
Luego lo estamos solicitando y obteniendo el contenido de la

27
00:01:24,640 --> 00:01:26,520
pgina, y luego estamos registrando algo.

28
00:01:26,520 --> 00:01:29,360
Creando una pgina de AllBooks y extendiendo eso.

29
00:01:31,060 --> 00:01:34,760
La principal mejora del uso de solicitudes asincrnicas, que

30
00:01:34,760 --> 00:01:36,460
veremos pronto, se encuentra

31
00:01:37,550 --> 00:01:39,620
en esta lnea, lnea 22.

32
00:01:40,610 --> 00:01:43,250
El motivo es que hay algunas

33
00:01:43,250 --> 00:01:46,640
cosas sucediendo en el fondo cuando hacemos esto.

34
00:01:46,640 --> 00:01:49,760
Esta lnea inicia una solicitud al servidor,

35
00:01:49,760 --> 00:01:52,150
enva algo al servidor dicindoles, hey,

36
00:01:52,150 --> 00:01:55,700
quiero comenzar una conexin contigo y luego tiene

37
00:01:55,700 --> 00:01:58,510
que esperar a que el servidor responda.

38
00:01:59,400 --> 00:02:01,450
Una vez que la conexin est configurada, tiene

39
00:02:01,450 --> 00:02:03,540
que pedirle al servidor la URL que contiene el

40
00:02:03,540 --> 00:02:04,780
contenido de la pgina y

41
00:02:04,780 --> 00:02:06,730
tiene que esperar a que los datos vuelvan.

42
00:02:06,730 --> 00:02:08,840
Tiene que descargar todo el contenido de

43
00:02:08,840 --> 00:02:11,700
la pgina y esperar a que lleguen todos esos datos.

44
00:02:11,700 --> 00:02:13,220
Como puede ver, hubo un

45
00:02:13,220 --> 00:02:15,510
par de veces all donde solo esperamos que

46
00:02:15,510 --> 00:02:17,150
el servidor nos d algo.

47
00:02:17,150 --> 00:02:19,540
Para decirnos que se ha configurado una conexin

48
00:02:19,540 --> 00:02:22,040
o para decirnos que los datos ya estn listos

49
00:02:22,040 --> 00:02:24,240
y, por supuesto, para que descarguemos los datos.

50
00:02:26,430 --> 00:02:29,150
De lo que hemos visto en

51
00:02:29,150 --> 00:02:34,150
la programacin asincrnica, esperar significa mejoras potenciales del uso de concurrencia.

52
00:02:35,630 --> 00:02:37,870
En Python no podemos ejecutar dos cosas

53
00:02:37,870 --> 00:02:40,820
a la vez, a menos que usemos el mdulo de

54
00:02:40,820 --> 00:02:43,980
procesamiento mltiple, pero potencialmente podramos enviar el servidor, oye, dame

55
00:02:43,980 --> 00:02:46,580
esto, oye, dame esto, oye, dame esto y

56
00:02:46,580 --> 00:02:49,520
luego solo espera a que todo tres al mismo tiempo.

57
00:02:49,520 --> 00:02:51,940
El servidor presumiblemente ser capaz de responder

58
00:02:51,940 --> 00:02:54,420
a estas solicitudes ms o menos rpidamente

59
00:02:54,420 --> 00:02:57,310
y entonces no vamos a esperar demasiado.

60
00:02:57,310 --> 00:02:59,230
Solo estaremos esperando que el servidor

61
00:02:59,230 --> 00:03:02,130
responda a los tres, ms o menos, simultneamente.

62
00:03:03,820 --> 00:03:05,110
Bueno.

63
00:03:05,110 --> 00:03:08,710
Tal como lo hicimos con nuestro planificador simple de tareas generadoras donde

64
00:03:08,710 --> 00:03:12,100
tuvimos nuestras tres cuentas regresivas y comenzamos una y luego comenzamos

65
00:03:12,100 --> 00:03:13,810
la otra, y luego comenzamos la

66
00:03:13,810 --> 00:03:16,850
otra, y luego usamos la siguiente para repasar cada una.

67
00:03:16,850 --> 00:03:19,540
Vamos a estar haciendo algo as.

68
00:03:19,540 --> 00:03:22,860
Vamos a tener un programador de tareas, pero

69
00:03:22,860 --> 00:03:26,600
vamos a utilizar la biblioteca asyncio de Python para

70
00:03:26,600 --> 00:03:29,530
recorrer las diversas tareas que vamos a

71
00:03:29,530 --> 00:03:31,260
crear y cada tarea

72
00:03:31,260 --> 00:03:34,470
ser responsable de obtener una de estas URL.

73
00:03:36,010 --> 00:03:39,010
Vamos a tener una tarea por URL

74
00:03:39,010 --> 00:03:40,450
y vamos a

75
00:03:40,450 --> 00:03:43,550
comenzar todos al mismo tiempo usando rendimientos.

76
00:03:43,550 --> 00:03:46,100
Esperaremos, los reanudaremos o los suspenderemos a medida

77
00:03:46,100 --> 00:03:47,210
que regresen los datos.

78
00:03:48,530 --> 00:03:49,990
Bueno.

79
00:03:49,990 --> 00:03:52,080
Tambin vamos a utilizar una

80
00:03:52,080 --> 00:03:57,080
nueva biblioteca llamada aiohttp y hemos utilizado previamente la biblioteca de solicitudes, como

81
00:03:57,410 --> 00:03:59,240
hemos hecho aqu, pero la

82
00:03:59,240 --> 00:04:01,600
biblioteca de solicitudes no nos permite

83
00:04:01,600 --> 00:04:03,280
realizar solicitudes de forma asincrnica.

84
00:04:03,280 --> 00:04:07,960
Simplemente no tiene esa declaracin jugosa de rendimiento dentro.

85
00:04:07,960 --> 00:04:11,810
Entonces, aiohttp los tiene y est todo listo para

86
00:04:11,810 --> 00:04:15,420
ser utilizado con asyncio, as que lo usaremos

87
00:04:15,420 --> 00:04:19,100
a lo largo de estos prximos videos para

88
00:04:19,100 --> 00:04:21,800
convertirlo en un raspador web asncrono.

89
00:04:22,900 --> 00:04:27,470
Adems, como recordatorio, la biblioteca asyncio est incorporada,

90
00:04:27,470 --> 00:04:31,009
aiohttp es una biblioteca de terceros.

91
00:04:31,009 --> 00:04:32,040
Solo una pequea distincin.

92
00:04:32,040 --> 00:04:35,410
Vamos a revisar eso en esta seccin.

93
00:04:36,340 --> 00:04:37,570
Pasemos al siguiente

94
00:04:37,570 --> 00:04:41,700
video y comenzaremos haciendo una primera solicitud con aiohttp.

95
00:04:41,700 --> 00:04:42,650
Te ver all.

