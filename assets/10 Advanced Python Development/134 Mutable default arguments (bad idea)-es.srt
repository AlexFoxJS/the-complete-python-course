1
00:00:00,296 --> 00:00:01,968
-: Hola y bienvenido de nuevo.

2
00:00:01,968 --> 00:00:04,738
Los argumentos por defecto mutables, es

3
00:00:04,738 --> 00:00:06,183
una idea terrible.

4
00:00:06,183 --> 00:00:08,444
As que aqu hay una trampa comn

5
00:00:08,444 --> 00:00:10,305
en Python que definitivamente quieres

6
00:00:10,305 --> 00:00:13,105
evitar y ese es el argumento predeterminado mutable.

7
00:00:13,105 --> 00:00:14,419
Ya sabes lo que

8
00:00:14,419 --> 00:00:16,154
significa mutable y sabes qu

9
00:00:16,154 --> 00:00:17,908
significa el argumento predeterminado, as

10
00:00:17,908 --> 00:00:20,580
que unmonos a ambos y tomemos esta funcin aqu.

11
00:00:20,580 --> 00:00:23,364
Voy a decir, crea una cuenta y va a hacer

12
00:00:23,364 --> 00:00:25,065
un nombre de la cuenta, que

13
00:00:25,065 --> 00:00:26,429
va a ser una cadena.

14
00:00:26,429 --> 00:00:27,973
Un titular de cuenta que va a

15
00:00:27,973 --> 00:00:30,588
ser una cadena, ese es probablemente el nombre del abridor de cuenta.

16
00:00:30,588 --> 00:00:34,367
Y tambin, titulares de cuentas, que ser una lista

17
00:00:34,367 --> 00:00:37,930
y eso equivaldr a una lista vaca al comienzo.

18
00:00:37,930 --> 00:00:40,471
Por lo tanto, la lgica detrs de esto es

19
00:00:40,471 --> 00:00:43,159
que vas a crear una nueva cuenta con este

20
00:00:43,159 --> 00:00:46,507
nombre, este ser el titular de la cuenta, y tambin puede

21
00:00:46,507 --> 00:00:48,430
tener otros titulares de cuentas y

22
00:00:48,430 --> 00:00:50,177
que aparecern en esta lista aqu.

23
00:00:50,177 --> 00:00:52,689
Entonces puede darle una lista de titulares de cuentas.

24
00:00:52,689 --> 00:00:57,494
Entonces diremos, titulares de cuenta, dot append, holder.

25
00:00:57,494 --> 00:01:00,382
De forma predeterminada, cuando crea una cuenta nueva, agrega

26
00:01:00,382 --> 00:01:02,590
el titular de la cuenta que acaba

27
00:01:02,590 --> 00:01:05,612
de agregar a la lista de titulares de cuentas

28
00:01:05,612 --> 00:01:08,546
y si hay otros titulares de cuentas en esa

29
00:01:08,546 --> 00:01:10,219
lista, tambin los usar.

30
00:01:10,219 --> 00:01:11,318
Y luego vamos a

31
00:01:11,318 --> 00:01:13,492
devolver un diccionario que representa nuestra cuenta.

32
00:01:13,492 --> 00:01:15,014
Y ese va a ser el

33
00:01:15,014 --> 00:01:16,931
nombre de la cuenta, el titular de la

34
00:01:18,056 --> 00:01:20,671
cuenta principal y el que va a ser el titular, aqu.

35
00:01:20,671 --> 00:01:23,113
Y luego ser, titulares de cuentas Va

36
00:01:23,113 --> 00:01:25,702
a ser la lista de titulares de cuentas.

37
00:01:25,702 --> 00:01:28,300
Nuevamente, como llamamos esto, tenemos, por

38
00:01:28,300 --> 00:01:29,711
ejemplo, una cuenta.

39
00:01:29,711 --> 00:01:32,196
Vamos a crear una cuenta, una cuenta de

40
00:01:32,196 --> 00:01:34,113
cheques, y el titular es Rolf.

41
00:01:35,021 --> 00:01:37,230
Observe cmo no tenemos que pasar un argumento

42
00:01:37,230 --> 00:01:38,403
para obtener el parmetro

43
00:01:38,403 --> 00:01:41,932
de los titulares de cuenta porque tiene un valor predeterminado que es esta lista.

44
00:01:41,932 --> 00:01:44,147
Entonces, lo que suceder es que el nombre

45
00:01:44,147 --> 00:01:46,760
va a ser verificado, los titulares sern Rolf, y para

46
00:01:46,760 --> 00:01:48,581
los titulares de cuentas, que es una

47
00:01:48,581 --> 00:01:50,162
lista vaca, vamos a anexar a

48
00:01:50,162 --> 00:01:52,978
Rolf porque ese es el nico titular de la cuenta.

49
00:01:52,978 --> 00:01:54,190
Y luego vamos a devolver un

50
00:01:54,190 --> 00:01:56,369
diccionario, que es el titular de la cuenta principal, que es Rolf.

51
00:01:56,369 --> 00:01:57,503
Y una lista de titulares

52
00:01:57,503 --> 00:01:59,766
de cuenta, que por el momento, solo incluye a Rolf.

53
00:01:59,766 --> 00:02:02,341
Si quisiramos tener varios titulares de cuentas, podramos

54
00:02:02,341 --> 00:02:03,721
hacer esto, por ejemplo, y

55
00:02:03,721 --> 00:02:06,531
los titulares de las cuentas sern Jen y Rolf,

56
00:02:06,531 --> 00:02:09,574
ya que adjuntamos el abridor, el titular de la cuenta

57
00:02:09,574 --> 00:02:12,024
principal, a la lista de titulares de cuentas.

58
00:02:12,024 --> 00:02:14,164
Pero, digamos que no queremos

59
00:02:14,164 --> 00:02:16,525
pasar un argumento a esta lista.

60
00:02:16,525 --> 00:02:17,789
Solo queremos crear una

61
00:02:17,789 --> 00:02:19,123
cuenta y esto ser

62
00:02:19,123 --> 00:02:21,790
manejado por nosotros, pondr a Rolf en esta lista.

63
00:02:22,697 --> 00:02:25,022
Entonces creemos otra cuenta.

64
00:02:25,022 --> 00:02:26,039
Digamos una cuenta de

65
00:02:26,039 --> 00:02:29,863
ahorro, pero esta vez, Jen es la propietaria de la cuenta e imaginemos que

66
00:02:29,863 --> 00:02:31,115
tienen algn tipo de

67
00:02:31,115 --> 00:02:33,335
finanzas compartidas all y ella es la propietaria

68
00:02:33,335 --> 00:02:35,321
de la cuenta, y ella es la

69
00:02:35,321 --> 00:02:36,897
nica titular de esa cuenta.

70
00:02:36,897 --> 00:02:40,897
Digamos, Rolf le enva el dinero todos los meses.

71
00:02:42,184 --> 00:02:43,693
a2 y a1 son ambos diccionarios,

72
00:02:43,693 --> 00:02:45,352
eso es lo que devuelve esta funcin.

73
00:02:45,352 --> 00:02:48,219
Qu vamos a ver cuando imprimamos a2?

74
00:02:48,219 --> 00:02:49,475
Esta es una pregunta capciosa, por supuesto.

75
00:02:49,475 --> 00:02:51,610
S que ya sabes sobre funciones y

76
00:02:51,610 --> 00:02:53,200
diccionarios, por qu te pregunto esto?

77
00:02:53,200 --> 00:02:54,651
Esta es una pregunta capciosa,

78
00:02:54,651 --> 00:02:56,085
qu va a regresar?

79
00:02:56,085 --> 00:02:58,163
Y es importante, pruebe esto

80
00:02:58,163 --> 00:03:00,413
primero si no quiere equivocarse.

81
00:03:03,889 --> 00:03:07,000
Con suerte, lo probaste.

82
00:03:07,000 --> 00:03:08,801
Como puede ver aqu, lo que

83
00:03:08,801 --> 00:03:11,754
vemos es que el nombre es ahorros, el titular de

84
00:03:11,754 --> 00:03:16,073
la cuenta principal es Jen, pero los titulares de las cuentas son Rolf y Jen.

85
00:03:16,073 --> 00:03:18,299
Entonces, cmo sucedi eso?

86
00:03:18,299 --> 00:03:22,363
Esta funcin aqu nunca vio a Rolf en ningn lado.

87
00:03:22,363 --> 00:03:24,772
Rolf no pas la funcin, no est

88
00:03:24,772 --> 00:03:28,215
en ninguno de los argumentos, no he codificado a Rolf aqu.

89
00:03:28,215 --> 00:03:30,132
Entonces, cmo pas esto?

90
00:03:31,232 --> 00:03:34,815
Bueno, lo que sucedi aqu es que el parmetro predeterminado

91
00:03:35,839 --> 00:03:37,792
para la funcin crear cuenta

92
00:03:37,792 --> 00:03:41,134
se evala cuando la funcin no se define cuando

93
00:03:41,134 --> 00:03:43,036
se llama a la funcin.

94
00:03:43,036 --> 00:03:46,445
Entonces, esta lista aqu y a qu apunta

95
00:03:46,445 --> 00:03:49,612
este parmetro, por defecto, es este objeto.

96
00:03:51,733 --> 00:03:54,267
Entonces esto se crea cuando la funcin se

97
00:03:54,267 --> 00:03:57,084
crea no cuando se llama a la funcin.

98
00:03:57,084 --> 00:03:58,568
Te aclarar esto.

99
00:03:58,568 --> 00:04:01,129
Voy a ir aqu, imprimir la identificacin de

100
00:04:01,129 --> 00:04:04,046
los titulares de la cuenta y ejecutar esto de nuevo.

101
00:04:04,884 --> 00:04:07,340
Y observe cmo las dos veces que ejecutamos la

102
00:04:07,340 --> 00:04:08,923
funcin, la identificacin es la misma.

103
00:04:10,575 --> 00:04:14,191
Cuando no pasamos el parmetro, lo siento, un argumento

104
00:04:14,191 --> 00:04:16,098
aqu Usamos esta lista.

105
00:04:16,098 --> 00:04:19,872
No usamos una nueva lista, usamos esta lista y eso

106
00:04:19,872 --> 00:04:22,730
se defini cuando se defini la funcin.

107
00:04:22,730 --> 00:04:25,332
As que siempre es la misma lista para cada vez que

108
00:04:25,332 --> 00:04:26,697
se llama a la funcin, as

109
00:04:26,697 --> 00:04:30,135
que cuando modificamos la lista, cuando la mutemos, sigue siendo la misma lista que

110
00:04:30,135 --> 00:04:32,234
la prxima vez que llama la funcin, entonces ahora

111
00:04:32,234 --> 00:04:34,342
contiene Rolf, antes que nada, va a modificarse para

112
00:04:34,342 --> 00:04:36,037
contener a Jen otra vez

113
00:04:36,037 --> 00:04:37,884
Y si hacemos esto de

114
00:04:37,884 --> 00:04:40,638
nuevo, ser Rolf, Jen y alguien ms.

115
00:04:40,638 --> 00:04:42,980
Entonces, hay dos formas de resolver este problema.

116
00:04:42,980 --> 00:04:44,932
este es un problema comn, por cierto, no

117
00:04:44,932 --> 00:04:46,645
es algo que mucha gente se da

118
00:04:46,645 --> 00:04:48,021
cuenta y mucha gente comienza a

119
00:04:48,021 --> 00:04:49,746
hacer esto y luego dicen "qu demonios

120
00:04:49,746 --> 00:04:52,076
est pasando en mi cdigo? No entiendo".

121
00:04:52,076 --> 00:04:54,433
Entonces, dos formas de resolver este problema.

122
00:04:54,433 --> 00:04:58,123
El primero, por supuesto, es no tener un argumento predeterminado.

123
00:04:58,123 --> 00:04:59,041
Suficientemente simple.

124
00:04:59,041 --> 00:05:01,413
No tiene un argumento predeterminado, en

125
00:05:01,413 --> 00:05:04,410
su lugar, pase una lista vaca aqu.

126
00:05:04,410 --> 00:05:06,897
Estas listas vacas se evalan cuando se llama a la

127
00:05:06,897 --> 00:05:08,394
funcin, por lo que van a

128
00:05:08,394 --> 00:05:09,227
estar vacas cada vez.

129
00:05:09,227 --> 00:05:11,310
Hay una nueva lista vaca.

130
00:05:12,283 --> 00:05:15,283
Nueva lista vaca, un objeto por supuesto.

131
00:05:16,292 --> 00:05:20,042
La segunda opcin es no hacer de esto una lista,

132
00:05:21,280 --> 00:05:23,447
sino hacerla igual a ninguna.

133
00:05:24,281 --> 00:05:26,693
Bien, entonces no tienes que pasar nada aqu porque

134
00:05:26,693 --> 00:05:27,917
tiene un argumento predeterminado, pero

135
00:05:27,917 --> 00:05:30,792
por supuesto, no es ninguno, as que no puedes anexarlo, entonces

136
00:05:30,792 --> 00:05:33,339
lo que hars es, si los titulares lo siento, si

137
00:05:33,339 --> 00:05:35,549
no titulares de cuentas, por lo tanto, si

138
00:05:35,549 --> 00:05:37,691
los titulares de cuentas no tienen ninguno, digamos

139
00:05:37,691 --> 00:05:40,201
que los titulares de cuentas ahora son una lista.

140
00:05:40,201 --> 00:05:42,494
Y luego puedes agregarlo.

141
00:05:42,494 --> 00:05:44,217
Entonces, Que es lo que hace eso?

142
00:05:44,217 --> 00:05:46,712
Si no pasa una lista aqu,

143
00:05:46,712 --> 00:05:48,457
crear una nueva y

144
00:05:48,457 --> 00:05:50,345
si pasa una lista

145
00:05:50,345 --> 00:05:52,250
aqu, diga, por ejemplo, Jen.

146
00:05:52,250 --> 00:05:54,833
Si usamos esta lista, se aadir a ella

147
00:05:54,833 --> 00:05:56,719
y los titulares de la cuenta

148
00:05:56,719 --> 00:06:01,082
terminarn siendo los titulares y cualquier otra persona que usted haya definido aqu.

149
00:06:01,082 --> 00:06:02,392
Estas son sus

150
00:06:02,392 --> 00:06:05,204
dos opciones para evitar problemas de argumentos mutables.

151
00:06:05,204 --> 00:06:06,977
Los argumentos mutables son, por

152
00:06:06,977 --> 00:06:09,898
supuesto, cualquier tiempo de datos que sea mutable.

153
00:06:09,898 --> 00:06:11,548
Puede tener diccionarios,

154
00:06:11,548 --> 00:06:15,813
listas, puede tener objetos de su propio tipo, etc.

155
00:06:15,813 --> 00:06:18,443
Si desea evitar estos problemas, use

156
00:06:18,443 --> 00:06:22,308
tipos de datos inmutables como sus valores predeterminados.

157
00:06:22,308 --> 00:06:25,975
Enteros, cuerdas, flotadores, tuplas, etc.

158
00:06:27,021 --> 00:06:29,031
De esta forma, no puede

159
00:06:29,031 --> 00:06:32,951
cambiar uno y no cambiar en las ejecuciones de la funcin.

160
00:06:32,951 --> 00:06:34,057
As que eso es

161
00:06:34,057 --> 00:06:35,409
todo por este video.

162
00:06:35,409 --> 00:06:37,639
Quera hacerte consciente de este muy comn

163
00:06:37,639 --> 00:06:40,422
error para que no te caigas en esta trampa.

164
00:06:40,422 --> 00:06:42,607
Entonces eso es todo y te ver en el prximo.

