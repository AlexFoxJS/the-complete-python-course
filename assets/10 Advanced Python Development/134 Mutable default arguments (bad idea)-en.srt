1
00:00:00,296 --> 00:00:01,968
<v ->Hi and welcome back.</v>

2
00:00:01,968 --> 00:00:04,738
Mutable default arguments,

3
00:00:04,738 --> 00:00:06,183
is a terrible idea.

4
00:00:06,183 --> 00:00:08,444
So here's a common pitfall in Python

5
00:00:08,444 --> 00:00:10,305
that you definitely want to avoid

6
00:00:10,305 --> 00:00:13,105
and that's the mutable default argument.

7
00:00:13,105 --> 00:00:14,419
You know what mutable means

8
00:00:14,419 --> 00:00:16,154
and you know what default argument means

9
00:00:16,154 --> 00:00:17,908
so let's join them both together

10
00:00:17,908 --> 00:00:20,580
and let's take this function here.

11
00:00:20,580 --> 00:00:23,364
I'm gonna say, create account

12
00:00:23,364 --> 00:00:25,065
and it's going to make a name of the account,

13
00:00:25,065 --> 00:00:26,429
which is gonna be a string.

14
00:00:26,429 --> 00:00:27,973
An account holder which is going to be a string,

15
00:00:27,973 --> 00:00:30,588
that's probably the name of the account opener.

16
00:00:30,588 --> 00:00:34,367
And also, account holders, which is going to be a list

17
00:00:34,367 --> 00:00:37,930
and that's going to equal an empty list at the start.

18
00:00:37,930 --> 00:00:40,471
So, the logic behind this is that you're going

19
00:00:40,471 --> 00:00:43,159
to create a new account with this name, this is going

20
00:00:43,159 --> 00:00:46,507
to be the account holder, and it can have also other

21
00:00:46,507 --> 00:00:48,430
account holders as well and they'll

22
00:00:48,430 --> 00:00:50,177
be coming through in this list here.

23
00:00:50,177 --> 00:00:52,689
So you can give it a list of account holders.

24
00:00:52,689 --> 00:00:57,494
So we'll say, account holders, dot append, holder.

25
00:00:57,494 --> 00:01:00,382
By default, when you create a new account

26
00:01:00,382 --> 00:01:02,590
you'll append the holder of the account

27
00:01:02,590 --> 00:01:05,612
that you just added over to the account holders list

28
00:01:05,612 --> 00:01:08,546
and if there are any other account holders in that list

29
00:01:08,546 --> 00:01:10,219
you will also use them.

30
00:01:10,219 --> 00:01:11,318
And then we're gonna return a dictionary

31
00:01:11,318 --> 00:01:13,492
representing our account.

32
00:01:13,492 --> 00:01:15,014
And that's going to be the name of the account,

33
00:01:15,014 --> 00:01:16,931
the main account holder

34
00:01:18,056 --> 00:01:20,671
and that's going to be the holder, parameter here.

35
00:01:20,671 --> 00:01:23,113
And then it's gonna be, account holders

36
00:01:23,113 --> 00:01:25,702
It's going to be the account holders list.

37
00:01:25,702 --> 00:01:28,300
Again, how we call this, is we

38
00:01:28,300 --> 00:01:29,711
have for example an account one.

39
00:01:29,711 --> 00:01:32,196
Let's create account, checking account,

40
00:01:32,196 --> 00:01:34,113
and the holder is Rolf.

41
00:01:35,021 --> 00:01:37,230
Notice how we don't have to pass an argument

42
00:01:37,230 --> 00:01:38,403
to get the account holders parameter

43
00:01:38,403 --> 00:01:41,932
because it has a default value which is this list.

44
00:01:41,932 --> 00:01:44,147
So, What's gonna happen is that the name is gonna

45
00:01:44,147 --> 00:01:46,760
be checking, the holders gonna be Rolf,

46
00:01:46,760 --> 00:01:48,581
and to the account holders, which is an empty list,

47
00:01:48,581 --> 00:01:50,162
we're going to append Rolf

48
00:01:50,162 --> 00:01:52,978
because that's the only holder in the account.

49
00:01:52,978 --> 00:01:54,190
And then we're gonna return a dictionary,

50
00:01:54,190 --> 00:01:56,369
which is the main account holder, which is Rolf.

51
00:01:56,369 --> 00:01:57,503
And a list of account holders,

52
00:01:57,503 --> 00:01:59,766
which is at the moment, only includes Rolf.

53
00:01:59,766 --> 00:02:02,341
If we wanted to have multiple account holders,

54
00:02:02,341 --> 00:02:03,721
we could do this for example

55
00:02:03,721 --> 00:02:06,531
and then the account holders will be Jen and Rolf

56
00:02:06,531 --> 00:02:09,574
because we append the opener, the main account holder

57
00:02:09,574 --> 00:02:12,024
over to the list of account holders.

58
00:02:12,024 --> 00:02:14,164
But, let's say we don't want to pass

59
00:02:14,164 --> 00:02:16,525
in an argument to this list.

60
00:02:16,525 --> 00:02:17,789
We just want to create an account

61
00:02:17,789 --> 00:02:19,123
and this will be handled for us,

62
00:02:19,123 --> 00:02:21,790
it will put Rolf into this list.

63
00:02:22,697 --> 00:02:25,022
Then let's create another account.

64
00:02:25,022 --> 00:02:26,039
Let's say a savings account,

65
00:02:26,039 --> 00:02:29,863
but this time, Jen is the owner of the account

66
00:02:29,863 --> 00:02:31,115
and let's imagine they've got

67
00:02:31,115 --> 00:02:33,335
some sort of shared finances there

68
00:02:33,335 --> 00:02:35,321
and she's the owner of the account,

69
00:02:35,321 --> 00:02:36,897
and she's the only holder in that account.

70
00:02:36,897 --> 00:02:40,897
Let's say, Rolf sends her the money every month.

71
00:02:42,184 --> 00:02:43,693
a2 and a1 are both dictionaries,

72
00:02:43,693 --> 00:02:45,352
that's what this function returns.

73
00:02:45,352 --> 00:02:48,219
What are we going to see when we print a2?

74
00:02:48,219 --> 00:02:49,475
This is a trick question, of course.

75
00:02:49,475 --> 00:02:51,610
I know you already know about functions and dictionaries

76
00:02:51,610 --> 00:02:53,200
so why would I ask you this?

77
00:02:53,200 --> 00:02:54,651
This is a trick question,

78
00:02:54,651 --> 00:02:56,085
What is it gonna return?

79
00:02:56,085 --> 00:02:58,163
And important, try this out first if

80
00:02:58,163 --> 00:03:00,413
you don't want to be wrong.

81
00:03:03,889 --> 00:03:07,000
Hopefully, you tried that out.

82
00:03:07,000 --> 00:03:08,801
As you can see here, what we see is

83
00:03:08,801 --> 00:03:11,754
the name is savings, the main account holder is Jen,

84
00:03:11,754 --> 00:03:16,073
but the account holders are both Rolf and Jen.

85
00:03:16,073 --> 00:03:18,299
So, how did that happen?

86
00:03:18,299 --> 00:03:22,363
This function here never saw Rolf anywhere.

87
00:03:22,363 --> 00:03:24,772
Rolf didn't get pass the function, it's not in any

88
00:03:24,772 --> 00:03:28,215
of the arguments, I have not hard coded Rolf in here.

89
00:03:28,215 --> 00:03:30,132
So how did this happen?

90
00:03:31,232 --> 00:03:34,815
well what happened here is that the default

91
00:03:35,839 --> 00:03:37,792
parameter for the create account function

92
00:03:37,792 --> 00:03:41,134
gets evaluated when the function is defined

93
00:03:41,134 --> 00:03:43,036
not when the function is called.

94
00:03:43,036 --> 00:03:46,445
So this list here and what this parameter

95
00:03:46,445 --> 00:03:49,612
points to, by default, is this object.

96
00:03:51,733 --> 00:03:54,267
So this gets created when the function gets created

97
00:03:54,267 --> 00:03:57,084
not when the function is called.

98
00:03:57,084 --> 00:03:58,568
I'll make this clearer for you.

99
00:03:58,568 --> 00:04:01,129
I'm going to here, print the id of

100
00:04:01,129 --> 00:04:04,046
account holders and run this again.

101
00:04:04,884 --> 00:04:07,340
And notice how both times we run the function,

102
00:04:07,340 --> 00:04:08,923
the id is the same.

103
00:04:10,575 --> 00:04:14,191
When we didn't pass parameter, sorry, an argument here

104
00:04:14,191 --> 00:04:16,098
We use this list.

105
00:04:16,098 --> 00:04:19,872
We didn't use a new list, we used this list

106
00:04:19,872 --> 00:04:22,730
and that was defined when the function was defined.

107
00:04:22,730 --> 00:04:25,332
So it's always the same list for every time

108
00:04:25,332 --> 00:04:26,697
the function gets called

109
00:04:26,697 --> 00:04:30,135
so when we modify the list, when we mutate it,

110
00:04:30,135 --> 00:04:32,234
that's still the same list that next time the function calls

111
00:04:32,234 --> 00:04:34,342
so now it contains Rolf, first of all

112
00:04:34,342 --> 00:04:36,037
then it's going to modify to contain Jen again.

113
00:04:36,037 --> 00:04:37,884
And if we do this again it will be

114
00:04:37,884 --> 00:04:40,638
Rolf, Jen and someone else.

115
00:04:40,638 --> 00:04:42,980
So, there are two ways to solve this problem.

116
00:04:42,980 --> 00:04:44,932
this is a common problem, by the way,

117
00:04:44,932 --> 00:04:46,645
Not one that a lot of people realise

118
00:04:46,645 --> 00:04:48,021
and a lot of people start doing this

119
00:04:48,021 --> 00:04:49,746
and then they are like "what the hell is going on

120
00:04:49,746 --> 00:04:52,076
in my code? I do not understand".

121
00:04:52,076 --> 00:04:54,433
So, two ways to solve this problem.

122
00:04:54,433 --> 00:04:58,123
First one, of course, is to not have a default argument.

123
00:04:58,123 --> 00:04:59,041
Simple enough.

124
00:04:59,041 --> 00:05:01,413
Don't have a default argument,

125
00:05:01,413 --> 00:05:04,410
instead pass in an empty list here.

126
00:05:04,410 --> 00:05:06,897
These empty lists get evaluated when

127
00:05:06,897 --> 00:05:08,394
the function gets called so they

128
00:05:08,394 --> 00:05:09,227
are going to be empty every time.

129
00:05:09,227 --> 00:05:11,310
There's a new empty list.

130
00:05:12,283 --> 00:05:15,283
New empty list, an object of course.

131
00:05:16,292 --> 00:05:20,042
The second option is to not make this a list,

132
00:05:21,280 --> 00:05:23,447
but make it equal to none.

133
00:05:24,281 --> 00:05:26,693
Okay, Then you don't have to pass anything here

134
00:05:26,693 --> 00:05:27,917
because it has a default argument,

135
00:05:27,917 --> 00:05:30,792
but of course, it's none so you can't appends to it

136
00:05:30,792 --> 00:05:33,339
so then what you will do is, if account holders

137
00:05:33,339 --> 00:05:35,549
I'm sorry, if not account holders

138
00:05:35,549 --> 00:05:37,691
so if account holders is none then say

139
00:05:37,691 --> 00:05:40,201
account holders is now a list.

140
00:05:40,201 --> 00:05:42,494
And then you can append to it.

141
00:05:42,494 --> 00:05:44,217
So what does that do?

142
00:05:44,217 --> 00:05:46,712
If you don't pass a list in here

143
00:05:46,712 --> 00:05:48,457
it will create a new one

144
00:05:48,457 --> 00:05:50,345
and if you do pass a list in here

145
00:05:50,345 --> 00:05:52,250
say, for example, Jen.

146
00:05:52,250 --> 00:05:54,833
If we use this list and it will append to it

147
00:05:54,833 --> 00:05:56,719
and the account holders will end up being

148
00:05:56,719 --> 00:06:01,082
the holder and whom ever else you defined in here.

149
00:06:01,082 --> 00:06:02,392
So those are your two options to

150
00:06:02,392 --> 00:06:05,204
avoid mutable argument problems.

151
00:06:05,204 --> 00:06:06,977
Mutable arguments are of course,

152
00:06:06,977 --> 00:06:09,898
any data time that is mutable.

153
00:06:09,898 --> 00:06:11,548
You can have dictionaries, lists,

154
00:06:11,548 --> 00:06:15,813
you can have objects of your own type and so forth.

155
00:06:15,813 --> 00:06:18,443
If you want to avoid these problems,

156
00:06:18,443 --> 00:06:22,308
use immutable data types as your default values.

157
00:06:22,308 --> 00:06:25,975
Integers, strings, floats, tuples and so on.

158
00:06:27,021 --> 00:06:29,031
That way you cannot change one

159
00:06:29,031 --> 00:06:32,951
and it won't change across executions of the function.

160
00:06:32,951 --> 00:06:34,057
So that's it for this video

161
00:06:34,057 --> 00:06:35,409
I just wanted to make you aware of

162
00:06:35,409 --> 00:06:37,639
this very, very common pitfall

163
00:06:37,639 --> 00:06:40,422
so that you don't fall for this trap.

164
00:06:40,422 --> 00:06:42,607
So that's it and I'll see you on the next one.

