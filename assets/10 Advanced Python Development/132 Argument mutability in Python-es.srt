1
00:00:00,120 --> 00:00:01,360
-: Hola, y bienvenido de nuevo.

2
00:00:01,360 --> 00:00:03,390
En el ltimo video, analizamos la mutabilidad,

3
00:00:03,390 --> 00:00:04,390
y ahora vamos

4
00:00:04,390 --> 00:00:06,350
a ver los argumentos aprobados en Python.

5
00:00:08,030 --> 00:00:10,310
Veamos un par de ejemplos de argumentos en

6
00:00:10,310 --> 00:00:12,660
Python, y voy a mostrarte este diccionario aqu.

7
00:00:14,960 --> 00:00:19,240
Los diccionarios son un gran ejemplo de estructuras de datos mutables.

8
00:00:19,240 --> 00:00:23,300
Y luego crearemos una funcin llamada see friend que nos permitir

9
00:00:23,300 --> 00:00:25,400
ver a un amigo que no

10
00:00:25,400 --> 00:00:26,900
vimos durante mucho tiempo.

11
00:00:26,900 --> 00:00:31,900
As que vea amigo, amigos, nombre y esta funcin, todo lo que har,

12
00:00:32,630 --> 00:00:36,820
dir que el nombre de los amigos es igual a cero.

13
00:00:36,820 --> 00:00:40,530
Si pasamos por amigos visto por ltima vez y Rolf, se

14
00:00:40,530 --> 00:00:44,250
establecer el valor de Rolf a cero en lugar de 31.

15
00:00:44,250 --> 00:00:47,870
Ahora aqu viene lo interesante.

16
00:00:47,870 --> 00:00:51,640
Vamos a imprimir la ID de amigos aqu, dentro

17
00:00:52,880 --> 00:00:54,020
de la funcin.

18
00:00:54,020 --> 00:00:56,450
Este es el parmetro amigos.

19
00:00:56,450 --> 00:01:00,760
Luego, tambin vamos a imprimir el ID de amigos visto por ltima vez, que

20
00:01:00,760 --> 00:01:03,360
es nuestro diccionario que est en el mbito global.

21
00:01:05,300 --> 00:01:10,300
Finalmente, vamos a llamar a ver a un amigo con amigos visto por ltima

22
00:01:11,830 --> 00:01:14,810
vez y a Rolf, y vamos a imprimir la

23
00:01:15,680 --> 00:01:18,450
identificacin de amigos que vimos por ltima vez.

24
00:01:20,040 --> 00:01:22,180
Cuntos nmeros diferentes crees que

25
00:01:22,180 --> 00:01:23,710
vamos a ver aqu?

26
00:01:28,070 --> 00:01:32,010
Afortunadamente, la respuesta fue una, un solo nmero.

27
00:01:32,010 --> 00:01:33,430
Pero, quiero decir, ya veremos.

28
00:01:35,860 --> 00:01:38,810
Observe cmo lo primero que imprimimos fue la ltima

29
00:01:38,810 --> 00:01:40,740
vez que vieron a estos amigos

30
00:01:41,700 --> 00:01:43,250
aqu, y es un nmero.

31
00:01:44,330 --> 00:01:47,420
Luego llamamos a ver a amigos, y pasamos en amigos

32
00:01:47,420 --> 00:01:48,740
visto por ltima vez.

33
00:01:49,700 --> 00:01:52,060
El nombre cambi a amigos, pero

34
00:01:52,060 --> 00:01:55,400
en realidad el nmero sigue siendo el mismo.

35
00:01:55,400 --> 00:01:58,380
Sigue siendo el mismo diccionario, este aqu.

36
00:01:59,790 --> 00:02:02,120
Finalmente, cuando salimos de la funcin

37
00:02:02,120 --> 00:02:05,770
despus de cambiar la propiedad interna del diccionario de amigos,

38
00:02:05,770 --> 00:02:08,440
imprimimos la ID y segua siendo la misma.

39
00:02:11,310 --> 00:02:13,070
Ahora hagamos otra cosa.

40
00:02:13,070 --> 00:02:17,130
Voy a imprimir la identificacin de los amigos que vi por ltima vez, Rolf, antes

41
00:02:17,130 --> 00:02:18,750
de llamar a la funcin, y

42
00:02:19,870 --> 00:02:22,130
luego vamos a imprimir la identificacin de los

43
00:02:22,130 --> 00:02:26,160
amigos que vimos por ltima vez a Rolf, despus de llamar a la funcin.

44
00:02:27,280 --> 00:02:30,590
Observe cmo los amigos vieron por ltima vez que

45
00:02:30,590 --> 00:02:33,080
Rolf habr cambiado de 31 a cero.

46
00:02:33,080 --> 00:02:35,070
Ahora, cuntos nmeros diferentes crees

47
00:02:35,070 --> 00:02:38,990
que vamos a ver impresos en total, uno, dos o tres?

48
00:02:42,530 --> 00:02:44,320
Espero que hayas dicho tres.

49
00:02:44,320 --> 00:02:47,440
Los amigos vieron por ltima vez a Rolf aqu, es el

50
00:02:48,310 --> 00:02:51,230
nmero 31, amigo visto por ltima vez Rolf aqu es

51
00:02:51,230 --> 00:02:54,890
el nmero cero, los enteros son inmutables, as que cada vez que cambiamos

52
00:02:54,890 --> 00:02:56,710
uno, se crea un nuevo nmero entero.

53
00:02:56,710 --> 00:02:57,543
Vamos a ejecutarlo.

54
00:02:58,960 --> 00:03:03,610
Y como puede ver, ahora tenemos tres diccionarios aqu.

55
00:03:03,610 --> 00:03:07,100
Lo siento, tres nmeros diferentes aqu.

56
00:03:07,100 --> 00:03:11,030
El primero es este ltimo amigo visto.

57
00:03:11,970 --> 00:03:15,040
El segundo es este ID de Rolf, y este

58
00:03:15,040 --> 00:03:16,850
es aqu, luego imprimimos el

59
00:03:16,850 --> 00:03:19,350
ID del diccionario de amigos, el mismo

60
00:03:19,350 --> 00:03:20,650
que el primero, luego

61
00:03:21,970 --> 00:03:25,270
imprimimos el ID del nuevo nmero de Rolf, y notamos

62
00:03:25,270 --> 00:03:28,520
cmo dos y cuatro son diferente, y finalmente imprimimos el

63
00:03:29,920 --> 00:03:31,820
ID del diccionario AN, que es

64
00:03:31,820 --> 00:03:32,720
el mismo.

65
00:03:34,830 --> 00:03:38,340
Entonces esto es mutabilidad en accin.

66
00:03:38,340 --> 00:03:41,470
Lo que hemos visto es que el ltimo

67
00:03:42,750 --> 00:03:44,920
diccionario visto por los amigos no

68
00:03:44,920 --> 00:03:47,890
ha cambiado, pero tiene una de sus propiedades.

69
00:03:47,890 --> 00:03:50,640
Aunque en ningn momento hemos modificado el

70
00:03:50,640 --> 00:03:52,690
ltimo diccionario de amigos visto.

71
00:03:52,690 --> 00:03:55,940
Solo hemos modificado el valor que pasamos

72
00:03:55,940 --> 00:03:58,040
a la funcin all.

73
00:03:59,120 --> 00:04:00,560
Djame borrar los ID

74
00:04:00,560 --> 00:04:01,980
para poder explicar las

75
00:04:01,980 --> 00:04:04,440
cosas un poco mejor sin todo ese galimatas.

76
00:04:05,610 --> 00:04:08,630
Entonces, de nuevo, lo que est sucediendo es

77
00:04:08,630 --> 00:04:10,660
que estas variables, los amigos que

78
00:04:10,660 --> 00:04:13,630
se vieron por ltima vez y los amigos

79
00:04:13,630 --> 00:04:15,900
son simplemente notas post-it sobre el

80
00:04:15,900 --> 00:04:18,810
valor, el valor es este diccionario, este diccionario

81
00:04:18,810 --> 00:04:20,540
especficamente con esta ID que tenamos.

82
00:04:21,660 --> 00:04:25,270
Cuando pasamos el valor aqu, lo que sucede es

83
00:04:25,270 --> 00:04:27,290
que estamos pasando el valor

84
00:04:27,290 --> 00:04:28,740
de la variable, no

85
00:04:28,740 --> 00:04:31,110
estamos pasando la variable en s,

86
00:04:31,110 --> 00:04:34,900
por lo que el diccionario ahora se asigna a amigos.

87
00:04:36,000 --> 00:04:40,870
Friends es solo otra nota post-it en el diccionario.

88
00:04:42,370 --> 00:04:46,210
De hecho, podemos imprimir si amigos iguales a

89
00:04:46,210 --> 00:04:48,300
amigos vieron por ltima vez.

90
00:04:48,300 --> 00:04:52,790
El igual igual va a comparar el contenido, por lo que si

91
00:04:53,660 --> 00:04:56,470
hubiera dos diccionarios distintos con contenido distinto,

92
00:04:56,470 --> 00:04:58,760
esto sera cierto, pero se compara

93
00:04:58,760 --> 00:05:02,560
con los ID, por lo que nos va a decir

94
00:05:02,560 --> 00:05:04,030
si son exactamente el

95
00:05:04,030 --> 00:05:06,240
mismo objeto, y cuando ejecutamos es

96
00:05:06,240 --> 00:05:09,300
verdad, porque esta variable de amigos aqu que

97
00:05:09,300 --> 00:05:12,140
tiene el valor de amigos visto por

98
00:05:12,140 --> 00:05:14,540
ltima vez es en realidad la

99
00:05:14,540 --> 00:05:17,010
misma que la ltima variable de amigos

100
00:05:17,010 --> 00:05:18,420
que se defini aqu.

101
00:05:18,420 --> 00:05:21,010
El mismo diccionario exactamente.

102
00:05:21,010 --> 00:05:24,300
Por lo tanto, cuando mutamos uno, eso

103
00:05:25,280 --> 00:05:28,210
est cambiando la propiedad Rolf de

104
00:05:28,210 --> 00:05:29,560
este diccionario aqu.

105
00:05:30,720 --> 00:05:34,920
Por lo tanto, los amigos que vimos por ltima vez

106
00:05:34,920 --> 00:05:38,850
tendrn el valor cero despus de ejecutar la funcin.

107
00:05:38,850 --> 00:05:39,700
Ah lo tenemos.

108
00:05:42,660 --> 00:05:45,600
Entonces, la mutabilidad puede ser bastante peligrosa, porque si cambias

109
00:05:45,600 --> 00:05:47,950
el diccionario en esta funcin, y ests pensando

110
00:05:47,950 --> 00:05:49,890
oye, s, cambiamos el diccionario y

111
00:05:49,890 --> 00:05:50,723
ahora podemos usarlo,

112
00:05:50,723 --> 00:05:55,420
por ejemplo decir que quieres usarlo aqu un poco ms, puede que no se d

113
00:05:56,500 --> 00:05:59,150
cuenta de que en realidad est cambiando en cualquier

114
00:05:59,150 --> 00:06:02,000
otro lugar que use ese mismo diccionario, por lo

115
00:06:02,000 --> 00:06:03,450
que puede ser bastante peligroso.

116
00:06:04,830 --> 00:06:06,048
Bueno.

117
00:06:06,048 --> 00:06:07,698
Ese es el concepto de mutabilidad.

118
00:06:09,650 --> 00:06:14,080
Sin embargo, si tienes algo as como la edad es 20 y

119
00:06:14,080 --> 00:06:17,660
luego tienes una funcin que aumenta la edad, y

120
00:06:23,970 --> 00:06:25,060
haces esto, entonces

121
00:06:26,340 --> 00:06:31,340
dices ID de edad, aumenta edad, edad, ID de edad, lo que estamos

122
00:06:33,810 --> 00:06:36,040
haciendo aqu es definiendo una variable.

123
00:06:36,040 --> 00:06:38,530
Eso es un post-it en el valor 20.

124
00:06:40,200 --> 00:06:43,900
Entonces, estamos obteniendo el ID de esos 20, estamos llamando

125
00:06:43,900 --> 00:06:46,670
al aumento de edad, que tiene el

126
00:06:46,670 --> 00:06:50,470
valor 20, por lo que la edad actual es otro

127
00:06:50,470 --> 00:06:53,840
post-it en 20, y ahora estamos diciendo que este

128
00:06:53,840 --> 00:06:56,800
post-it ahora apunta a 20 ms uno, entonces

129
00:06:56,800 --> 00:06:59,470
eso es 21, un nmero completamente diferente.

130
00:06:59,470 --> 00:07:02,530
Luego, cuando regresemos, imprimiremos la ID de edad.

131
00:07:03,640 --> 00:07:05,620
Qu crees que vamos a ver?

132
00:07:05,620 --> 00:07:07,950
Vamos a ver el mismo nmero

133
00:07:07,950 --> 00:07:11,580
dos veces, o vamos a ver dos nmeros diferentes?

134
00:07:17,810 --> 00:07:20,780
Bueno, no vemos nada, porque no los imprimimos.

135
00:07:20,780 --> 00:07:22,810
Veamos si adivinaste eso.

136
00:07:23,670 --> 00:07:24,503
Vamos a imprimirlo.

137
00:07:27,390 --> 00:07:30,400
Obtenemos el mismo nmero dos veces.

138
00:07:30,400 --> 00:07:33,520
Qu nos dice eso sobre el valor de la edad?

139
00:07:33,520 --> 00:07:35,820
Qu es la edad aqu?

140
00:07:35,820 --> 00:07:37,470
La edad aqu es 20.

141
00:07:37,470 --> 00:07:38,640
Qu es la edad aqu?

142
00:07:39,760 --> 00:07:42,540
Bueno, debe ser 20, porque tiene la misma

143
00:07:42,540 --> 00:07:46,140
ID, y sabemos que los nmeros son todos objetos diferentes.

144
00:07:47,940 --> 00:07:51,450
Entonces, lo que sucedi es que esta variable de edad actual

145
00:07:51,450 --> 00:07:54,360
tiene asignado el nmero 20, pero luego lo que

146
00:07:55,320 --> 00:07:56,590
hemos hecho es que

147
00:07:56,590 --> 00:08:01,590
ahora hemos dicho que la variable de edad actual es un post-it en 21, no en 20.

148
00:08:02,120 --> 00:08:03,950
La edad sigue siendo un post-it en 20.

149
00:08:05,670 --> 00:08:08,770
Entonces el nmero 20 no ha cambiado.

150
00:08:08,770 --> 00:08:10,660
Son solo las variables que se

151
00:08:10,660 --> 00:08:12,440
han movido de una a otra.

152
00:08:14,430 --> 00:08:18,220
De nuevo, un concepto importante para la mutabilidad.

153
00:08:18,220 --> 00:08:21,300
Si haces esto en un objeto inmutable, simplemente

154
00:08:21,300 --> 00:08:23,160
cambiar dentro de la funcin.

155
00:08:23,160 --> 00:08:26,190
Esta variable ahora apunta a otro lugar,

156
00:08:26,190 --> 00:08:28,510
pero los elementos externos no cambiarn.

157
00:08:30,350 --> 00:08:31,900
Djanos darte un tercer ejemplo.

158
00:08:33,171 --> 00:08:35,040
Una lista de nmeros primos.

159
00:08:36,560 --> 00:08:39,160
La identificacin de los nmeros primos ser

160
00:08:39,160 --> 00:08:41,910
algo, pero tendremos que acordarnos de imprimir esta

161
00:08:41,910 --> 00:08:45,430
vez, luego diremos nmeros primos ms siete y once, y

162
00:08:46,520 --> 00:08:49,290
luego imprimiremos la ID de los nmeros primos.

163
00:08:49,290 --> 00:08:51,290
Qu pensamos que vamos a ver ahora?

164
00:08:58,600 --> 00:09:00,500
Recuperamos la misma identificacin.

165
00:09:01,410 --> 00:09:04,850
Esa es una funcionalidad extraa, verdad?

166
00:09:04,850 --> 00:09:09,850
Este es primos primos iguales ms siete, 11.

167
00:09:10,220 --> 00:09:14,740
Sin duda, debera ser algo diferente.

168
00:09:14,740 --> 00:09:17,470
Hemos movido la variable de sealar a esta lista

169
00:09:17,470 --> 00:09:19,870
ahora apunta a la lista ms larga.

170
00:09:21,040 --> 00:09:25,600
Pero recuerda, cuando dije que esto es equivalente a

171
00:09:25,600 --> 00:09:28,400
esto, estaba mintiendo, no lo es.

172
00:09:28,400 --> 00:09:33,400
Lo que est sucediendo aqu es que los primos son iguales

173
00:09:34,120 --> 00:09:36,420
a los primes dot iadd.

174
00:09:38,530 --> 00:09:39,363
Ese.

175
00:09:40,390 --> 00:09:43,330
Y depende de la implementacin de esta funcin si

176
00:09:43,330 --> 00:09:45,890
va a modificar los nmeros primos, o si

177
00:09:45,890 --> 00:09:48,540
va a crear una nueva lista, lo que

178
00:09:48,540 --> 00:09:50,650
determina si va a ser el

179
00:09:50,650 --> 00:09:52,400
mismo objeto o uno diferente.

180
00:09:53,512 --> 00:09:54,345
Bueno.

181
00:09:56,704 --> 00:09:58,240
Y en este caso,

182
00:09:58,240 --> 00:10:00,990
en el caso de la lista, y

183
00:10:00,990 --> 00:10:04,900
en el caso de muchos objetos, cuando haces iadd,

184
00:10:04,900 --> 00:10:07,310
cuando haces ms igual, o menos

185
00:10:08,150 --> 00:10:11,260
igual, o iguales, o divide igual, la

186
00:10:11,260 --> 00:10:16,260
documentacin oficial de Python dice que cuando haces eso, uno de estos

187
00:10:16,370 --> 00:10:19,440
iadd o isub, o imul para multiplicar,

188
00:10:19,440 --> 00:10:22,310
deberan modificar el objeto si es posible.

189
00:10:22,310 --> 00:10:25,320
Entonces, en el caso de las listas, iadd modifica la lista.

190
00:10:26,780 --> 00:10:28,380
Bueno.

191
00:10:28,380 --> 00:10:30,940
Por supuesto, si los nmeros

192
00:10:32,500 --> 00:10:35,580
primos son iguales a dos, tres,

193
00:10:35,580 --> 00:10:39,310
cinco, ms eso, vamos a ver dos nmeros

194
00:10:39,310 --> 00:10:42,790
diferentes impresos aqu, porque son dos cosas.

195
00:10:42,790 --> 00:10:45,440
Qu pasa si hacemos primos primos iguales ms eso?

196
00:10:48,240 --> 00:10:52,080
Tambin obtenemos dos objetos completamente diferentes impresos.

197
00:10:52,950 --> 00:10:55,290
Nuevamente, lo que est

198
00:10:55,290 --> 00:10:59,760
sucediendo aqu es primos primos iguales agregando siete, 11.

199
00:11:00,600 --> 00:11:01,750
No es iadd

200
00:11:01,750 --> 00:11:06,470
Iadd est destinado a, cuando sea posible, modificar uno mismo,

201
00:11:07,370 --> 00:11:10,010
agregar no tiene ese requisito.

202
00:11:10,010 --> 00:11:12,230
Y en el caso de las listas, se

203
00:11:12,230 --> 00:11:14,620
ha implementado para que cree una nueva lista.

204
00:11:14,620 --> 00:11:17,870
Entonces, esta es la razn por la cual esto crea una nueva lista por completo.

205
00:11:19,990 --> 00:11:20,870
Bueno.

206
00:11:20,870 --> 00:11:23,060
Entonces depende de la implementacin

207
00:11:23,060 --> 00:11:26,130
si los objetos son mutables o no.

208
00:11:28,240 --> 00:11:29,500
Demasiado de esto.

209
00:11:29,500 --> 00:11:31,510
Solo recuerda cuando le pasas algo

210
00:11:31,510 --> 00:11:34,400
a una funcin, entonces puedes potencialmente mutar esa cosa,

211
00:11:34,400 --> 00:11:36,320
y luego el valor fuera de

212
00:11:36,320 --> 00:11:38,190
la funcin tambin habr cambiado.

213
00:11:38,190 --> 00:11:39,630
Por ejemplo, con diccionarios,

214
00:11:39,630 --> 00:11:42,610
y puedes hacerlo con listas tambin si usas ms

215
00:11:42,610 --> 00:11:45,540
igual, o de hecho cualquier otra funcin de i-something,

216
00:11:46,740 --> 00:11:49,830
a menos que lo que pases a la funcin sea

217
00:11:49,830 --> 00:11:52,080
inmutable, en cuyo caso, cuando lo intentes

218
00:11:52,080 --> 00:11:55,580
para cambiarlo, no habr cambiado fuera de la funcin, solo dentro.

219
00:11:55,580 --> 00:11:57,380
Esencialmente, lo que has hecho es mover

220
00:11:57,380 --> 00:11:58,970
la variable de un lugar a otro.

221
00:12:00,770 --> 00:12:04,460
De acuerdo, eso es todo, espero que esto comience a

222
00:12:04,460 --> 00:12:06,270
tener un poco de sentido.

223
00:12:06,270 --> 00:12:08,480
A medida que programes ms en Python, creo

224
00:12:08,480 --> 00:12:12,090
que estars contento de haber recibido esta conferencia ma con el fin

225
00:12:12,090 --> 00:12:13,280
de comprender un poco

226
00:12:13,280 --> 00:12:15,080
ms de lo que ocurre detrs

227
00:12:15,080 --> 00:12:17,350
de las escenas con mutabilidad y diferentes variables.

228
00:12:17,350 --> 00:12:19,680
Realmente es una pregunta frecuente en

229
00:12:19,680 --> 00:12:21,800
muchos foros en lnea de Python,

230
00:12:21,800 --> 00:12:23,460
preguntas y desbordamiento de stock.

231
00:12:23,460 --> 00:12:24,410
Entonces, es bueno saber

232
00:12:24,410 --> 00:12:26,280
que as es como se manejan las cosas.

233
00:12:27,300 --> 00:12:29,800
Entonces con eso dicho, nos vemos en el prximo video.

