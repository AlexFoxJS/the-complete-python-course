1
00:00:00,550 --> 00:00:02,020
<v Jose>Hi and welcome back.</v>

2
00:00:02,020 --> 00:00:05,280
In this video, we're talking about list comprehension.

3
00:00:05,280 --> 00:00:07,160
List comprehension is one of Python's

4
00:00:07,160 --> 00:00:09,380
most fun and useful features

5
00:00:09,380 --> 00:00:12,200
and it's essential that you know about it.

6
00:00:12,200 --> 00:00:15,670
It's a Pythonic way of constructing a list.

7
00:00:17,360 --> 00:00:20,010
Here, let's say we've got a list of numbers.

8
00:00:22,370 --> 00:00:23,350
This is, by the way,

9
00:00:23,350 --> 00:00:26,400
a way you can construct a list of numbers.

10
00:00:28,120 --> 00:00:30,170
This gives you a list of zero to nine.

11
00:00:30,170 --> 00:00:32,390
Remember if we just use the range function,

12
00:00:32,390 --> 00:00:34,760
that gives us something we can iterate over

13
00:00:34,760 --> 00:00:37,880
with a for loop but it doesn't actually give us a list.

14
00:00:39,850 --> 00:00:44,850
So, what if I wanted a new list of numbers

15
00:00:44,870 --> 00:00:47,370
but where the numbers are doubled?

16
00:00:47,370 --> 00:00:50,780
So, zero, two, four, six, eight and so on.

17
00:00:51,710 --> 00:00:53,530
Here's a way we could do it.

18
00:00:53,530 --> 00:00:57,360
Double numbers equals empty list

19
00:00:58,460 --> 00:01:02,330
and then we'll use a for loop for num in numbers.

20
00:01:02,330 --> 00:01:03,163
Right?

21
00:01:03,163 --> 00:01:06,390
And then we'll say doubled numbers dot append,

22
00:01:06,390 --> 00:01:08,210
we've looked at append before

23
00:01:09,540 --> 00:01:12,680
and we're gonna append num multiplied by two.

24
00:01:13,890 --> 00:01:16,800
And then we're gonna print double numbers.

25
00:01:18,050 --> 00:01:20,250
So this is something that we could do before

26
00:01:21,210 --> 00:01:22,550
and now we've got zero, two, four,

27
00:01:22,550 --> 00:01:23,900
six and eight and so forth.

28
00:01:25,840 --> 00:01:29,460
But it's a pretty long-winded way of doing things.

29
00:01:29,460 --> 00:01:31,870
You have to get an empty list then you have to iterate

30
00:01:31,870 --> 00:01:33,810
over your initial list then you have to append

31
00:01:33,810 --> 00:01:37,250
every number to the doubled numbers list,

32
00:01:37,250 --> 00:01:40,740
multiply by two and then at the end, you print it out.

33
00:01:40,740 --> 00:01:43,390
I nearly ran out of breath just by saying that.

34
00:01:43,390 --> 00:01:46,290
So, better way, in Python, to do that,

35
00:01:46,290 --> 00:01:47,810
is with list comprehension.

36
00:01:49,710 --> 00:01:52,210
In list comprehension, our double numbers could be

37
00:01:55,040 --> 00:01:59,440
N times two for N in numbers.

38
00:02:02,313 --> 00:02:04,263
I'll let you soak that in for a moment.

39
00:02:07,060 --> 00:02:08,630
What we're doing here is we're saying,

40
00:02:08,630 --> 00:02:11,550
okay, we've got a list and in this list

41
00:02:11,550 --> 00:02:15,040
we are going to put N times two

42
00:02:18,090 --> 00:02:19,760
and in here we've got a for loop,

43
00:02:19,760 --> 00:02:22,420
which means N is a variable.

44
00:02:22,420 --> 00:02:27,360
This N is going to be the first element of the numbers list.

45
00:02:27,360 --> 00:02:28,280
So that's zero

46
00:02:29,300 --> 00:02:31,360
and the value we're gonna put inside this new list

47
00:02:31,360 --> 00:02:34,180
is N times two, so that's zero.

48
00:02:34,180 --> 00:02:37,120
Then N becomes one because that's the second element

49
00:02:37,120 --> 00:02:38,480
of numbers and we're gonna put

50
00:02:38,480 --> 00:02:41,060
one times two inside this new list.

51
00:02:41,060 --> 00:02:44,170
Then N becomes two and we're gonna put two times two,

52
00:02:44,170 --> 00:02:45,560
then N becomes three and we're gonna put

53
00:02:45,560 --> 00:02:47,510
three times two and so on.

54
00:02:47,510 --> 00:02:49,810
This is the number or this is the value

55
00:02:49,810 --> 00:02:52,300
we're putting into our new list

56
00:02:52,300 --> 00:02:55,570
and this is the list we're iterating over

57
00:02:55,570 --> 00:02:57,650
to extract the initial values.

58
00:02:59,750 --> 00:03:03,740
Okay, now I know this looks very bizarre

59
00:03:03,740 --> 00:03:06,370
and the first few times I encountered list comprehension,

60
00:03:06,370 --> 00:03:09,120
a number of years ago, I thought,

61
00:03:09,120 --> 00:03:11,250
this is just weird, this is weird,

62
00:03:11,250 --> 00:03:14,180
'cause why do you have a for loop inside the list.

63
00:03:14,180 --> 00:03:16,160
It doesn't make any sense

64
00:03:16,160 --> 00:03:19,250
but it is a better way of constructing

65
00:03:19,250 --> 00:03:22,110
a list of double numbers than the other method.

66
00:03:22,110 --> 00:03:24,750
It's a one-liner, first of all.

67
00:03:24,750 --> 00:03:28,470
Not that reducing lines of code is the objective

68
00:03:28,470 --> 00:03:30,640
but I think it's pretty readable

69
00:03:30,640 --> 00:03:34,330
because you've got where you're getting your numbers from

70
00:03:34,330 --> 00:03:37,410
and what you are doing to them in order to build your list.

71
00:03:37,410 --> 00:03:39,900
Everything's in there, side by side,

72
00:03:39,900 --> 00:03:43,359
and I find it's pretty readable, you know?

73
00:03:43,359 --> 00:03:45,810
The first few times I thought it wasn't really readable,

74
00:03:45,810 --> 00:03:47,310
I thought it was quite confusing

75
00:03:47,310 --> 00:03:49,530
but as you see this more and more,

76
00:03:49,530 --> 00:03:52,880
you notice that it's quite easy to see.

77
00:03:54,500 --> 00:03:57,730
Okay, let's look at another list comprehension.

78
00:03:57,730 --> 00:04:00,780
Now we're gonna build strings inside the list.

79
00:04:00,780 --> 00:04:03,810
We're gonna, first of all, put our square brackets.

80
00:04:03,810 --> 00:04:05,570
This tells us we've got a list.

81
00:04:06,740 --> 00:04:10,370
We're gonna say what we want inside our list.

82
00:04:10,370 --> 00:04:12,660
I am age years old

83
00:04:14,840 --> 00:04:18,140
and now we're gonna say, for age in doubled.

84
00:04:18,140 --> 00:04:20,580
Again, what we're doing here is we're iterating

85
00:04:20,580 --> 00:04:23,600
over the doubled, oops sorry, doubled numbers.

86
00:04:25,310 --> 00:04:28,210
Numbers, we're gonna iterate over doubled numbers.

87
00:04:28,210 --> 00:04:30,910
Age is going to be the first number

88
00:04:30,910 --> 00:04:32,190
and what we're gonna put inside

89
00:04:32,190 --> 00:04:34,480
a new list is this value here.

90
00:04:34,480 --> 00:04:36,620
I am zero years old.

91
00:04:36,620 --> 00:04:38,110
Then we're gonna move on to the next number

92
00:04:38,110 --> 00:04:39,450
in double numbers, that's two

93
00:04:39,450 --> 00:04:42,030
and we're gonna print, I am two years old.

94
00:04:42,030 --> 00:04:43,210
Oh, sorry, we're not gonna print anything,

95
00:04:43,210 --> 00:04:44,810
we're gonna put this into a new list.

96
00:04:44,810 --> 00:04:47,330
Then we can print phrases out

97
00:04:47,330 --> 00:04:51,240
and we'll see that we get a list of strings.

98
00:04:51,240 --> 00:04:52,690
This is what we would expect.

99
00:04:56,960 --> 00:04:59,150
Then I say we've got a names list

100
00:05:00,410 --> 00:05:04,070
of John, Rolf, and Anne.

101
00:05:07,370 --> 00:05:12,060
Now, these have uppercase first letters.

102
00:05:12,060 --> 00:05:14,460
Sometimes, for example, if you wanted to ask

103
00:05:14,460 --> 00:05:16,250
the user, who's your friend?

104
00:05:16,250 --> 00:05:19,380
And they type John, they're like John is my friend.

105
00:05:19,380 --> 00:05:22,300
You'll know that john and John is not the same thing

106
00:05:22,300 --> 00:05:25,400
because one has a uppercase J, one has a lowercase J.

107
00:05:25,400 --> 00:05:26,380
So what can you do?

108
00:05:28,430 --> 00:05:31,310
You can turn them all into lowercase strings

109
00:05:31,310 --> 00:05:33,910
instead of having the uppercase letter.

110
00:05:33,910 --> 00:05:35,970
How would you do that?

111
00:05:35,970 --> 00:05:39,960
Now, you know that you have to iterate over this list,

112
00:05:39,960 --> 00:05:43,470
using for name in names list, for example.

113
00:05:43,470 --> 00:05:45,280
And you know that you want to turn

114
00:05:45,280 --> 00:05:47,360
the string to a lowercase string.

115
00:05:49,030 --> 00:05:51,740
If you've not turned strings into lowercase strings before,

116
00:05:51,740 --> 00:05:55,410
this could be a good opportunity to go and Google that,

117
00:05:55,410 --> 00:05:57,630
how to turn a string into a lowercase string.

118
00:05:57,630 --> 00:05:59,820
Pause the video, give it a go.

119
00:05:59,820 --> 00:06:01,510
How would you turn this list

120
00:06:01,510 --> 00:06:03,780
into a list of lowercase strings?

121
00:06:09,300 --> 00:06:11,610
The reason I told you to just go and Google it,

122
00:06:11,610 --> 00:06:13,590
as opposed to me just telling you,

123
00:06:13,590 --> 00:06:15,940
is that I find that by doing your own research,

124
00:06:17,140 --> 00:06:18,890
the concept is gonna stick a lot better.

125
00:06:18,890 --> 00:06:19,990
Of course, this is a course,

126
00:06:19,990 --> 00:06:21,530
you know I'm not gonna just be like,

127
00:06:21,530 --> 00:06:23,030
go and Google that and go and Google that

128
00:06:23,030 --> 00:06:24,930
and then Google that one,

129
00:06:24,930 --> 00:06:27,400
but every now and then, I may prompt you

130
00:06:27,400 --> 00:06:30,910
to Google something or research something on your own.

131
00:06:30,910 --> 00:06:32,720
What we're gonna do here is we're gonna say,

132
00:06:32,720 --> 00:06:36,550
for name in names list and what we're gonna put in

133
00:06:36,550 --> 00:06:39,210
is the name turned to a lowercase letter.

134
00:06:39,210 --> 00:06:41,250
So that's name.lower.

135
00:06:42,170 --> 00:06:46,100
Dot lower, on a name, turns it into a lower case.

136
00:06:46,100 --> 00:06:47,890
So that's John with a lowercase J

137
00:06:49,810 --> 00:06:53,120
and then we can print it out just so you believe me

138
00:06:54,920 --> 00:06:56,220
but that's what it.

139
00:06:56,220 --> 00:06:58,120
John, Rolf, and Anne.

140
00:06:58,120 --> 00:07:00,310
So if you are asking a user to type in the friend's name

141
00:07:00,310 --> 00:07:04,210
and they've typed it without the uppercase J,

142
00:07:04,210 --> 00:07:05,490
this was still match.

143
00:07:06,420 --> 00:07:11,420
Of course, a friend is input into your friend name

144
00:07:12,890 --> 00:07:16,070
and print friend in lowercase names.

145
00:07:16,070 --> 00:07:18,620
By the way, I don't know if we've, oh I pressed save again,

146
00:07:18,620 --> 00:07:20,320
I don't know we've seen this syntax again

147
00:07:20,320 --> 00:07:22,270
but you can check whether a specific value

148
00:07:22,270 --> 00:07:26,150
is inside a list just by using this in keyword.

149
00:07:26,150 --> 00:07:28,640
So in this case, if they entered John,

150
00:07:28,640 --> 00:07:30,270
we will print true if John

151
00:07:30,270 --> 00:07:33,270
is in this list of lowercase names.

152
00:07:33,270 --> 00:07:34,103
Let's run it

153
00:07:36,551 --> 00:07:38,501
and as you can see, it prints out true.

154
00:07:40,060 --> 00:07:42,903
Now, what if your user does the opposite

155
00:07:42,903 --> 00:07:45,730
of what you expect and they type it with an uppercase J,

156
00:07:45,730 --> 00:07:47,600
then we say false, right?

157
00:07:47,600 --> 00:07:50,640
That makes sense because these names are now lowercase.

158
00:07:50,640 --> 00:07:53,770
So what you'd normally do when you want to compare strings,

159
00:07:53,770 --> 00:07:56,260
is you would turn them all to lowercase

160
00:07:56,260 --> 00:07:57,350
and of course, you would turn

161
00:07:57,350 --> 00:07:59,980
the user's input to the lowercase too

162
00:08:01,070 --> 00:08:03,160
and then no matter what they type,

163
00:08:03,160 --> 00:08:05,170
you're gonna be comparing apples with apples,

164
00:08:05,170 --> 00:08:08,350
as opposed to apples with oranges,

165
00:08:08,350 --> 00:08:10,400
even with an uppercase N there at the end,

166
00:08:10,400 --> 00:08:11,350
you still get true.

167
00:08:13,300 --> 00:08:15,940
Anyway, this was a bit of a sidetrack there.

168
00:08:15,940 --> 00:08:17,430
This isn't in the script, actually,

169
00:08:17,430 --> 00:08:18,980
that I've got for this lecture,

170
00:08:18,980 --> 00:08:22,040
so please bear with me while I take you on a detour

171
00:08:22,040 --> 00:08:23,870
around the Python language.

172
00:08:23,870 --> 00:08:28,370
And let's now say that we want to do a with condition,

173
00:08:28,370 --> 00:08:31,990
a list comprehension with conditionals.

174
00:08:31,990 --> 00:08:34,500
We've got our numbers list up here.

175
00:08:34,500 --> 00:08:37,410
We are now going to construct a list

176
00:08:37,410 --> 00:08:40,930
of only even numbers.

177
00:08:43,210 --> 00:08:46,030
Only even number, so we're gonna call it evens

178
00:08:46,900 --> 00:08:48,310
and how would you do that?

179
00:08:50,040 --> 00:08:52,230
If you want, pause the video and go and research it

180
00:08:52,230 --> 00:08:54,300
but this is more of a rhetorical question.

181
00:08:54,300 --> 00:08:57,510
So, if we only want even numbers,

182
00:08:57,510 --> 00:09:00,710
of course, if you've thought this through,

183
00:09:00,710 --> 00:09:02,240
this means you're pretty cheeky,

184
00:09:02,240 --> 00:09:04,019
this is a list of even numbers

185
00:09:04,019 --> 00:09:06,490
because the doubled numbers are always even, of course,

186
00:09:07,660 --> 00:09:11,150
because we're doubling each number, multiplied by two.

187
00:09:12,150 --> 00:09:14,370
But what if I wanted to remove

188
00:09:14,370 --> 00:09:16,700
odd numbers from this numbers list?

189
00:09:18,790 --> 00:09:23,510
Well, we can do that by saying N for N in numbers.

190
00:09:24,640 --> 00:09:27,040
This is going to give us exactly the same list

191
00:09:27,040 --> 00:09:29,590
that we've got up here, N for N in numbers

192
00:09:29,590 --> 00:09:31,490
is not doing anything to change the value

193
00:09:31,490 --> 00:09:36,090
we're putting into the new list, but at the end,

194
00:09:36,090 --> 00:09:37,960
we can actually put an if statement,

195
00:09:37,960 --> 00:09:40,640
which is starting to make things a bit more confusing.

196
00:09:40,640 --> 00:09:43,050
How do we check that a number is even?

197
00:09:46,580 --> 00:09:47,900
You guessed that right.

198
00:09:47,900 --> 00:09:52,700
If N divided by two or N modulus two is equal to zero.

199
00:09:52,700 --> 00:09:57,100
So, if this is true, we're gonna put N into the list.

200
00:09:57,100 --> 00:09:58,890
If this is false,

201
00:09:58,890 --> 00:10:02,220
we are not going to put N into our new list.

202
00:10:05,950 --> 00:10:06,783
There you have it.

203
00:10:06,783 --> 00:10:08,630
Now we have zero, two, four, six, and eight.

204
00:10:09,690 --> 00:10:11,710
A pretty useful way of constructing

205
00:10:12,600 --> 00:10:16,520
new lists based on some conditionals

206
00:10:16,520 --> 00:10:18,170
and changing the values.

207
00:10:18,170 --> 00:10:21,200
This is starting to get slightly more confusing

208
00:10:21,200 --> 00:10:23,670
'cause now this is a bit of a longer statement.

209
00:10:23,670 --> 00:10:27,600
You've got a for loop and an if statement on the same line.

210
00:10:27,600 --> 00:10:30,210
So be careful as you construct list comprehensions.

211
00:10:30,210 --> 00:10:33,010
You don't wanna go over the top.

212
00:10:33,010 --> 00:10:34,800
You want to keep it readable

213
00:10:34,800 --> 00:10:36,670
and I think this is fairly readable

214
00:10:36,670 --> 00:10:40,810
because of the name, the variable is called evens,

215
00:10:40,810 --> 00:10:43,440
so it's probably gonna store even numbers

216
00:10:43,440 --> 00:10:46,250
but it's starting to get a bit unreadable, even for me.

217
00:10:48,550 --> 00:10:50,640
Let's say we've got two lists.

218
00:10:50,640 --> 00:10:53,490
One of friends, and that's gonna be Rolf,

219
00:10:53,490 --> 00:10:56,410
Anna, and Charlie.

220
00:10:57,340 --> 00:11:00,460
And then one of guests in your party

221
00:11:00,460 --> 00:11:02,380
and you've got Jose, Rolf,

222
00:11:02,380 --> 00:11:05,460
Ruth, Charlie, and Michael.

223
00:11:05,460 --> 00:11:07,070
The uppercase and lowercase changes

224
00:11:07,070 --> 00:11:09,160
are all intentional, by the way.

225
00:11:10,360 --> 00:11:14,490
So, how would you construct a list

226
00:11:14,490 --> 00:11:18,680
of the friends that are also in your party?

227
00:11:18,680 --> 00:11:21,610
That's probably gonna be Rolf and Charlie.

228
00:11:21,610 --> 00:11:22,930
How would you construct that list?

229
00:11:22,930 --> 00:11:24,810
So, present friends.

230
00:11:25,920 --> 00:11:28,220
Now pause the video and give this a go.

231
00:11:34,610 --> 00:11:35,700
I hope you got that.

232
00:11:35,700 --> 00:11:38,620
What to do, is say name for naming guests.

233
00:11:39,650 --> 00:11:41,510
That's gonna iterate over all your guests,

234
00:11:41,510 --> 00:11:44,410
that everyone that's currently in your party,

235
00:11:44,410 --> 00:11:47,770
but you only want that if the name,

236
00:11:48,810 --> 00:11:52,700
that's the name of the guest, in friends.

237
00:11:53,670 --> 00:11:56,490
Notice how all your friends are lowercase.

238
00:11:56,490 --> 00:11:59,490
So you can do name.lower, in order

239
00:11:59,490 --> 00:12:01,940
to make sure you're comparing apples with apples.

240
00:12:02,940 --> 00:12:05,150
That's going to turn the name Charlie

241
00:12:05,150 --> 00:12:06,430
into a lowercase Charlie,

242
00:12:06,430 --> 00:12:08,730
in order to be able to match with your friend.

243
00:12:10,120 --> 00:12:12,010
Now, if you wanted the names to end up

244
00:12:12,010 --> 00:12:13,810
with a capital R, a capital A,

245
00:12:13,810 --> 00:12:15,900
capital C, which they don't right now.

246
00:12:16,820 --> 00:12:18,890
If you print this, you'll see what I mean,

247
00:12:18,890 --> 00:12:20,480
you get Rolf and Charlie

248
00:12:22,420 --> 00:12:26,090
and it just so happens that you're taking these names here,

249
00:12:26,090 --> 00:12:30,930
Rolf and Charlie, but if Ruth was here

250
00:12:30,930 --> 00:12:34,110
and let's say Ruth, there.

251
00:12:34,110 --> 00:12:35,470
Let's run it.

252
00:12:35,470 --> 00:12:37,710
You can see that Ruth has a lowercase R

253
00:12:37,710 --> 00:12:40,660
because you're taking this this Ruth here.

254
00:12:40,660 --> 00:12:42,940
If you wanted to make sure that all these names

255
00:12:42,940 --> 00:12:46,320
end up with a capital first letter, you can do,

256
00:12:47,650 --> 00:12:50,140
don't capitalise, and that's gonna make

257
00:12:50,140 --> 00:12:53,550
the first letter a capital letter on any string.

258
00:12:53,550 --> 00:12:56,900
So this is just a nice bit of information for you.

259
00:12:58,580 --> 00:12:59,413
Okay?

260
00:13:01,930 --> 00:13:06,930
Of course, if this Ruth had a capital R,

261
00:13:07,670 --> 00:13:09,060
you would have a problem

262
00:13:09,060 --> 00:13:11,780
because this Ruth has a lowercase R,

263
00:13:11,780 --> 00:13:13,520
this Ruth has an uppercase R.

264
00:13:15,240 --> 00:13:17,210
If we print present friends here,

265
00:13:17,210 --> 00:13:22,210
Ruth is now missing because we are checking if name.lower,

266
00:13:22,740 --> 00:13:26,320
that's the guest name, this Ruth, is in friends,

267
00:13:26,320 --> 00:13:28,700
but it's not because this one has a lowercase R,

268
00:13:28,700 --> 00:13:30,100
this one has an uppercase R.

269
00:13:31,150 --> 00:13:32,870
So what could you do?

270
00:13:38,340 --> 00:13:41,710
The first option would be to create a list comprehension

271
00:13:41,710 --> 00:13:44,760
that would turn your friend names into lowercase names.

272
00:13:46,430 --> 00:13:48,500
Such a list comprehension would look very similar

273
00:13:48,500 --> 00:13:50,779
to the one we've got up here,

274
00:13:50,779 --> 00:13:53,210
N lower for N in friends.

275
00:13:56,480 --> 00:14:00,120
And now you could create a variable,

276
00:14:00,120 --> 00:14:04,200
such as lower friends, that doesn't sound very right

277
00:14:04,200 --> 00:14:05,940
and you could compare against that,

278
00:14:05,940 --> 00:14:08,140
name lower in lower friends.

279
00:14:09,190 --> 00:14:11,010
If you didn't want to create a new variable,

280
00:14:11,010 --> 00:14:13,380
however, you could further complicate your code

281
00:14:13,380 --> 00:14:16,810
by plonking that list comprehension in there.

282
00:14:16,810 --> 00:14:17,880
Don't do that.

283
00:14:18,840 --> 00:14:20,490
Don't, okay?

284
00:14:20,490 --> 00:14:22,220
This, much better.

285
00:14:22,220 --> 00:14:24,730
This, very unreadable.

286
00:14:24,730 --> 00:14:25,829
You don't know what's going on in here.

287
00:14:25,829 --> 00:14:27,250
There's just too many brackets

288
00:14:27,250 --> 00:14:30,320
and square brackets, normal brackets,

289
00:14:30,320 --> 00:14:32,950
for loops, everything is going on in here.

290
00:14:32,950 --> 00:14:34,020
This works, though.

291
00:14:35,220 --> 00:14:37,180
It gives you your three friends

292
00:14:37,180 --> 00:14:39,930
but this is a better way of going about it.

293
00:14:43,040 --> 00:14:46,530
Okay, let's look at set and dictionary comprehension

294
00:14:46,530 --> 00:14:48,430
but this video is getting pretty long,

295
00:14:48,430 --> 00:14:50,410
so let's do it in a very next video.

296
00:14:50,410 --> 00:14:51,580
Instead of list comprehension,

297
00:14:51,580 --> 00:14:53,500
we're gonna look at set and dictionary comprehension,

298
00:14:53,500 --> 00:14:54,990
which is pretty much the same thing,

299
00:14:54,990 --> 00:14:59,120
but allows us to construct new sets and new dictionaries.

300
00:14:59,120 --> 00:15:00,940
I'll see you in the very next video.

301
00:15:00,940 --> 00:15:01,773
Stay with me.

