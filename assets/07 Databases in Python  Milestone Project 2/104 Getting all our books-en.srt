1
00:00:00,230 --> 00:00:01,610
<v Jose>Hi and welcome back.</v>

2
00:00:01,610 --> 00:00:03,300
In this video we're going to be adding

3
00:00:03,300 --> 00:00:06,380
select statements to our milestone project.

4
00:00:07,650 --> 00:00:09,190
First of all, let's remember to delete

5
00:00:09,190 --> 00:00:11,360
this milestone, or books_file, here

6
00:00:11,360 --> 00:00:13,470
because we don't need it any longer.

7
00:00:13,470 --> 00:00:15,340
Just to make sure that,

8
00:00:15,340 --> 00:00:16,840
it gives us an error when we try to use it,

9
00:00:16,840 --> 00:00:18,390
we're not misusing it anywhere.

10
00:00:19,260 --> 00:00:22,690
Then let's go down to our get_all_books function,

11
00:00:22,690 --> 00:00:25,010
and notice how now it's given us two errors.

12
00:00:25,010 --> 00:00:27,560
It's trying to open the books_file that no longer exists,

13
00:00:27,560 --> 00:00:29,830
and it shouldn't because we don't want to use it.

14
00:00:29,830 --> 00:00:32,430
And also it's using the json module which it shouldn't,

15
00:00:32,430 --> 00:00:34,590
because again, we're no longer using json.

16
00:00:36,060 --> 00:00:38,450
We want to retrieve all the books

17
00:00:38,450 --> 00:00:41,030
from our database, from our table.

18
00:00:42,090 --> 00:00:44,950
You know how to do all of this

19
00:00:44,950 --> 00:00:48,620
except for actually getting the books back.

20
00:00:48,620 --> 00:00:50,690
So, you know how to set up the connection,

21
00:00:50,690 --> 00:00:52,290
get a cursor, execute the query

22
00:00:52,290 --> 00:00:54,340
that will select all our books,

23
00:00:54,340 --> 00:00:56,690
commit, and close.

24
00:00:56,690 --> 00:00:59,010
I'd encourage you to give this a go now.

25
00:00:59,010 --> 00:01:01,810
Just implement as much as you know about this function

26
00:01:01,810 --> 00:01:03,010
and then we'll explain exactly

27
00:01:03,010 --> 00:01:05,470
what we're missing and how it works.

28
00:01:10,210 --> 00:01:11,320
I hope you got that.

29
00:01:11,320 --> 00:01:13,110
All we have to do is of course,

30
00:01:13,110 --> 00:01:14,970
first of all, open a connection.

31
00:01:18,090 --> 00:01:20,500
Make sure to use the same data file as before

32
00:01:20,500 --> 00:01:23,220
so that all of these connections go to the same file.

33
00:01:24,270 --> 00:01:25,370
Get a cursor.

34
00:01:27,960 --> 00:01:30,320
Then execute our query,

35
00:01:30,320 --> 00:01:34,770
which is going to be SELECT * FROM books.

36
00:01:34,770 --> 00:01:36,100
And that's going to give us the name,

37
00:01:36,100 --> 00:01:38,480
the author, and the read status.

38
00:01:40,440 --> 00:01:42,440
Then we can commit.

39
00:01:43,900 --> 00:01:47,420
But of course, we've not actually written anything

40
00:01:47,420 --> 00:01:50,330
into our database, we've just read something from it.

41
00:01:50,330 --> 00:01:53,160
So there's nothing to save to the disc.

42
00:01:53,160 --> 00:01:56,790
Therefore, we don't need to commit in this case.

43
00:01:57,950 --> 00:02:01,270
We can just go straight to connection.close.

44
00:02:02,670 --> 00:02:07,670
Now, we've not saved the output of this to any variable.

45
00:02:08,870 --> 00:02:10,170
So as soon as we close the connection,

46
00:02:10,170 --> 00:02:12,180
of course this is going to get lost;

47
00:02:12,180 --> 00:02:14,390
we're not going to have access to our books.

48
00:02:15,860 --> 00:02:18,120
And here is the exciting part

49
00:02:18,120 --> 00:02:19,730
or the interesting part about cursors.

50
00:02:19,730 --> 00:02:21,180
Remember what I explained about cursors,

51
00:02:21,180 --> 00:02:23,030
that they are a pointer.

52
00:02:23,030 --> 00:02:24,630
When you make a select statement that starts

53
00:02:24,630 --> 00:02:27,420
at the very top of your table and then moves over

54
00:02:27,420 --> 00:02:30,950
to the next row when you ask for the next row,

55
00:02:30,950 --> 00:02:32,310
and then goes over to the following one,

56
00:02:32,310 --> 00:02:35,230
and so forth, until you get to the end of the table.

57
00:02:35,230 --> 00:02:38,950
Well, now that we've executed a query with a select,

58
00:02:38,950 --> 00:02:42,350
the cursor is at the top of the results returned.

59
00:02:42,350 --> 00:02:46,470
And we want to go down one by one, all of the rows,

60
00:02:46,470 --> 00:02:48,840
until we reach the end of the table

61
00:02:48,840 --> 00:02:50,950
so that we get all of our rows back.

62
00:02:52,160 --> 00:02:54,610
The way we do that is we say, for example: books,

63
00:02:54,610 --> 00:02:57,220
which is now our variable of books,

64
00:02:57,220 --> 00:02:59,100
is cursor dot,

65
00:03:00,140 --> 00:03:05,140
and notice how there are a few fetch methods in here:

66
00:03:05,570 --> 00:03:07,430
You've got fetchall, and that's

67
00:03:07,430 --> 00:03:09,754
going to give you all of the rows;

68
00:03:09,754 --> 00:03:13,290
fetchmany, and that takes an argument here,

69
00:03:13,290 --> 00:03:15,630
which is how many rows you want to fetch;

70
00:03:15,630 --> 00:03:18,670
and fetchone, which gives you the top row

71
00:03:18,670 --> 00:03:22,000
of your table, of your results set only.

72
00:03:22,000 --> 00:03:24,040
So we're going to go for fetchall.

73
00:03:24,040 --> 00:03:26,110
And remember that our results are going to be

74
00:03:26,110 --> 00:03:29,300
the entire table because we've selected * FROM books

75
00:03:29,300 --> 00:03:31,110
which gives us all the columns,

76
00:03:31,110 --> 00:03:33,560
and we've not limited any number of rows...

77
00:03:33,560 --> 00:03:34,640
We don't know how to do that yet;

78
00:03:34,640 --> 00:03:36,240
we're gonna learn in a moment.

79
00:03:36,240 --> 00:03:38,690
So this is going to give us the entire table;

80
00:03:38,690 --> 00:03:42,290
cursor.fetchall is going to give us all of the rows.

81
00:03:42,290 --> 00:03:45,850
If you wanted just one book you could just fetchone,

82
00:03:45,850 --> 00:03:46,737
but that's just gonna give you

83
00:03:46,737 --> 00:03:48,910
the topmost book in your table.

84
00:03:50,750 --> 00:03:53,880
Now this, when you do fetchall,

85
00:03:53,880 --> 00:03:56,990
is going to give you essentially a list of tuples.

86
00:03:58,010 --> 00:04:01,890
Each tuple is going to have name, author, read status,

87
00:04:01,890 --> 00:04:06,200
and then name, author, read status, and so forth.

88
00:04:06,200 --> 00:04:09,640
So when you do fetchall, you essentially get this list here.

89
00:04:10,640 --> 00:04:15,298
So we can return that and then make our programme access

90
00:04:15,298 --> 00:04:19,050
the zeroth element of a tuple, the first element of a tuple,

91
00:04:19,050 --> 00:04:20,960
the second element of a tuple...

92
00:04:20,960 --> 00:04:25,573
Or we could convert these tuples that we're receiving...

93
00:04:25,573 --> 00:04:27,570
I'm just gonna bring them back actually.

94
00:04:27,570 --> 00:04:30,580
Convert these tuples we're receiving into dictionaries,

95
00:04:30,580 --> 00:04:32,170
so that the rest of our programme can

96
00:04:32,170 --> 00:04:34,790
still use them as it would normally.

97
00:04:34,790 --> 00:04:36,350
And I think this is the best thing to do,

98
00:04:36,350 --> 00:04:39,570
just make sure we are using consistent data structures.

99
00:04:40,600 --> 00:04:43,480
So again, what to do is fetch them all,

100
00:04:43,480 --> 00:04:47,021
but put this in a list comprehension.

101
00:04:47,021 --> 00:04:49,130
Then what we're going to do in this list comprehension

102
00:04:49,130 --> 00:04:51,880
is put in a dictionary of name,

103
00:04:51,880 --> 00:04:54,990
it's going to be row zero.

104
00:04:54,990 --> 00:04:57,790
Notice how that's gonna be the first element of the row.

105
00:04:59,020 --> 00:05:01,330
Author is going to be row one,

106
00:05:01,330 --> 00:05:04,030
and read is going to be row two.

107
00:05:04,030 --> 00:05:05,980
And I know that things are disappearing off the side

108
00:05:05,980 --> 00:05:10,020
of the screen, so let's just bring them back.

109
00:05:10,960 --> 00:05:12,600
I'm just going to delete this now.

110
00:05:14,430 --> 00:05:17,970
And now notice how we have a list comprehension

111
00:05:17,970 --> 00:05:20,960
that puts a dictionary as the first value here

112
00:05:20,960 --> 00:05:24,300
of our list comprehension into this new list,

113
00:05:24,300 --> 00:05:28,160
where row is each of the elements in cursor.fetchall.

114
00:05:29,092 --> 00:05:31,830
Notice that each of the elements is a tuple.

115
00:05:31,830 --> 00:05:33,920
So we access row zero as the name,

116
00:05:33,920 --> 00:05:35,170
row one as the author,

117
00:05:35,170 --> 00:05:37,930
and row two as the read status.

118
00:05:37,930 --> 00:05:40,030
Hopefully, this makes sense.

119
00:05:40,030 --> 00:05:43,740
As we do this we'll end with a list of dictionaries,

120
00:05:43,740 --> 00:05:46,880
where each dictionary represents our book.

121
00:05:46,880 --> 00:05:49,220
Then at the end, after we close the connection,

122
00:05:49,220 --> 00:05:51,430
we can return books.

123
00:05:51,430 --> 00:05:52,680
And that's the list here.

124
00:05:54,050 --> 00:05:57,760
Now our app.py which was using

125
00:05:57,760 --> 00:06:01,540
book name, book read, and book author,

126
00:06:01,540 --> 00:06:02,990
doesn't have to change at all

127
00:06:03,830 --> 00:06:08,830
because it's still using a dictionary in the background.

128
00:06:08,860 --> 00:06:11,580
Even though our database does not return dictionaries,

129
00:06:11,580 --> 00:06:14,260
the interface that we've designed here has kept

130
00:06:14,260 --> 00:06:17,190
things consistent so that our business logic,

131
00:06:17,190 --> 00:06:20,050
our app.py, doesn't have to change.

132
00:06:20,050 --> 00:06:21,900
And that's a really good thing to do.

133
00:06:23,420 --> 00:06:25,600
Now that we've selected all of the books

134
00:06:25,600 --> 00:06:27,860
we can go and look at the next thing

135
00:06:27,860 --> 00:06:30,400
which is filtering for specific books

136
00:06:30,400 --> 00:06:32,100
using the where statement.

137
00:06:32,100 --> 00:06:33,950
Let's look at that in the next video.

