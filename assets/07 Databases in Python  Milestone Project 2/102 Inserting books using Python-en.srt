1
00:00.160 --> 00:01.460
<v Instructor>Hi and welcome back.</v>

2
00:01.460 --> 00:03.030
In this video we're going to look

3
00:03.030 --> 00:05.707
at inserting a book into a database

4
00:05.707 --> 00:09.127
using our database interface here, database.py

5
00:09.127 --> 00:10.760
and using Sequel Lite.

6
00:11.730 --> 00:14.020
We've looked at creating a table before, now

7
00:14.020 --> 00:17.480
let's move on the add book function here.

8
00:17.480 --> 00:18.750
And the first thing to do of course

9
00:18.750 --> 00:21.280
is to set up the connection,

10
00:21.280 --> 00:23.710
including the cursor, committing and closing it.

11
00:23.710 --> 00:25.310
And I'm just going to copy this

12
00:25.310 --> 00:27.500
which you should not do, you should type this code.

13
00:27.500 --> 00:29.716
But I've typed this code many times already

14
00:29.716 --> 00:32.190
so I think I'll be okay.

15
00:33.540 --> 00:36.780
What we want to execute now is going to insert

16
00:36.780 --> 00:38.710
some data, that's the syntax.

17
00:38.710 --> 00:42.000
Insert into, insert into,

18
00:42.000 --> 00:44.910
then we have to specify the table we want to insert into

19
00:46.010 --> 00:49.320
and then the values that we want to insert.

20
00:49.320 --> 00:51.590
Notice now we've put some brackets

21
00:51.590 --> 00:54.120
and in these brackets, separated by commas

22
00:54.120 --> 00:56.470
go each of the columns in here.

23
00:57.730 --> 01:00.100
So we could do one of two things.

24
01:00.100 --> 01:02.780
The first one is make this into a NSString.

25
01:02.780 --> 01:04.810
And then inside quotation marks

26
01:04.810 --> 01:09.810
put the name, the author and zero

27
01:09.900 --> 01:11.220
'cause that's the red status,

28
01:11.220 --> 01:13.060
that means false to begin with.

29
01:14.320 --> 01:16.760
Notice how we've put these inside quotation marks,

30
01:16.760 --> 01:19.880
because this is what's gonna get sent to Sequel Lite

31
01:22.423 --> 01:24.720
and quotation marks are around these

32
01:24.720 --> 01:26.710
so that Sequel Lite knows they are strings.

33
01:26.710 --> 01:29.960
If we don't put them in, it will think this is

34
01:29.960 --> 01:33.110
a table name and it's going to get very confused

35
01:33.110 --> 01:33.943
'cause we're going to try to

36
01:33.943 --> 01:36.510
insert a table into another table,

37
01:36.510 --> 01:38.600
and it's doesn't like that of course.

38
01:38.600 --> 01:40.535
So make sure to put the strings in there

39
01:40.535 --> 01:42.535
so that it knows that these are strings.

40
01:43.780 --> 01:47.270
We can do this, let's run our app.py.

41
01:47.270 --> 01:49.600
No sorry, I had it running before.

42
01:49.600 --> 01:50.980
I'm going to run it again.

43
01:52.209 --> 01:55.167
And there you see what happens.

44
01:55.167 --> 01:57.020
We get a traceback.

45
01:58.030 --> 02:00.230
Now now do we analyse these tracebacks?

46
02:00.230 --> 02:02.513
Well we already know.

47
02:02.513 --> 02:04.730
This is a Sequel Lite operational error.

48
02:04.730 --> 02:05.690
That means something happened

49
02:05.690 --> 02:07.830
when we were trying to perform an operation.

50
02:07.830 --> 02:09.420
And it gives us a nice description,

51
02:09.420 --> 02:11.470
table, books already exists.

52
02:12.350 --> 02:14.181
We tried to create a table books

53
02:14.181 --> 02:16.920
but it was already existing.

54
02:16.920 --> 02:20.440
Let's close this and add another bit of syntax.

55
02:20.440 --> 02:24.620
You can CREATE TABLE IF NOT EXISTS.

56
02:24.620 --> 02:26.990
This is not terribly English like,

57
02:26.990 --> 02:28.600
but this will do the job.

58
02:28.600 --> 02:30.270
I will only create the table books

59
02:30.270 --> 02:32.050
if it doesn't already exist.

60
02:32.050 --> 02:33.920
And of course another option is to delete

61
02:33.920 --> 02:36.289
data.db entirely, and that will be fine.

62
02:36.289 --> 02:38.760
So I'm going to do that as well.

63
02:38.760 --> 02:41.700
Delete data.db, run the app.

64
02:41.700 --> 02:43.885
Now it works, you can stop it.

65
02:43.885 --> 02:46.330
You can run the app again,

66
02:46.330 --> 02:47.470
and you can see that it still works

67
02:47.470 --> 02:50.400
even though we've already got the database there.

68
02:50.400 --> 02:52.020
Let's add a new book.

69
02:52.020 --> 02:55.820
We can say Clean Code by Robert,

70
02:55.820 --> 02:57.640
and it seems to work.

71
02:57.640 --> 03:00.109
Of course if we try to list all the books

72
03:00.109 --> 03:02.440
it's going to go over to our json file

73
03:02.440 --> 03:04.540
so that's not too good.

74
03:04.540 --> 03:07.424
For now we can only add books.

75
03:07.424 --> 03:09.550
So as you can see, this works

76
03:09.550 --> 03:11.440
and we can add new books.

77
03:11.440 --> 03:13.870
We cannot list books, or you know, read books

78
03:13.870 --> 03:15.580
for anything like that.

79
03:15.580 --> 03:18.190
Let's stop the app, and I'll go back

80
03:18.190 --> 03:20.440
over to this execute statement.

81
03:21.700 --> 03:25.030
I said there were two ways of performing this execute.

82
03:25.030 --> 03:27.440
And that is the first one is using an f string,

83
03:27.440 --> 03:29.870
but this is not the recommended approach.

84
03:30.875 --> 03:33.330
And here's why this is not the recommended approach.

85
03:33.330 --> 03:36.310
I'll just you a quick piece of advice.

86
03:37.720 --> 03:42.720
Where going to put the contents of name into this string.

87
03:43.340 --> 03:45.590
And we're going to put the content of author

88
03:45.590 --> 03:46.990
into this string here.

89
03:47.990 --> 03:49.200
But what you didn't know,

90
03:49.200 --> 03:54.200
is that you can run multiple Sequel statements

91
03:54.360 --> 03:56.550
all together when you do an execute.

92
03:56.550 --> 04:01.550
So for example, let's say the author was this.

93
04:02.340 --> 04:05.840
Let's say the contents of author was this.

94
04:15.020 --> 04:16.800
Now I understand that you probably

95
04:16.800 --> 04:18.280
don't know what this means.

96
04:18.280 --> 04:23.150
But if we put this code right in where author is,

97
04:24.450 --> 04:28.180
what happens is that now we get two statements.

98
04:28.180 --> 04:31.500
This one that inserts a value into books

99
04:31.500 --> 04:34.890
with a name, an empty author and zero.

100
04:34.890 --> 04:37.800
A semi colon allows us to run another statement,

101
04:37.800 --> 04:41.300
and this statement deletes the books table entirely.

102
04:42.870 --> 04:44.240
And then we get some invalid syntax

103
04:44.240 --> 04:46.090
at the end that will probably throw and error.

104
04:46.090 --> 04:48.340
But none the less these two statements would have ran.

105
04:48.340 --> 04:50.197
You would have inserted some books

106
04:50.197 --> 04:52.480
and then you would have dropped the table.

107
04:52.480 --> 04:53.620
This is really dangerous

108
04:53.620 --> 04:57.010
because this is called a Sequel injection attack

109
04:57.010 --> 05:00.515
and your users can be nasty enough to try to do it.

110
05:00.515 --> 05:04.779
So if you have a direct replacement,

111
05:04.779 --> 05:06.970
this is called the string interpolation.

112
05:06.970 --> 05:10.630
If you have a direct replacement of a string into your query

113
05:10.630 --> 05:14.330
it potentially opens up this path of attack.

114
05:14.330 --> 05:15.240
So don't do this.

115
05:15.240 --> 05:17.550
Instead what you want to do

116
05:17.550 --> 05:21.210
is remove everything and put a question mark.

117
05:21.210 --> 05:23.440
Remove everything and put a question mark.

118
05:23.440 --> 05:25.900
You can leave the zero there if you want.

119
05:25.900 --> 05:28.570
Then put a comma after the string,

120
05:28.570 --> 05:32.920
and inside a tuple, type name and author.

121
05:32.920 --> 05:35.060
Make sure that this is a tuple,

122
05:35.060 --> 05:37.650
and then Sequel Lite is going to,

123
05:37.650 --> 05:41.420
Sequel Lite three is going to put this is in there,

124
05:41.420 --> 05:43.060
this one in there safely.

125
05:43.060 --> 05:47.510
So if they are a Sequel injection attack, you'll be safe.

126
05:47.510 --> 05:48.570
So this is what to do.

127
05:48.570 --> 05:51.220
Let's run the app again, we're going to add

128
05:51.220 --> 05:56.220
another one, Test Driven Development by Ken Beck.

129
05:56.630 --> 05:58.970
And you can see that this all works as well,

130
05:58.970 --> 06:01.190
and it is a better way of doing things.

131
06:01.190 --> 06:02.450
It's more secure.

132
06:02.450 --> 06:04.740
Sequel injection attack, really popular.

133
06:04.740 --> 06:07.240
Don't open yourself up to it in your applications.

134
06:07.240 --> 06:09.670
And the way to that is do this,

135
06:09.670 --> 06:13.400
do not use f strings or direct string formatting

136
06:13.400 --> 06:15.730
on your queries because that's not safe.

137
06:16.700 --> 06:17.730
Okay that's it for this video.

138
06:17.730 --> 06:20.870
We've looked at inserting values into our database.

139
06:20.870 --> 06:22.220
Let's move onto the next one.

140
06:22.220 --> 06:23.170
I'll see you there.