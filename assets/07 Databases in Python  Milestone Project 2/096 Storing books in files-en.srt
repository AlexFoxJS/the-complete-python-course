1
00:00:00,230 --> 00:00:01,480
<v Jose>Hi, and welcome back.</v>

2
00:00:01,480 --> 00:00:03,940
In this video, we'll be turning our project which used

3
00:00:03,940 --> 00:00:08,030
an in-memory database into one using files for storage.

4
00:00:10,170 --> 00:00:12,440
What we've got here is our database,

5
00:00:12,440 --> 00:00:13,730
which is a list.

6
00:00:13,730 --> 00:00:16,660
So the first thing to do is to start transitioning

7
00:00:16,660 --> 00:00:19,890
our database.py file from using this list

8
00:00:19,890 --> 00:00:22,240
to store things into using a file.

9
00:00:23,740 --> 00:00:26,070
This is the reason why I've structured the code

10
00:00:26,070 --> 00:00:28,070
the way that I've structured it for you.

11
00:00:28,940 --> 00:00:31,880
Now, if we want to add a book, we already know

12
00:00:31,880 --> 00:00:34,960
how to add a new line to a database, or if we don't,

13
00:00:34,960 --> 00:00:36,560
we're gonna learn in this video.

14
00:00:37,630 --> 00:00:41,030
We already know how to read a file and get all its contents.

15
00:00:41,030 --> 00:00:44,620
We already know how to save into a file.

16
00:00:44,620 --> 00:00:47,240
We already know how to read a file and delete something

17
00:00:47,240 --> 00:00:48,390
and then save it again.

18
00:00:50,150 --> 00:00:55,150
So, this database.py here is what's called an interface

19
00:00:56,190 --> 00:01:00,350
in programming, an interface between our business logic,

20
00:01:00,350 --> 00:01:02,810
what a programme is supposed to do,

21
00:01:02,810 --> 00:01:05,130
and the storage, which in this case,

22
00:01:05,130 --> 00:01:07,790
will be a database, sorry, a file.

23
00:01:07,790 --> 00:01:10,650
And we're going to move onto a database soon.

24
00:01:10,650 --> 00:01:13,440
So if we wanted to add a book,

25
00:01:13,440 --> 00:01:16,360
that would be very straightforward.

26
00:01:16,360 --> 00:01:19,490
All we have to do is, well, first of all,

27
00:01:19,490 --> 00:01:21,630
before we actually start writing any code

28
00:01:21,630 --> 00:01:23,690
is change this to a .csv file

29
00:01:24,890 --> 00:01:27,420
and decide on the format of the .csv file,

30
00:01:28,680 --> 00:01:33,430
which I think should be name, author, read, like so.

31
00:01:34,590 --> 00:01:36,720
Now that that's clear, we have decided

32
00:01:36,720 --> 00:01:39,370
that we're going to store name, then author, then read,

33
00:01:39,370 --> 00:01:42,960
separated by commas, we can continue.

34
00:01:42,960 --> 00:01:46,110
Notice that it could be beneficial to separate it by hashes

35
00:01:46,110 --> 00:01:50,420
instead, because the titles may have commas in them.

36
00:01:50,420 --> 00:01:52,110
But for now, we're not going to worry about that.

37
00:01:52,110 --> 00:01:54,460
You can make that change later on, if you want.

38
00:01:55,680 --> 00:02:00,180
So to add a book, all we have to do is say

39
00:02:00,180 --> 00:02:05,180
with open('books.txt') in read mode as file,

40
00:02:07,630 --> 00:02:12,070
and here, sorry, write mode as file, and here,

41
00:02:12,070 --> 00:02:15,660
what we're going to do is add a new book at the end.

42
00:02:15,660 --> 00:02:17,710
I'm just going to delete this thing here.

43
00:02:19,090 --> 00:02:21,790
However, I mentioned earlier on when we started looking

44
00:02:21,790 --> 00:02:25,540
at files that write mode would erase all contents

45
00:02:25,540 --> 00:02:27,990
of the file and then you will be able

46
00:02:27,990 --> 00:02:31,020
to start writing from the very top of the file.

47
00:02:31,020 --> 00:02:33,720
We don't want to do this because our add_book

48
00:02:33,720 --> 00:02:37,030
should add a new book, probably at the end of the file.

49
00:02:37,030 --> 00:02:38,560
We do want to keep the other books

50
00:02:38,560 --> 00:02:39,810
that are already in the file.

51
00:02:39,810 --> 00:02:40,970
Otherwise, we'll only ever be able

52
00:02:40,970 --> 00:02:43,000
to have one book at a time.

53
00:02:43,000 --> 00:02:45,700
Instead of w mode, we can use a mode,

54
00:02:45,700 --> 00:02:47,370
which stands for append.

55
00:02:47,370 --> 00:02:49,570
So anything we write will automatically go

56
00:02:49,570 --> 00:02:51,100
to the very end of the file.

57
00:02:52,930 --> 00:02:55,410
Because our file is going to have this structure

58
00:02:55,410 --> 00:02:58,360
and then it's going to have a \n at the end,

59
00:02:58,360 --> 00:03:01,000
anything we write is always going to be

60
00:03:01,000 --> 00:03:03,000
at the very bottom of the file.

61
00:03:03,000 --> 00:03:03,880
Here's why.

62
00:03:03,880 --> 00:03:05,380
We're going to add a book,

63
00:03:05,380 --> 00:03:06,690
and that's going to be in this format,

64
00:03:06,690 --> 00:03:08,540
name, author, read, new line.

65
00:03:09,670 --> 00:03:10,990
Then we'll add another one,

66
00:03:10,990 --> 00:03:14,620
and because there's a new line, it will go on the next line.

67
00:03:15,960 --> 00:03:17,360
Then when we add another one,

68
00:03:17,360 --> 00:03:19,720
it'll go on the next line, and so forth.

69
00:03:19,720 --> 00:03:22,000
So it's important that we include that new line there,

70
00:03:22,000 --> 00:03:23,770
because append mode will just go

71
00:03:23,770 --> 00:03:26,470
to the very end of the file, the very last character,

72
00:03:26,470 --> 00:03:27,720
which will be a new line.

73
00:03:30,150 --> 00:03:33,080
So all we have to do is file.write,

74
00:03:34,230 --> 00:03:38,180
name, author,

75
00:03:39,950 --> 00:03:40,980
and then we have to decide

76
00:03:40,980 --> 00:03:43,390
on how we're going to store false values.

77
00:03:44,610 --> 00:03:47,230
Because the text file that we're going to be using

78
00:03:47,230 --> 00:03:52,230
is not a Python file, maybe false doesn't make much sense,

79
00:03:52,310 --> 00:03:53,340
although it could.

80
00:03:53,340 --> 00:03:54,580
It's up to you.

81
00:03:54,580 --> 00:03:56,850
But I'm going to store it as a 0.

82
00:03:56,850 --> 00:03:59,410
0 for false, 1 for true.

83
00:03:59,410 --> 00:04:00,760
It's up to you what you do.

84
00:04:02,206 --> 00:04:05,100
And this is how we would add the new book to books.txt.

85
00:04:06,410 --> 00:04:09,250
Notice though we've still got our books variable up here.

86
00:04:09,250 --> 00:04:11,210
We don't need that, so I'm going to rename it

87
00:04:11,210 --> 00:04:16,010
into books_file, and this is going to be books.txt,

88
00:04:16,010 --> 00:04:18,370
and this is going to be books_file.

89
00:04:18,370 --> 00:04:21,810
That way, we're storing the filename up here.

90
00:04:21,810 --> 00:04:23,410
That's essentially our database.

91
00:04:26,382 --> 00:04:29,050
To get_all_books is going to be slightly more challenging.

92
00:04:29,050 --> 00:04:30,210
Once again, I'm going to go here

93
00:04:30,210 --> 00:04:33,340
and have a couple of lines of name, author, read,

94
00:04:33,340 --> 00:04:36,360
just so it's a bit clearer what we're doing.

95
00:04:36,360 --> 00:04:37,690
And the first thing we want to do

96
00:04:37,690 --> 00:04:39,600
is of course open the file.

97
00:04:39,600 --> 00:04:40,800
You know how to do this,

98
00:04:42,120 --> 00:04:45,470
with open(books_file) in read mode as file.

99
00:04:45,470 --> 00:04:47,930
And now we want to get all the lines.

100
00:04:47,930 --> 00:04:51,200
But we want to get the lines without the white space.

101
00:04:51,200 --> 00:04:54,240
Hope you remember how to do this exactly,

102
00:04:54,240 --> 00:04:56,180
using the strip method.

103
00:04:59,600 --> 00:05:02,690
We're going to say lines = [line.strip()

104
00:05:03,770 --> 00:05:07,240
for line in_file.readlines()].

105
00:05:07,240 --> 00:05:10,760
That's gonna read all the lines, including the \n's,

106
00:05:10,760 --> 00:05:14,930
and it's going to give us each one in a list,

107
00:05:14,930 --> 00:05:16,350
in an element of the list,

108
00:05:16,350 --> 00:05:17,840
and for each of the elements,

109
00:05:17,840 --> 00:05:19,870
we're going to strip the white space,

110
00:05:19,870 --> 00:05:22,620
which is going to remove this here.

111
00:05:24,550 --> 00:05:26,620
So now we're going to have this

112
00:05:26,620 --> 00:05:29,930
as our contents of this list here.

113
00:05:31,380 --> 00:05:36,380
Now, we can also chain to it a split

114
00:05:37,460 --> 00:05:42,460
so that we will get one list of lists.

115
00:05:45,180 --> 00:05:48,040
Indeed, now our list will have this format,

116
00:05:55,760 --> 00:05:57,250
like so.

117
00:05:57,250 --> 00:05:59,580
So we'll have one list, and inside it,

118
00:05:59,580 --> 00:06:02,840
we'll have sublists, where each one

119
00:06:02,840 --> 00:06:05,380
is going to be a list of name, author, read.

120
00:06:09,790 --> 00:06:10,623
Now what we're going to do

121
00:06:10,623 --> 00:06:13,440
is we're going to construct our book dictionaries.

122
00:06:15,700 --> 00:06:18,360
So this is going to be another list comprehension.

123
00:06:19,710 --> 00:06:21,020
In the list, and notice, by the way,

124
00:06:21,020 --> 00:06:22,810
you can put list comprehensions in multiple lines.

125
00:06:22,810 --> 00:06:24,430
It's totally cool, totally fine.

126
00:06:26,210 --> 00:06:27,180
Line 0.

127
00:06:28,220 --> 00:06:30,420
Author is gonna be line one,

128
00:06:30,420 --> 00:06:32,560
and read is going to be line two.

129
00:06:33,790 --> 00:06:35,130
Of course, line doesn't exist.

130
00:06:35,130 --> 00:06:38,010
So we're going to do for line in lines,

131
00:06:38,010 --> 00:06:39,060
and there we have it.

132
00:06:39,950 --> 00:06:42,800
Remember that each line, or rather,

133
00:06:42,800 --> 00:06:45,440
the whole lines list has this format,

134
00:06:45,440 --> 00:06:47,380
name, author, and read,

135
00:06:48,670 --> 00:06:51,750
name, author, read,

136
00:06:51,750 --> 00:06:55,890
so for line in lines is giving us one of these lists.

137
00:06:55,890 --> 00:06:58,170
And then we're saying that name is the zeroth element

138
00:06:58,170 --> 00:07:00,300
of this sublist, which is the name.

139
00:07:00,300 --> 00:07:02,140
Author is the first element of this sublist,

140
00:07:02,140 --> 00:07:03,290
which is the author.

141
00:07:03,290 --> 00:07:05,730
Read is the third element of this sublist,

142
00:07:05,730 --> 00:07:08,380
which is the read status there.

143
00:07:10,260 --> 00:07:13,300
Then we can return books, or indeed, if you want

144
00:07:13,300 --> 00:07:16,490
to save some space, because this variable here is,

145
00:07:19,320 --> 00:07:22,640
is pretty redundant, we can just say return

146
00:07:23,780 --> 00:07:24,940
this list comprehension.

147
00:07:24,940 --> 00:07:26,930
That's gonna execute the list comprehension first

148
00:07:26,930 --> 00:07:27,880
and then return it.

149
00:07:32,170 --> 00:07:35,470
Okay, we've got get_all_books and the add_book.

150
00:07:35,470 --> 00:07:39,140
Now we can move onto marking a book as read.

151
00:07:39,140 --> 00:07:41,430
This is not so easy,

152
00:07:41,430 --> 00:07:44,190
because although it's possible to go into the file

153
00:07:44,190 --> 00:07:47,260
and modify it, it's actually much easier

154
00:07:47,260 --> 00:07:51,890
to read the file in, modify the book that we want,

155
00:07:51,890 --> 00:07:54,760
and then save them all to the file again.

156
00:07:54,760 --> 00:07:56,900
That's, that's actually much easier.

157
00:07:56,900 --> 00:07:59,110
So we're gonna go for that in this video.

158
00:08:00,350 --> 00:08:01,700
The first thing to do is of course

159
00:08:01,700 --> 00:08:04,440
to say books = get_all_books().

160
00:08:06,890 --> 00:08:07,723
Okay.

161
00:08:12,280 --> 00:08:14,310
For some reason, it keeps saying, oh, yeah,

162
00:08:14,310 --> 00:08:16,100
this thing here.

163
00:08:16,100 --> 00:08:18,200
It kept saying that this shadows on the outer variable,

164
00:08:18,200 --> 00:08:20,440
but I was pretty sure we deleted it.

165
00:08:20,440 --> 00:08:22,120
So I was wondering what the hell that was.

166
00:08:22,120 --> 00:08:24,600
But of course the global books there was creating it again.

167
00:08:24,600 --> 00:08:26,270
So we don't wanna do that.

168
00:08:26,270 --> 00:08:27,960
Anyway, marking book as read.

169
00:08:27,960 --> 00:08:30,120
The first thing we wanna do is get all the books.

170
00:08:31,100 --> 00:08:32,810
Then we wanna iterate over them,

171
00:08:35,320 --> 00:08:37,860
and well, in fact, we already have it here.

172
00:08:37,860 --> 00:08:40,010
For book in books, if the book's name is equal

173
00:08:40,010 --> 00:08:41,340
to the name that we passed in,

174
00:08:41,340 --> 00:08:44,720
we're gonna set it to read, except now instead of true,

175
00:08:44,720 --> 00:08:47,720
it's going to be 1, because 1 means true

176
00:08:47,720 --> 00:08:49,600
and 0 means false in our file.

177
00:08:50,630 --> 00:08:53,770
And then at the end, we have to save all of the books

178
00:08:53,770 --> 00:08:56,200
that we've retrieved back into the database,

179
00:08:56,200 --> 00:08:59,880
and one of them will have changed from zero to one.

180
00:09:01,030 --> 00:09:02,939
So for that, I'm going to create another function

181
00:09:02,939 --> 00:09:06,110
that I'm going to call _save_all_books,

182
00:09:06,110 --> 00:09:08,060
and I'm going to pass it the books that we read,

183
00:09:08,060 --> 00:09:09,010
the books variable.

184
00:09:09,920 --> 00:09:12,470
This function doesn't exist, so we shall create it.

185
00:09:15,380 --> 00:09:18,570
The reason why I'm calling it _save_all_books

186
00:09:18,570 --> 00:09:21,380
is because in Python, this tells other developers

187
00:09:21,380 --> 00:09:24,190
that they should not call this function.

188
00:09:24,190 --> 00:09:28,030
You should only call this function from within this file.

189
00:09:28,030 --> 00:09:31,712
This is normally known as a private function

190
00:09:31,712 --> 00:09:34,070
in most programming languages.

191
00:09:34,070 --> 00:09:36,580
Python doesn't have the concept of a private function,

192
00:09:36,580 --> 00:09:38,170
so other people from outside the file

193
00:09:38,170 --> 00:09:40,500
can still call this function if they want,

194
00:09:40,500 --> 00:09:42,560
but the naming convention in Python says that

195
00:09:42,560 --> 00:09:44,670
if a function has an underscore in front,

196
00:09:44,670 --> 00:09:46,270
you should probably not call it.

197
00:09:47,740 --> 00:09:49,700
So, that's what we're doing here, just calling it

198
00:09:49,700 --> 00:09:51,550
with an underscore first, or naming it

199
00:09:51,550 --> 00:09:53,840
with an underscore first, so that other people know

200
00:09:53,840 --> 00:09:56,270
that this is a function that they probably shouldn't use.

201
00:09:56,270 --> 00:09:58,996
They should only use delete_book, mark_book_as_read,

202
00:09:58,996 --> 00:10:01,250
get_all_books, and add_book.

203
00:10:02,410 --> 00:10:04,890
So, in order to save all the books, well,

204
00:10:04,890 --> 00:10:09,360
we just have to open the file and in write mode, this time,

205
00:10:09,360 --> 00:10:10,860
and we're going to delete the entire file

206
00:10:10,860 --> 00:10:11,900
and rewrite it,

207
00:10:15,514 --> 00:10:18,264
and we're gonna go through each book and say file.write

208
00:10:20,220 --> 00:10:25,220
(f"{book['name']},{book['author']},

209
00:10:27,127 --> 00:10:30,150
and {book['read']}").

210
00:10:30,150 --> 00:10:32,600
And at the end, make sure to put the \n.

211
00:10:32,600 --> 00:10:34,910
That's pretty important as well.

212
00:10:34,910 --> 00:10:37,310
And actually, I think we forgot to put it up here,

213
00:10:37,310 --> 00:10:40,790
so make sure to file.write, \n in there as well.

214
00:10:40,790 --> 00:10:42,090
That's important.

215
00:10:42,090 --> 00:10:43,490
I did say earlier it was really important,

216
00:10:43,490 --> 00:10:44,670
and then I forgot.

217
00:10:44,670 --> 00:10:45,503
There you have it.

218
00:10:45,503 --> 00:10:47,930
So now what we're doing in this function is opening

219
00:10:47,930 --> 00:10:50,920
the file, deleting all its contents with the write mode,

220
00:10:50,920 --> 00:10:52,480
and then just going through all of the books

221
00:10:52,480 --> 00:10:55,390
in the list that we've got as a parameter

222
00:10:55,390 --> 00:10:59,030
and for each book, writing out its details in .csv format,

223
00:10:59,030 --> 00:11:00,150
and then new line at the end.

224
00:11:00,150 --> 00:11:02,850
So it's just going to rewrite our entire file.

225
00:11:02,850 --> 00:11:04,560
Not the most efficient thing to be doing,

226
00:11:04,560 --> 00:11:05,830
I'll be honest with you,

227
00:11:05,830 --> 00:11:08,580
but it's much easier than going and modifying the file.

228
00:11:11,370 --> 00:11:15,550
Okay, so now this _save_all_books function does exist,

229
00:11:15,550 --> 00:11:17,500
so we're safe to use it there.

230
00:11:17,500 --> 00:11:18,840
And again, what we've done in this function

231
00:11:18,840 --> 00:11:20,810
is read all the books, gone through them

232
00:11:20,810 --> 00:11:24,560
and modified the one we want, and then saved them all back.

233
00:11:25,440 --> 00:11:27,230
And that is essentially the same thing we're going to do

234
00:11:27,230 --> 00:11:29,050
for deleting a book.

235
00:11:29,050 --> 00:11:31,360
I would encourage you to, now that I've implemented

236
00:11:31,360 --> 00:11:33,150
these two functions, go and implement

237
00:11:33,150 --> 00:11:35,690
the delete_book function on your own.

238
00:11:35,690 --> 00:11:38,050
Once again, read all the books,

239
00:11:38,050 --> 00:11:41,220
recreate the list without the book that you wanna delete,

240
00:11:41,220 --> 00:11:43,350
and then save them all back.

241
00:11:43,350 --> 00:11:44,183
Let's try that.

242
00:11:49,080 --> 00:11:50,100
I hope you managed.

243
00:11:50,100 --> 00:11:54,030
What I would do is once again say books = get_all_books.

244
00:11:54,030 --> 00:11:55,930
Now I'm going to say that books is actually

245
00:11:55,930 --> 00:11:58,840
book for book in books if the book's name

246
00:11:59,770 --> 00:12:02,830
is not equal to the name we got as a parameter,

247
00:12:02,830 --> 00:12:05,500
and finally, _save_all_books(books).

248
00:12:07,870 --> 00:12:09,510
Notice how the function call here,

249
00:12:09,510 --> 00:12:11,850
this function is above this function,

250
00:12:11,850 --> 00:12:14,960
and I did say previously that you'd want functions

251
00:12:14,960 --> 00:12:17,240
to be defined in the order in which they're used.

252
00:12:17,240 --> 00:12:21,170
This is fine, because this function was actually used above.

253
00:12:21,170 --> 00:12:23,340
So, I think this is okay.

254
00:12:24,290 --> 00:12:26,470
Again, we're using the list comprehension

255
00:12:26,470 --> 00:12:30,810
to iterate over our books and then only put the book

256
00:12:30,810 --> 00:12:34,920
into a new list if the book's name matches,

257
00:12:34,920 --> 00:12:35,890
sorry, doesn't match.

258
00:12:35,890 --> 00:12:37,130
So we're putting in all the books

259
00:12:37,130 --> 00:12:39,380
except the one that is here.

260
00:12:41,210 --> 00:12:42,160
And that's it.

261
00:12:42,160 --> 00:12:45,316
We now have our delete_book, mark_book_as_read,

262
00:12:45,316 --> 00:12:47,170
get_all_books, and add_book functions.

263
00:12:47,170 --> 00:12:50,340
They are still the same functions as before.

264
00:12:50,340 --> 00:12:51,810
The names are the same.

265
00:12:51,810 --> 00:12:54,880
All they're doing now is they are storing things

266
00:12:54,880 --> 00:12:57,640
into a file instead of into a list.

267
00:12:57,640 --> 00:12:59,790
So if we go over to app.py,

268
00:13:02,550 --> 00:13:04,830
we actually don't have to change anything,

269
00:13:04,830 --> 00:13:08,700
because database.add_book doesn't know whether this

270
00:13:08,700 --> 00:13:11,990
is going into a list or a file, and it doesn't care.

271
00:13:11,990 --> 00:13:14,740
All it knows is that the book is being added.

272
00:13:14,740 --> 00:13:17,290
Here in list_books, database.get_all_books will get

273
00:13:18,382 --> 00:13:21,390
the books, and you don't care what it's getting them from.

274
00:13:21,390 --> 00:13:25,730
So, we have very well decoupled our business logic,

275
00:13:25,730 --> 00:13:28,250
our app, from our database.

276
00:13:28,250 --> 00:13:31,990
We've not done a perfect job because the book read status

277
00:13:31,990 --> 00:13:35,900
is now going to be, sorry, YES

278
00:13:35,900 --> 00:13:40,900
if the book is exactly equal to one; otherwise, no.

279
00:13:42,900 --> 00:13:44,430
So now instead of being true or false,

280
00:13:44,430 --> 00:13:47,920
it's one or zero, so that's the only thing there.

281
00:13:49,840 --> 00:13:51,900
Okay, other than that, prompt_read_book is gonna

282
00:13:51,900 --> 00:13:54,630
get the name and then mark it as read, and you know

283
00:13:54,630 --> 00:13:56,710
that in the background, the database is going to the file,

284
00:13:56,710 --> 00:13:58,300
opening it, looking through all the books,

285
00:13:58,300 --> 00:14:00,740
marking one is read, saving them back,

286
00:14:00,740 --> 00:14:02,420
but your app doesn't care.

287
00:14:03,260 --> 00:14:05,850
So what we've created here is a nice interface

288
00:14:05,850 --> 00:14:09,970
between our app and our data storage mechanism

289
00:14:09,970 --> 00:14:14,970
that very nicely hides all the complexity inside this file.

290
00:14:15,800 --> 00:14:17,530
And this is, as I said earlier, normally called

291
00:14:17,530 --> 00:14:21,640
an interface, and the interface here is to our database,

292
00:14:21,640 --> 00:14:25,360
and the contents of the interface are these four functions,

293
00:14:25,360 --> 00:14:28,303
the add_book, get_all_books, mark_book_as_read,

294
00:14:28,303 --> 00:14:30,290
and delete_book.

295
00:14:30,290 --> 00:14:33,110
And normally, we've been talking about user interfaces,

296
00:14:33,110 --> 00:14:37,010
because users have been interacting with the menu

297
00:14:37,010 --> 00:14:42,010
that we've given them, but this database is an API,

298
00:14:42,340 --> 00:14:43,900
it's an application programming interface.

299
00:14:43,900 --> 00:14:47,220
We've created an interface so that this part

300
00:14:47,220 --> 00:14:49,440
of the programme, app.py, can interact

301
00:14:49,440 --> 00:14:52,430
with another part of the programme, the database,

302
00:14:52,430 --> 00:14:54,540
via the interface that we've defined,

303
00:14:54,540 --> 00:14:56,467
prompt_add_book, list_books, prompt_read_book,

304
00:14:56,467 --> 00:14:58,360
and prompt_delete_book.

305
00:14:58,360 --> 00:15:01,180
So if you think of app.py as a user,

306
00:15:01,180 --> 00:15:03,900
these are the options that it can use

307
00:15:03,900 --> 00:15:05,700
to interact with the database.

308
00:15:05,700 --> 00:15:08,840
And it doesn't care what the implementation is,

309
00:15:08,840 --> 00:15:12,080
whether it's a list or whether it's a file.

310
00:15:12,080 --> 00:15:15,770
And indeed, as we move forward into databases,

311
00:15:15,770 --> 00:15:18,110
as a SQL database, as a relational database,

312
00:15:18,110 --> 00:15:19,710
it won't care either about that.

313
00:15:20,550 --> 00:15:22,980
Let's run this app and try it out.

314
00:15:24,600 --> 00:15:25,940
And by the way, I'm just going to stop there,

315
00:15:25,940 --> 00:15:27,530
and this is annoying me a little bit.

316
00:15:27,530 --> 00:15:29,230
We are going to add a space there.

317
00:15:30,120 --> 00:15:31,696
Okay, let's run it.

318
00:15:31,696 --> 00:15:32,860
I'm gonna add the new book.

319
00:15:32,860 --> 00:15:36,990
We're gonna enter Clean Code by Robert,

320
00:15:36,990 --> 00:15:39,100
and as you can see, no errors.

321
00:15:39,100 --> 00:15:40,650
We're gonna list all the books,

322
00:15:41,500 --> 00:15:43,110
and we see Clean Code by Robert.

323
00:15:44,090 --> 00:15:47,550
We can make a book as read, and that'll be Clean Code.

324
00:15:47,550 --> 00:15:50,470
Then we can list them again, and now it appears as red.

325
00:15:50,470 --> 00:15:54,740
We can delete a book, and we can list them again,

326
00:15:54,740 --> 00:15:56,720
and nothing appears there.

327
00:15:56,720 --> 00:16:00,160
And notice how books.txt has not appeared in PyCharm yet.

328
00:16:01,100 --> 00:16:02,740
The file does exist.

329
00:16:02,740 --> 00:16:07,170
If you go on your Finder or on your Windows Explorer programme

330
00:16:07,170 --> 00:16:09,650
into the directory in which this project is,

331
00:16:09,650 --> 00:16:11,320
you will see the file is there, but PyCharm doesn't quite

332
00:16:11,320 --> 00:16:13,930
update that quickly, so it's not showing it there.

333
00:16:15,820 --> 00:16:18,050
Okay, let's exit that programme.

334
00:16:18,050 --> 00:16:19,570
Notice how now the file does appear.

335
00:16:19,570 --> 00:16:21,040
And let's delete the file.

336
00:16:23,720 --> 00:16:28,160
Now, let's run the app again, and now, I'm gonna read books.

337
00:16:28,160 --> 00:16:31,150
What do you think's gonna happen when I press Enter?

338
00:16:37,510 --> 00:16:38,470
Well, let's see.

339
00:16:40,030 --> 00:16:42,180
Whoops, probably not what we wanted.

340
00:16:42,180 --> 00:16:44,670
We probably wanted either nothing to print out,

341
00:16:44,670 --> 00:16:46,980
or even nicer would be some sort of message saying,

342
00:16:46,980 --> 00:16:48,450
you don't have any books.

343
00:16:48,450 --> 00:16:50,930
But instead, we got a FileNotFoundError:

344
00:16:50,930 --> 00:16:53,310
No such file or directory: 'books.txt.'

345
00:16:54,410 --> 00:16:56,970
And the reason for that, I'm just gonna hide this away,

346
00:16:56,970 --> 00:17:01,970
the reason for that is because when we add a new book,

347
00:17:03,120 --> 00:17:04,900
or indeed, when we save_all_books,

348
00:17:04,900 --> 00:17:09,330
we're using a constructive method of file opening.

349
00:17:09,330 --> 00:17:11,490
So we are creating the file here

350
00:17:11,490 --> 00:17:14,890
or we are creating the file here if it doesn't exist.

351
00:17:14,890 --> 00:17:18,110
But the read method is not constructive.

352
00:17:18,110 --> 00:17:21,080
It is more passive, and it doesn't create the file.

353
00:17:21,080 --> 00:17:23,330
If it doesn't exist, indeed, it gives you an error

354
00:17:23,330 --> 00:17:24,680
and it says file not found.

355
00:17:25,550 --> 00:17:28,070
So what we wanna do is make sure the file exists,

356
00:17:28,070 --> 00:17:31,650
before we go and read it.

357
00:17:31,650 --> 00:17:34,590
And for that, I'm going to create one last function

358
00:17:34,590 --> 00:17:37,640
here in our database interface,

359
00:17:37,640 --> 00:17:42,640
and that's going to be here, create_book_table.

360
00:17:43,676 --> 00:17:46,320
And I'm consciously calling it table, even though it's

361
00:17:46,320 --> 00:17:50,830
a file, because this is called database, not called files.

362
00:17:50,830 --> 00:17:53,400
And as we migrate over into the database,

363
00:17:53,400 --> 00:17:54,480
this is going to be responsible

364
00:17:54,480 --> 00:17:57,520
for creating the table that is going to store the books.

365
00:17:57,520 --> 00:17:59,090
If you don't know what I'm talking about, don't worry.

366
00:17:59,090 --> 00:18:00,760
We are gonna get there very soon.

367
00:18:02,100 --> 00:18:05,940
So, all to do here is open it in write mode.

368
00:18:05,940 --> 00:18:07,910
And you don't have to do anything with it.

369
00:18:07,910 --> 00:18:09,630
It's going to close automatically when you exit

370
00:18:09,630 --> 00:18:12,450
the context manager, so you don't have to worry

371
00:18:12,450 --> 00:18:14,810
about anything, and indeed, as file is optional,

372
00:18:14,810 --> 00:18:16,530
so you don't need it either, 'cause you're not

373
00:18:16,530 --> 00:18:18,760
going to use the variable for anything.

374
00:18:18,760 --> 00:18:23,590
And again, this is just to make sure that the file is there.

375
00:18:25,120 --> 00:18:28,240
Okay, now we can rerun the app, list our books.

376
00:18:30,970 --> 00:18:32,440
Oh, of course, my bad.

377
00:18:32,440 --> 00:18:33,850
We created the method here,

378
00:18:33,850 --> 00:18:35,320
the function in the interface,

379
00:18:35,320 --> 00:18:37,000
but we didn't actually call it.

380
00:18:37,000 --> 00:18:39,530
So at the top of the menu, before we ask the user

381
00:18:39,530 --> 00:18:44,420
for their input, just type database.create.book_table(),

382
00:18:44,420 --> 00:18:46,490
and that'll be all you need to do.

383
00:18:46,490 --> 00:18:49,430
Now we can list books and we don't get anything back.

384
00:18:50,390 --> 00:18:53,530
Feel free of course to continue developing this programme,

385
00:18:53,530 --> 00:18:55,020
and I just stopped it, and when you stop it,

386
00:18:55,020 --> 00:18:56,650
you get a nice error there as well.

387
00:18:56,650 --> 00:18:58,580
Feel free to add some more stuff to your programme.

388
00:18:58,580 --> 00:19:00,000
What if there are no books?

389
00:19:00,000 --> 00:19:01,250
Print something else out.

390
00:19:02,580 --> 00:19:06,380
You know, add some more data to the book store.

391
00:19:06,380 --> 00:19:07,980
You do whatever you wanna do.

392
00:19:07,980 --> 00:19:10,210
This is your programme now, so congratulations

393
00:19:10,210 --> 00:19:12,270
on finishing this segment.

394
00:19:13,140 --> 00:19:16,800
As we move on, we're going to look at how to store

395
00:19:16,800 --> 00:19:19,700
this data as JSON, and if you're interested in that,

396
00:19:19,700 --> 00:19:21,150
just look at the next video.

397
00:19:21,150 --> 00:19:23,640
If you're not really keen on storing things in database,

398
00:19:23,640 --> 00:19:26,880
in files any longer, feel free to skip the next video.

399
00:19:26,880 --> 00:19:29,550
Move onto the very following one, where we're gonna

400
00:19:29,550 --> 00:19:32,630
look at, we're gonna start looking at databases.

401
00:19:32,630 --> 00:19:34,250
So I'll see you either in the next video

402
00:19:34,250 --> 00:19:35,440
or in the one after that.

403
00:19:35,440 --> 00:19:36,710
See you soon.

