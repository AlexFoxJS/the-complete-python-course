1
00:00:00,150 --> 00:00:02,100
Jos: Hola y bienvenido de nuevo.

2
00:00:02,100 --> 00:00:02,933
En este

3
00:00:02,933 --> 00:00:05,850
video, vamos a crear nuestro primer formulario HTML,

4
00:00:05,850 --> 00:00:07,230
que permitir a nuestros

5
00:00:07,230 --> 00:00:11,810
usuarios crear nuevas publicaciones en nuestra base de datos en memoria.

6
00:00:12,830 --> 00:00:14,340
Para hacer eso, vamos

7
00:00:14,340 --> 00:00:17,410
a crear dos nuevos puntos finales Flask.

8
00:00:17,410 --> 00:00:19,270
Veamos aqu y creamos el

9
00:00:19,270 --> 00:00:21,320
primero, que ser muy simple.

10
00:00:21,320 --> 00:00:25,720
Le dar a los usuarios el formulario que pueden completar.

11
00:00:25,720 --> 00:00:30,150
As que vamos a hacer la aplicacin. ruta / publicacin / formulario.

12
00:00:30,150 --> 00:00:32,170
Y luego, aqu vamos a definir una funcin que

13
00:00:32,170 --> 00:00:35,970
va a devolver la plantilla de render de create. jinja2.

14
00:00:36,860 --> 00:00:39,800
Este va a ser un archivo que les vamos

15
00:00:39,800 --> 00:00:43,050
a dar a nuestros usuarios que contendr los campos que

16
00:00:43,050 --> 00:00:45,410
pueden completar para crear una nueva publicacin.

17
00:00:45,410 --> 00:00:46,760
Vamos a hacer esto primero.

18
00:00:46,760 --> 00:00:49,020
Siempre queremos ir paso a paso

19
00:00:49,020 --> 00:00:50,730
cuando hacemos desarrollo de software.

20
00:00:50,730 --> 00:00:52,670
Queremos hacer esto, asegurarnos de que funcione,

21
00:00:52,670 --> 00:00:54,700
y luego podemos pasar al siguiente bit.

22
00:00:54,700 --> 00:00:56,480
Si implementa todo junto, y

23
00:00:56,480 --> 00:00:59,750
luego trata de ver si funciona, puede descubrir que

24
00:00:59,750 --> 00:01:03,350
no es tan fcil darse cuenta de dnde est el problema.

25
00:01:03,350 --> 00:01:06,100
Entonces, yendo paso a paso, siempre es una buena idea.

26
00:01:06,100 --> 00:01:09,290
Avancemos en nuestras plantillas, creemos un nuevo archivo, que

27
00:01:10,260 --> 00:01:12,820
se llamar crear. jinja2, y aqu

28
00:01:12,820 --> 00:01:17,630
vamos a hacer la base extendida habitual. jinja2 y luego un bloque

29
00:01:20,080 --> 00:01:21,840
de contenido all.

30
00:01:24,310 --> 00:01:27,790
Y dentro de este bloque vamos a poner nuestra forma.

31
00:01:27,790 --> 00:01:30,510
Lo primero es un pequeo ttulo, solo

32
00:01:30,510 --> 00:01:32,920
para que el usuario sepa dnde estn.

33
00:01:34,380 --> 00:01:36,800
Luego, vamos a incluir nuestro formulario.

34
00:01:36,800 --> 00:01:37,633
Mrcalo.

35
00:01:40,140 --> 00:01:42,960
Y dentro de un formulario, vamos a incluir un div.

36
00:01:44,430 --> 00:01:49,430
Un div en HTML es solo un bloque horizontal, por lo que

37
00:01:49,950 --> 00:01:53,140
si tiene dos divs, por ejemplo este aqu,

38
00:01:54,070 --> 00:01:56,300
y luego este aqu, aparecern

39
00:01:56,300 --> 00:02:00,920
uno debajo del otro, en lugar de uno al lado del otro.

40
00:02:00,920 --> 00:02:04,030
Entonces, es una buena forma de separar el contenido en HTML.

41
00:02:04,030 --> 00:02:06,040
Realmente no hace nada por s mismo, pero

42
00:02:06,040 --> 00:02:07,890
es una buena forma de separar el contenido.

43
00:02:07,890 --> 00:02:09,140
Y el contenido que vamos

44
00:02:09,140 --> 00:02:10,930
a separar es los diferentes campos.

45
00:02:11,820 --> 00:02:16,820
Lo primero que vamos a hacer es agregar una etiqueta

46
00:02:17,110 --> 00:02:22,110
y la etiqueta ser para este campo de ttulo.

47
00:02:22,180 --> 00:02:25,900
El campo de ttulo va a estar aqu, ingrese texto

48
00:02:25,900 --> 00:02:27,890
tipo y el nombre ser ttulo.

49
00:02:30,590 --> 00:02:35,410
Observe cmo la etiqueta tiene una etiqueta de apertura y una de cierre, y

50
00:02:35,410 --> 00:02:38,600
dentro de ella, coloca lo que desea en la etiqueta.

51
00:02:38,600 --> 00:02:40,850
Pero el campo de entrada no tiene nada dentro,

52
00:02:40,850 --> 00:02:42,850
porque es un campo en blanco por lo

53
00:02:42,850 --> 00:02:45,730
que obtienes lo que se llama una etiqueta de cierre automtico.

54
00:02:45,730 --> 00:02:48,480
Obtiene una etiqueta que tiene esta sintaxis extraa en la

55
00:02:48,480 --> 00:02:50,070
que solo se trata de una

56
00:02:50,070 --> 00:02:52,080
etiqueta nica, pero tiene una barra diagonal al

57
00:02:52,080 --> 00:02:54,280
final, que se denomina etiqueta de cierre automtico.

58
00:02:54,280 --> 00:02:55,970
Una etiqueta que se cierra sola.

59
00:02:55,970 --> 00:03:00,850
El nombre del campo es a lo que se dirige esto.

60
00:03:00,850 --> 00:03:05,850
Entonces esto le dice a los usuarios de HTML que esta etiqueta es para este campo.

61
00:03:07,070 --> 00:03:11,060
Por supuesto, cuando vea el ttulo del texto junto a un campo,

62
00:03:11,060 --> 00:03:13,840
sabr que ese ttulo es para ese campo.

63
00:03:13,840 --> 00:03:16,510
Pero si est ciego y est usando un

64
00:03:16,510 --> 00:03:19,090
lector de pantalla, es posible que no vea

65
00:03:19,090 --> 00:03:20,250
el contenido de

66
00:03:20,250 --> 00:03:23,050
la etiqueta, pero el lector de pantalla podr

67
00:03:23,050 --> 00:03:27,200
ver esta propiedad y decirle que este campo de entrada es un ttulo.

68
00:03:27,200 --> 00:03:29,160
Por lo tanto, siempre es una buena

69
00:03:29,160 --> 00:03:32,890
idea tener estos fors, son para lectores de pantalla, no para el resto de

70
00:03:32,890 --> 00:03:34,920
nosotros, pero es una buena idea, no obstante.

71
00:03:36,010 --> 00:03:38,440
Luego, en el otro div, vamos a incluir

72
00:03:38,440 --> 00:03:40,740
un campo para los contenidos de la publicacin.

73
00:03:41,596 --> 00:03:46,530
As que vamos a etiquetar el contenido, el contenido, y luego, en lugar de un

74
00:03:48,440 --> 00:03:50,740
tipo de texto de entrada, que es

75
00:03:50,740 --> 00:03:54,030
un campo de texto de una sola lnea, vamos a

76
00:03:54,030 --> 00:03:55,840
usar un rea de texto.

77
00:03:57,624 --> 00:04:00,040
Un rea de texto es solo un campo multilnea.

78
00:04:02,010 --> 00:04:03,450
Como eso.

79
00:04:03,450 --> 00:04:07,290
Y un rea de texto tiene que cerrarse, as.

80
00:04:07,290 --> 00:04:09,500
No debe ser una etiqueta de cierre automtico.

81
00:04:10,670 --> 00:04:12,100
Este es solo otro tipo

82
00:04:12,100 --> 00:04:14,390
de entrada que puede abarcar mltiples lneas.

83
00:04:14,390 --> 00:04:18,010
Y finalmente vamos a incluir un div final,

84
00:04:19,240 --> 00:04:22,490
que ser una entrada de tipo submit.

85
00:04:24,720 --> 00:04:26,570
Una entrada de tipo enviar,

86
00:04:26,570 --> 00:04:28,810
esencialmente, es un botn que el

87
00:04:28,810 --> 00:04:30,780
usuario puede presionar, y cuando

88
00:04:30,780 --> 00:04:35,410
el usuario presiona el botn, enva los datos del formulario al servidor.

89
00:04:36,550 --> 00:04:39,050
Ahora que tenemos esto, vayamos a nuestra aplicacin,

90
00:04:39,050 --> 00:04:42,750
ejectelo y veamos qu ocurre cuando accedemos a este punto final.

91
00:04:42,750 --> 00:04:47,750
Vamos a Chrome y accedemos a la publicacin /

92
00:04:50,150 --> 00:04:53,290
formulario y obtienes esta bonita apariencia.

93
00:04:53,290 --> 00:04:56,130
Est bien, te dar que no es terriblemente

94
00:04:56,130 --> 00:04:58,490
bonito, pero no obstante es funcional.

95
00:04:58,490 --> 00:05:02,680
Puede poner su ttulo aqu, como "Mi primera publicacin de blog", y el contenido

96
00:05:02,680 --> 00:05:05,940
puede ser "Hola, cmo te va? "Entonces puede enviar

97
00:05:07,450 --> 00:05:11,200
y ahora ver qu pasa con la URL.

98
00:05:15,200 --> 00:05:17,270
La URL ha cambiado, verdad?

99
00:05:17,270 --> 00:05:19,640
Ahora tiene todo esto aqu.

100
00:05:20,720 --> 00:05:24,860
Pero pareca que cargaba algo.

101
00:05:24,860 --> 00:05:28,490
Ahora los campos estn en blanco, pero la URL ha cambiado.

102
00:05:28,490 --> 00:05:29,640
Entonces, cmo explicar esto?

103
00:05:30,980 --> 00:05:32,970
Lo que estaba sucediendo es

104
00:05:32,970 --> 00:05:37,410
que el formulario est enviando los datos a una pgina.

105
00:05:37,410 --> 00:05:40,670
Esa pgina puede elegir usar esa informacin o no.

106
00:05:41,670 --> 00:05:44,200
Lo que sucede es que, cuando

107
00:05:44,200 --> 00:05:46,940
presiona enviar, el navegador enva otra

108
00:05:48,210 --> 00:05:52,390
solicitud GET a esta URL / publicacin / formulario e

109
00:05:52,390 --> 00:05:55,200
incluye detrs de esto, que se

110
00:05:55,200 --> 00:05:58,730
llama parmetro de cadena de consulta, est bien?

111
00:05:58,730 --> 00:06:02,810
Esta ? title = algo y el contenido es igual a algo ms.

112
00:06:03,870 --> 00:06:07,300
Pero debido a que nuestro cdigo Python aqu, cuando

113
00:06:07,300 --> 00:06:12,300
accede a este punto final, solo genera una plantilla, no utiliza los datos

114
00:06:12,590 --> 00:06:14,460
que recibi en los parmetros

115
00:06:14,460 --> 00:06:16,410
de cadena de consulta.

116
00:06:16,410 --> 00:06:18,380
No puede hacer nada con ellos, y todo

117
00:06:18,380 --> 00:06:20,640
lo que sucede es que volvemos a rasgar la

118
00:06:20,640 --> 00:06:22,690
plantilla y no usamos esa informacin en absoluto.

119
00:06:24,570 --> 00:06:25,640
Vamos a detener la

120
00:06:25,640 --> 00:06:27,680
aplicacin de nuevo porque vamos a reiniciarla momentneamente,

121
00:06:27,680 --> 00:06:28,730
pero lo que vamos

122
00:06:28,730 --> 00:06:32,440
a hacer es, en lugar de enviar los datos a este punto final, vamos

123
00:06:32,440 --> 00:06:35,020
a enviar los datos a un punto final diferente.

124
00:06:35,020 --> 00:06:37,230
Entonces, aqu en la forma,

125
00:06:37,230 --> 00:06:42,230
vamos a decir accin igual a / post / crear, de acuerdo?

126
00:06:44,170 --> 00:06:47,000
En lugar de / post / form, ahora

127
00:06:47,000 --> 00:06:51,430
va a entrar / publicar / crear y podemos crear ese punto final.

128
00:06:51,430 --> 00:06:56,430
Aplicacin enrutar / publicar / crear, crear una

129
00:06:57,640 --> 00:07:00,180
publicacin, y esto, en realidad solo voy

130
00:07:00,180 --> 00:07:05,180
a llamarlo crear, solo para mantenerlo simple, esto va a acceder a los datos

131
00:07:05,340 --> 00:07:07,380
que ingresan a travs de la URL.

132
00:07:07,380 --> 00:07:11,250
Recuerde, este es un servidor nmero uno

133
00:07:13,556 --> 00:07:18,410
5,000 / post / create? title = blah blah y

134
00:07:18,410 --> 00:07:21,840
el contenido es igual a algo ms.

135
00:07:22,810 --> 00:07:24,460
S?

136
00:07:24,460 --> 00:07:26,690
Aqu podemos acceder a esto,

137
00:07:26,690 --> 00:07:30,100
podemos recuperar el ttulo y el contenido.

138
00:07:30,100 --> 00:07:31,490
As que hagamos eso.

139
00:07:31,490 --> 00:07:34,970
Dentro de nuestra funcin de creacin, diremos que

140
00:07:34,970 --> 00:07:39,970
el ttulo es solicitud. args. obtener el ttulo y tenemos

141
00:07:40,080 --> 00:07:42,230
que importar la solicitud desde Flask

142
00:07:42,230 --> 00:07:46,600
as que vamos a la parte superior y decimos la solicitud de importacin.

143
00:07:48,240 --> 00:07:51,500
Aqu, esta pregunta, es una variable, es como

144
00:07:51,500 --> 00:07:52,900
una variable global,

145
00:07:53,840 --> 00:07:57,810
es la solicitud que est llegando a este punto final.

146
00:07:57,810 --> 00:08:01,830
Entonces la solicitud en este momento es esto

147
00:08:01,830 --> 00:08:05,420
y tiene algunos argumentos que son estos.

148
00:08:06,510 --> 00:08:09,080
Y puede obtener un argumento

149
00:08:09,080 --> 00:08:11,670
particular para recuperar su contenido.

150
00:08:11,670 --> 00:08:13,470
Bsicamente, Flask, detrs de escena, est convirtiendo

151
00:08:13,470 --> 00:08:18,090
esto en un diccionario y eso es una peticin. args.

152
00:08:18,090 --> 00:08:20,320
Luego puede obtener una cosa en particular en ese

153
00:08:20,320 --> 00:08:22,270
diccionario y le daremos el contenido de eso.

154
00:08:23,560 --> 00:08:27,770
Del mismo modo, podemos hacer content = request. args. obtener contenido, entonces

155
00:08:28,750 --> 00:08:31,330
podemos generar una nueva ID de

156
00:08:31,330 --> 00:08:33,340
publicacin, que ser publicada.

157
00:08:34,250 --> 00:08:39,000
Y, por ltimo, podemos decir que las publicaciones, el ttulo igual de

158
00:08:40,500 --> 00:08:42,750
ID de publicacin ser el ttulo

159
00:08:42,750 --> 00:08:44,890
y el contenido ser el contenido.

160
00:08:46,540 --> 00:08:47,373
Como eso.

161
00:08:48,950 --> 00:08:50,760
Ahora es un buen momento para

162
00:08:50,760 --> 00:08:55,720
asegurarse de incluir tambin una identificacin para la publicacin en el cuerpo de la publicacin.

163
00:08:58,530 --> 00:08:59,700
Como eso.

164
00:08:59,700 --> 00:09:01,650
Solo cuando accedas a una publicacin en

165
00:09:01,650 --> 00:09:03,720
particular, tambin tendrs acceso a su ID.

166
00:09:03,720 --> 00:09:06,660
Es til incluirlo en cada publicacin.

167
00:09:06,660 --> 00:09:09,310
As que vamos a ir aqu y tambin incluir eso aqu.

168
00:09:10,950 --> 00:09:13,360
De acuerdo, solo es bueno incluirlo

169
00:09:13,360 --> 00:09:14,960
para tener la informacin

170
00:09:14,960 --> 00:09:16,640
completa cuando recuperes una publicacin.

171
00:09:17,890 --> 00:09:21,670
Ahora que hemos agregado esta nueva publicacin a

172
00:09:22,520 --> 00:09:26,630
nuestras publicaciones, podemos devolver al usuario algo ms.

173
00:09:26,630 --> 00:09:30,570
Entonces, de nuevo, todo lo que hace es acceder a estos

174
00:09:30,570 --> 00:09:32,330
argumentos mediante solicitud. args y obtiene

175
00:09:32,330 --> 00:09:34,680
un ttulo y el contenido que proviene del

176
00:09:34,680 --> 00:09:36,630
formulario, genera una nueva ID de publicacin

177
00:09:36,630 --> 00:09:38,900
y luego la coloca en nuestro diccionario.

178
00:09:38,900 --> 00:09:40,890
Por ejemplo, si creamos una nueva publicacin

179
00:09:40,890 --> 00:09:44,060
y le pasamos algunos valores aqu, la cantidad de publicaciones

180
00:09:44,060 --> 00:09:47,040
ser una porque tenemos una publicacin en este momento, y

181
00:09:47,040 --> 00:09:51,000
lo que haremos es decir que una es igual a esta nueva publicacin.

182
00:09:52,010 --> 00:09:55,900
Y al final, vamos a decir "return" y aqu

183
00:09:55,900 --> 00:09:57,950
hay una URL de redireccionamiento

184
00:09:57,950 --> 00:10:01,530
un poco ms complicada para ID de publicacin igual

185
00:10:01,530 --> 00:10:03,080
de ID de publicacin

186
00:10:04,950 --> 00:10:05,783
y publicacin.

187
00:10:07,360 --> 00:10:09,530
As que un par de cosas estn sucediendo aqu.

188
00:10:09,530 --> 00:10:11,250
Lo primero es esta URL para.

189
00:10:12,320 --> 00:10:15,120
La URL para, que vamos a importar

190
00:10:15,120 --> 00:10:17,840
en un momento, URL para toma en

191
00:10:19,090 --> 00:10:23,310
un nombre de funcin, toma el nombre de la funcin

192
00:10:23,310 --> 00:10:26,860
y devuelve una URL, una direccin que queremos.

193
00:10:26,860 --> 00:10:29,190
En este caso, toma el nombre de

194
00:10:29,190 --> 00:10:31,600
la funcin de publicacin, que es esta

195
00:10:31,600 --> 00:10:34,670
funcin definida aqu, y nos dar esta URL.

196
00:10:36,380 --> 00:10:38,380
En lugar de codificar directamente la

197
00:10:38,380 --> 00:10:41,200
URL aqu, podemos usar la URL para, y de

198
00:10:41,200 --> 00:10:44,270
esa manera podemos cambiar esto ms adelante si queremos.

199
00:10:44,270 --> 00:10:46,620
Por ejemplo, digamos que queremos cambiarlo

200
00:10:46,620 --> 00:10:50,930
a, no s, publicaciones / algo, esto seguir funcionando, porque no hemos

201
00:10:50,930 --> 00:10:53,180
cambiado el nombre de la funcin.

202
00:10:54,150 --> 00:10:56,770
Por lo tanto, Flask recomienda utilizar

203
00:10:56,770 --> 00:11:00,710
esta URL para generar URL en lugar de codificarlas.

204
00:11:00,710 --> 00:11:04,600
Y tambin nos permite dar los argumentos que necesita.

205
00:11:04,600 --> 00:11:09,600
Entonces, la URL de la publicacin necesita una ID de publicacin para estar completa,

206
00:11:10,700 --> 00:11:14,160
y podemos hacerlo dentro de la URL para la funcin.

207
00:11:15,430 --> 00:11:18,480
El redireccionamiento est envolviendo esta URL y lo

208
00:11:18,480 --> 00:11:20,920
que hace es enviar una respuesta

209
00:11:20,920 --> 00:11:23,350
al navegador que le dice al

210
00:11:23,350 --> 00:11:26,400
navegador que en realidad no debera cargar esta

211
00:11:26,400 --> 00:11:29,250
pgina, debera ir y cargar esta pgina.

212
00:11:29,250 --> 00:11:31,860
Entonces, esencialmente, el navegador carga esto y luego

213
00:11:31,860 --> 00:11:33,830
recibe esta informacin y luego va

214
00:11:33,830 --> 00:11:35,750
y carga la otra cosa.

215
00:11:35,750 --> 00:11:39,260
Los navegadores ya estn conectados para comprender esto, as que por

216
00:11:39,260 --> 00:11:42,000
eso funciona, puedes enviar el navegador para ir

217
00:11:42,000 --> 00:11:44,100
a otro lado y lo harn.

218
00:11:45,210 --> 00:11:47,820
Bien, subamos e importemos esos dos.

219
00:11:48,830 --> 00:11:51,090
Queremos importar URL y redirigir y ahora cuando

220
00:11:52,350 --> 00:11:54,520
creamos una nueva publicacin, la pasamos en el

221
00:11:54,520 --> 00:11:56,000
ttulo y el contenido, la

222
00:11:56,000 --> 00:11:57,510
agregamos a nuestra base de

223
00:11:57,510 --> 00:12:00,390
datos y luego enviamos al usuario a la pgina de

224
00:12:00,390 --> 00:12:01,940
publicacin para esa publicacin especfica.

225
00:12:01,940 --> 00:12:04,890
Tan pronto como crees una publicacin, sers enviado de vuelta

226
00:12:04,890 --> 00:12:07,570
a la pgina de publicacin que acabas de crear.

227
00:12:07,570 --> 00:12:09,720
Vamos a ejecutar nuestra aplicacin y probar esto.

228
00:12:11,780 --> 00:12:12,780
Entonces, qu vamos a

229
00:12:12,780 --> 00:12:16,030
hacer, es que vamos a eliminar este parmetro de cadena de consulta.

230
00:12:18,140 --> 00:12:19,360
Vamos a actualizar esta

231
00:12:19,360 --> 00:12:21,970
pgina y ahora vamos a ingresar algo aqu.

232
00:12:21,970 --> 00:12:26,970
"Mi primera publicacin en el blog" y "Oye, qu ests leyendo? "Y luego enve, y tan pronto como

233
00:12:27,510 --> 00:12:29,420
suceda el envo, usted sabe

234
00:12:29,420 --> 00:12:32,160
lo que suceder, la URL va a cambiar,

235
00:12:32,160 --> 00:12:37,160
vamos a enviar una solicitud a / publicar / crear, que va a procesar

236
00:12:37,500 --> 00:12:39,350
esta funcin aqu, agregar algo

237
00:12:39,350 --> 00:12:40,870
a nuestra base de

238
00:12:40,870 --> 00:12:44,540
datos, y entonces nos va a redirigir a / post / one.

239
00:12:46,000 --> 00:12:48,560
Presionemos enviar y all lo tienes.

240
00:12:48,560 --> 00:12:51,010
Y sucede tan rpido, ni siquiera se puede

241
00:12:51,010 --> 00:12:53,940
ver porque en realidad no pasa nada de fondo, pero

242
00:12:53,940 --> 00:12:56,510
ahora se ha agregado a nuestra base de datos,

243
00:12:56,510 --> 00:12:59,680
se puede ver que estamos en / post / one, y

244
00:12:59,680 --> 00:13:02,300
los nuevos contenidos de nuestra publicacin han aparecido aqu.

245
00:13:05,230 --> 00:13:08,020
As que esto est comenzando a ponerse realmente genial.

246
00:13:08,020 --> 00:13:10,280
Ahora podemos obtener informacin de nuestros usuarios,

247
00:13:10,280 --> 00:13:13,570
agregarla a una base de datos, ya sabes, enviarla a

248
00:13:13,570 --> 00:13:15,490
otros lugares, mostrar informacin, etc.

249
00:13:16,920 --> 00:13:18,560
Espero que comiences a ver el

250
00:13:18,560 --> 00:13:20,340
poder de lo que puede hacer Flask.

251
00:13:20,340 --> 00:13:22,240
Realmente amo a Flask y estoy

252
00:13:22,240 --> 00:13:24,370
muy entusiasmado con el desarrollo de aplicaciones

253
00:13:24,370 --> 00:13:26,190
Flask porque es muy simple.

254
00:13:26,190 --> 00:13:30,530
Y es todo Python, todo lo que est sucediendo aqu es esto.

255
00:13:30,530 --> 00:13:33,100
Esto es lo que Flask te da, realmente.

256
00:13:33,100 --> 00:13:35,810
Este enrutamiento, ya sabes, el acceso a la

257
00:13:35,810 --> 00:13:39,600
solicitud, las plantillas de renderizado, el resto, las bases de datos,

258
00:13:40,970 --> 00:13:43,420
toda la lgica de su negocio en

259
00:13:43,420 --> 00:13:46,010
trminos de crear nuevas publicaciones, etc., es todo Python.

260
00:13:46,010 --> 00:13:48,690
Y eso te da mucha flexibilidad.

261
00:13:48,690 --> 00:13:51,470
Hay otros frameworks web aparte de Flask que

262
00:13:51,470 --> 00:13:55,160
pueden ser un poco ms complejos de usar, como Django, que

263
00:13:55,160 --> 00:13:57,100
requieren un conocimiento un poco ms

264
00:13:57,100 --> 00:13:58,090
adelantado, pero Flask

265
00:13:58,090 --> 00:14:01,200
no, por eso me gusta cmo funciona Flask.

266
00:14:01,200 --> 00:14:03,240
Y esto es lo que hago en mi

267
00:14:03,240 --> 00:14:04,990
trabajo y en muchos otros mbitos tambin.

268
00:14:06,210 --> 00:14:08,070
As que este fue el final

269
00:14:08,070 --> 00:14:10,900
del video, solo quera mostrarte cmo enviar al usuario a

270
00:14:10,900 --> 00:14:12,150
una publicacin que acaba

271
00:14:12,150 --> 00:14:14,240
de crear y cmo crear nuevas publicaciones.

272
00:14:14,240 --> 00:14:16,560
Vamos a pasar al siguiente video

273
00:14:16,560 --> 00:14:19,600
para agregar publicaciones de una manera ligeramente diferente.

274
00:14:19,600 --> 00:14:20,550
Te ver all.

