1
00:00:00,150 --> 00:00:02,100
Jose: Ol e bem vindo de volta.

2
00:00:02,100 --> 00:00:02,933
Neste vdeo,

3
00:00:02,933 --> 00:00:05,850
vamos criar nosso primeiro formulrio HTML, que

4
00:00:05,850 --> 00:00:07,230
permitir que nossos

5
00:00:07,230 --> 00:00:11,810
usurios criem novas postagens em nosso banco de dados na memria.

6
00:00:12,830 --> 00:00:14,340
Para fazer isso, vamos

7
00:00:14,340 --> 00:00:17,410
criar dois novos pontos de extremidade do Flask.

8
00:00:17,410 --> 00:00:19,270
Vamos at aqui e criar o

9
00:00:19,270 --> 00:00:21,320
primeiro, que vai ser muito simples.

10
00:00:21,320 --> 00:00:25,720
Isso dar aos usurios o formulrio que eles podem preencher.

11
00:00:25,720 --> 00:00:30,150
Ento vamos fazer app. rota / postagem / formulrio.

12
00:00:30,150 --> 00:00:32,170
E ento aqui vamos definir uma funo que

13
00:00:32,170 --> 00:00:35,970
retornar o modelo de renderizao da criao. jinja2.

14
00:00:36,860 --> 00:00:39,800
Este vai ser um arquivo que vamos dar aos

15
00:00:39,800 --> 00:00:43,050
nossos usurios, que vai conter os campos que eles podem

16
00:00:43,050 --> 00:00:45,410
preencher para criar uma nova postagem.

17
00:00:45,410 --> 00:00:46,760
Vamos fazer isso primeiro.

18
00:00:46,760 --> 00:00:49,020
Ns sempre queremos ir passo a passo

19
00:00:49,020 --> 00:00:50,730
quando fazemos o desenvolvimento de software.

20
00:00:50,730 --> 00:00:52,670
Queremos fazer isso, garantir que funcione, e

21
00:00:52,670 --> 00:00:54,700
ento podemos passar para o prximo passo.

22
00:00:54,700 --> 00:00:56,480
Se voc implementar tudo junto

23
00:00:56,480 --> 00:00:59,750
e tentar ver se funciona, poder descobrir que

24
00:00:59,750 --> 00:01:03,350
no  to fcil perceber onde est o problema.

25
00:01:03,350 --> 00:01:06,100
Ento, indo passo a passo, sempre  uma boa ideia.

26
00:01:06,100 --> 00:01:09,290
Vamos seguir em frente para nossos modelos, criar um novo arquivo,

27
00:01:10,260 --> 00:01:12,820
que ser chamado de criar. jinja2, e aqui

28
00:01:12,820 --> 00:01:17,630
vamos fazer a base usual de extenso. jinja2 e depois um bloco

29
00:01:20,080 --> 00:01:21,840
de contedo l.

30
00:01:24,310 --> 00:01:27,790
E dentro deste bloco vamos colocar nosso formulrio.

31
00:01:27,790 --> 00:01:30,510
A primeira coisa  um ttulo pequenino,

32
00:01:30,510 --> 00:01:32,920
s para o usurio saber onde esto.

33
00:01:34,380 --> 00:01:36,800
Ento, vamos incluir nosso formulrio.

34
00:01:36,800 --> 00:01:37,633
Marca-lo.

35
00:01:40,140 --> 00:01:42,960
E dentro de um formulrio, vamos incluir um div.

36
00:01:44,430 --> 00:01:49,430
Um div em HTML  apenas um bloco horizontal, portanto, se voc

37
00:01:49,950 --> 00:01:53,140
tiver dois divs, por exemplo, este aqui, e

38
00:01:54,070 --> 00:01:56,300
este aqui, eles aparecero um

39
00:01:56,300 --> 00:02:00,920
abaixo do outro, em vez de um ao lado do outro.

40
00:02:00,920 --> 00:02:04,030
Portanto,  uma boa maneira de separar o contedo em HTML.

41
00:02:04,030 --> 00:02:06,040
Realmente no faz nada sozinho, mas 

42
00:02:06,040 --> 00:02:07,890
uma boa maneira de separar contedo.

43
00:02:07,890 --> 00:02:09,140
E o contedo que

44
00:02:09,140 --> 00:02:10,930
vamos separar  dos diferentes campos.

45
00:02:11,820 --> 00:02:16,820
A primeira coisa que vamos fazer  adicionar um rtulo

46
00:02:17,110 --> 00:02:22,110
e o rtulo ser para esse campo de ttulo.

47
00:02:22,180 --> 00:02:25,900
O campo do ttulo vai estar aqui, o texto do tipo de

48
00:02:25,900 --> 00:02:27,890
entrada e o nome vai ser ttulo.

49
00:02:30,590 --> 00:02:35,410
Observe como o rtulo tem uma tag de abertura e uma tag de fechamento

50
00:02:35,410 --> 00:02:38,600
e, dentro dela, voc coloca o que deseja no rtulo.

51
00:02:38,600 --> 00:02:40,850
Mas o campo de entrada no tem nada dentro

52
00:02:40,850 --> 00:02:42,850
dele, porque  um campo em branco, ento

53
00:02:42,850 --> 00:02:45,730
voc obtm o que  chamado de tag de fechamento automtico.

54
00:02:45,730 --> 00:02:48,480
Voc obtm uma tag que tem essa sintaxe estranha, em

55
00:02:48,480 --> 00:02:50,070
que  apenas uma nica tag,

56
00:02:50,070 --> 00:02:52,080
mas tem essa barra invertida no final,

57
00:02:52,080 --> 00:02:54,280
isso  chamado de tag de fechamento automtico.

58
00:02:54,280 --> 00:02:55,970
Uma tag que se fecha sozinha.

59
00:02:55,970 --> 00:03:00,850
O nome do campo  o que isso vai direcionar.

60
00:03:00,850 --> 00:03:05,850
Isso diz aos usurios de HTML que esse rtulo  para esse campo.

61
00:03:07,070 --> 00:03:11,060
Naturalmente, quando voc v o ttulo do texto ao lado de um

62
00:03:11,060 --> 00:03:13,840
campo, sabe que esse ttulo  para esse campo.

63
00:03:13,840 --> 00:03:16,510
Mas se voc estiver cego e estiver usando

64
00:03:16,510 --> 00:03:19,090
um leitor de tela, talvez no veja o

65
00:03:19,090 --> 00:03:20,250
contedo do rtulo,

66
00:03:20,250 --> 00:03:23,050
mas o leitor de tela poder ver isso

67
00:03:23,050 --> 00:03:27,200
como propriedade e informar que esse campo de entrada  um ttulo.

68
00:03:27,200 --> 00:03:29,160
Ento  sempre uma boa ideia ter

69
00:03:29,160 --> 00:03:32,890
esses fors, eles so para leitores de tela, no para o resto de ns,

70
00:03:32,890 --> 00:03:34,920
mas  uma boa ideia, no entanto.

71
00:03:36,010 --> 00:03:38,440
Ento, no outro div, vamos incluir um

72
00:03:38,440 --> 00:03:40,740
campo para o contedo do post.

73
00:03:41,596 --> 00:03:46,530
Ento, vamos rotular contedo, contedo e, em vez de um texto de

74
00:03:48,440 --> 00:03:50,740
tipo de entrada, que  um

75
00:03:50,740 --> 00:03:54,030
campo de texto de linha nica, vamos usar

76
00:03:54,030 --> 00:03:55,840
uma rea de texto.

77
00:03:57,624 --> 00:04:00,040
Uma rea de texto  apenas um campo de vrias linhas.

78
00:04:02,010 --> 00:04:03,450
Curtiu isso.

79
00:04:03,450 --> 00:04:07,290
E uma rea de texto tem que fechar, assim.

80
00:04:07,290 --> 00:04:09,500
No deveria ser uma tag de fechamento automtico.

81
00:04:10,670 --> 00:04:12,100
Este  apenas outro tipo

82
00:04:12,100 --> 00:04:14,390
de entrada que pode abranger vrias linhas.

83
00:04:14,390 --> 00:04:18,010
E finalmente vamos incluir uma div final,

84
00:04:19,240 --> 00:04:22,490
que ser uma entrada do tipo submit.

85
00:04:24,720 --> 00:04:26,570
Uma entrada do tipo submit,

86
00:04:26,570 --> 00:04:28,810
essencialmente,  um boto que o

87
00:04:28,810 --> 00:04:30,780
usurio pode pressionar, e quando o

88
00:04:30,780 --> 00:04:35,410
usurio pressiona o boto, eles vo enviar os dados do formulrio para o servidor.

89
00:04:36,550 --> 00:04:39,050
Agora que temos isso, vamos ao nosso

90
00:04:39,050 --> 00:04:42,750
aplicativo, execut-lo e ver o que acontece quando acessamos esse endpoint.

91
00:04:42,750 --> 00:04:47,750
Vamos at o Chrome e acessar post / form

92
00:04:50,150 --> 00:04:53,290
e voc ter esse belo formulrio.

93
00:04:53,290 --> 00:04:56,130
Ok, eu vou te dar isso no 

94
00:04:56,130 --> 00:04:58,490
muito bonito, mas ainda assim  funcional.

95
00:04:58,490 --> 00:05:02,680
Voc pode colocar seu ttulo aqui, como "Minha primeira postagem no blog", e o contedo

96
00:05:02,680 --> 00:05:05,940
pode ser: "Ol, como voc est? "Ento voc pode enviar

97
00:05:07,450 --> 00:05:11,200
e agora veja o que acontece com o URL.

98
00:05:15,200 --> 00:05:17,270
O URL mudou, certo?

99
00:05:17,270 --> 00:05:19,640
Agora tem tudo isso aqui.

100
00:05:20,720 --> 00:05:24,860
Mas parecia que carregava alguma coisa.

101
00:05:24,860 --> 00:05:28,490
Agora os campos esto em branco, mas o URL foi alterado.

102
00:05:28,490 --> 00:05:29,640
Ento, como explicar isso?

103
00:05:30,980 --> 00:05:32,970
O que estava acontecendo 

104
00:05:32,970 --> 00:05:37,410
que o formulrio est enviando os dados para uma pgina.

105
00:05:37,410 --> 00:05:40,670
Essa pgina pode ento escolher usar esses dados ou no.

106
00:05:41,670 --> 00:05:44,200
O que acontece  que, quando

107
00:05:44,200 --> 00:05:46,940
voc pressiona submit, o navegador envia

108
00:05:48,210 --> 00:05:52,390
outra requisio GET para este URL / post /

109
00:05:52,390 --> 00:05:55,200
form e inclui por trs disso,

110
00:05:55,200 --> 00:05:58,730
que  chamado de query string parameter, ok?

111
00:05:58,730 --> 00:06:02,810
Este ? title = algo e contedo  igual a outra coisa.

112
00:06:03,870 --> 00:06:07,300
Mas como nosso cdigo Python aqui, quando voc

113
00:06:07,300 --> 00:06:12,300
acessa esse terminal, apenas renderiza um modelo, ele no usa os

114
00:06:12,590 --> 00:06:14,460
dados que recebeu nos

115
00:06:14,460 --> 00:06:16,410
parmetros de string de consulta.

116
00:06:16,410 --> 00:06:18,380
No  possvel fazer nada com eles,

117
00:06:18,380 --> 00:06:20,640
e tudo o que acontece  que reproduzimos

118
00:06:20,640 --> 00:06:22,690
novamente o modelo e no usamos esses dados.

119
00:06:24,570 --> 00:06:25,640
Vamos parar o

120
00:06:25,640 --> 00:06:27,680
aplicativo novamente porque vamos reinici-lo momentaneamente,

121
00:06:27,680 --> 00:06:28,730
mas o que

122
00:06:28,730 --> 00:06:32,440
vamos fazer , em vez de enviar os dados para este

123
00:06:32,440 --> 00:06:35,020
endpoint, vamos enviar os dados para um endpoint diferente.

124
00:06:35,020 --> 00:06:37,230
Ento, aqui no formulrio, vamos

125
00:06:37,230 --> 00:06:42,230
dizer que a ao  igual / post / create, ok?

126
00:06:44,170 --> 00:06:47,000
Em vez de / post / form, agora

127
00:06:47,000 --> 00:06:51,430
ele vai para / post / create e podemos criar esse endpoint.

128
00:06:51,430 --> 00:06:56,430
Aplicativo. route / post / create, criar

129
00:06:57,640 --> 00:07:00,180
post, e isso, na verdade, vou

130
00:07:00,180 --> 00:07:05,180
cham-lo de create, s para simplificar, isso vai acessar os dados

131
00:07:05,340 --> 00:07:07,380
que chegam pela URL.

132
00:07:07,380 --> 00:07:11,250
Lembre-se, isso aqui  um servidor nmero um

133
00:07:13,556 --> 00:07:18,410
5000 / post / create? title = blah blah e

134
00:07:18,410 --> 00:07:21,840
o contedo  igual a outra coisa.

135
00:07:22,810 --> 00:07:24,460
Sim?

136
00:07:24,460 --> 00:07:26,690
Podemos acessar essas coisas aqui,

137
00:07:26,690 --> 00:07:30,100
podemos recuperar o ttulo e o contedo.

138
00:07:30,100 --> 00:07:31,490
Ento vamos fazer exatamente isso.

139
00:07:31,490 --> 00:07:34,970
Dentro da nossa funo de criao, vamos dizer

140
00:07:34,970 --> 00:07:39,970
que ttulo  pedido. args. obter o ttulo e

141
00:07:40,080 --> 00:07:42,230
temos que importar o pedido do

142
00:07:42,230 --> 00:07:46,600
Flask ento vamos ao topo e dizer o pedido de importao.

143
00:07:48,240 --> 00:07:51,500
Essa coisa de solicitao aqui,  uma varivel,

144
00:07:51,500 --> 00:07:52,900
 como uma varivel

145
00:07:53,840 --> 00:07:57,810
global,  a solicitao que est chegando a esse terminal.

146
00:07:57,810 --> 00:08:01,830
Ento o pedido agora,  isso e

147
00:08:01,830 --> 00:08:05,420
tem alguns argumentos que so estes.

148
00:08:06,510 --> 00:08:09,080
E voc pode obter um

149
00:08:09,080 --> 00:08:11,670
argumento especfico para recuperar seu contedo.

150
00:08:11,670 --> 00:08:13,470
Essencialmente, o Flask, nos bastidores, est transformando

151
00:08:13,470 --> 00:08:18,090
isso em um dicionrio e isso  pedido. args.

152
00:08:18,090 --> 00:08:20,320
Ento voc pode pegar uma coisa em particular nesse

153
00:08:20,320 --> 00:08:22,270
dicionrio e ns lhe daremos o contedo disso.

154
00:08:23,560 --> 00:08:27,770
Da mesma forma, podemos fazer content = request. args. obter contedo, ento podemos

155
00:08:28,750 --> 00:08:31,330
gerar um novo ID de post, que

156
00:08:31,330 --> 00:08:33,340
vai ser len de posts.

157
00:08:34,250 --> 00:08:39,000
E, finalmente, podemos dizer posts, postar ttulo igual a ttulo

158
00:08:40,500 --> 00:08:42,750
vai ser o ttulo e

159
00:08:42,750 --> 00:08:44,890
contedo vai ser o contedo.

160
00:08:46,540 --> 00:08:47,373
Curtiu isso.

161
00:08:48,950 --> 00:08:50,760
Agora  um bom momento

162
00:08:50,760 --> 00:08:55,720
para se certificar de incluir tambm um ID para o post no corpo do post.

163
00:08:58,530 --> 00:08:59,700
Curtiu isso.

164
00:08:59,700 --> 00:09:01,650
S assim, quando voc acessar uma postagem

165
00:09:01,650 --> 00:09:03,720
especfica, voc tambm ter acesso ao seu ID.

166
00:09:03,720 --> 00:09:06,660
 uma coisa til para incluir em todos os posts.

167
00:09:06,660 --> 00:09:09,310
Ento, vamos subir aqui e tambm incluir isso aqui.

168
00:09:10,950 --> 00:09:13,360
Ok, apenas uma coisa boa para incluir, a

169
00:09:13,360 --> 00:09:14,960
fim de obter as informaes

170
00:09:14,960 --> 00:09:16,640
completas quando voc recuperar uma postagem.

171
00:09:17,890 --> 00:09:21,670
Agora que adicionamos essa nova postagem s

172
00:09:22,520 --> 00:09:26,630
nossas postagens, podemos retornar ao usurio outra coisa.

173
00:09:26,630 --> 00:09:30,570
Ento, novamente, tudo isso faz  acessar esses argumentos

174
00:09:30,570 --> 00:09:32,330
usando solicitao. args e recebe

175
00:09:32,330 --> 00:09:34,680
um ttulo e o contedo que veio do

176
00:09:34,680 --> 00:09:36,630
formulrio, gera um novo ID de

177
00:09:36,630 --> 00:09:38,900
postagem e o coloca em nosso dicionrio.

178
00:09:38,900 --> 00:09:40,890
Por exemplo, se criarmos uma nova

179
00:09:40,890 --> 00:09:44,060
postagem e passarmos alguns valores aqui, o nmero de postagens

180
00:09:44,060 --> 00:09:47,040
ser um, porque temos uma postagem agora, e o

181
00:09:47,040 --> 00:09:51,000
que faremos  dizer que a postagem ser igual a essa nova postagem.

182
00:09:52,010 --> 00:09:55,900
E no final, vamos dizer retorno e

183
00:09:55,900 --> 00:09:57,950
aqui est um pouco

184
00:09:57,950 --> 00:10:01,530
mais complicado redirecionar URL para postar, post

185
00:10:01,530 --> 00:10:03,080
ID igual post

186
00:10:04,950 --> 00:10:05,783
ID.

187
00:10:07,360 --> 00:10:09,530
Ento, algumas coisas esto acontecendo aqui.

188
00:10:09,530 --> 00:10:11,250
A primeira coisa  essa URL para.

189
00:10:12,320 --> 00:10:15,120
O URL para, que vamos importar em

190
00:10:15,120 --> 00:10:17,840
apenas um momento, URL para leva

191
00:10:19,090 --> 00:10:23,310
em um nome de funo, leva no nome da funo

192
00:10:23,310 --> 00:10:26,860
e retorna um URL, um endereo que queremos.

193
00:10:26,860 --> 00:10:29,190
Nesse caso,  necessrio o nome

194
00:10:29,190 --> 00:10:31,600
da funo post, que  essa

195
00:10:31,600 --> 00:10:34,670
funo definida aqui, e nos dar essa URL.

196
00:10:36,380 --> 00:10:38,380
Em vez de codificar a URL

197
00:10:38,380 --> 00:10:41,200
diretamente aqui, podemos usar o URL para, e

198
00:10:41,200 --> 00:10:44,270
assim poderemos alterar isso mais tarde, se quisermos.

199
00:10:44,270 --> 00:10:46,620
Por exemplo, digamos que queremos alter-lo

200
00:10:46,620 --> 00:10:50,930
para, no sei, posts / alguma coisa, isso ainda funcionar, porque

201
00:10:50,930 --> 00:10:53,180
no alteramos o nome da funo.

202
00:10:54,150 --> 00:10:56,770
Assim, o Flask recomenda usar esse

203
00:10:56,770 --> 00:11:00,710
URL para gerar URLs em vez de codific-los.

204
00:11:00,710 --> 00:11:04,600
E tambm nos permite dar os argumentos de que precisa.

205
00:11:04,600 --> 00:11:09,600
Portanto, o URL da postagem precisa de um ID de postagem para ser concludo

206
00:11:10,700 --> 00:11:14,160
e podemos fazer isso dentro do URL da funo.

207
00:11:15,430 --> 00:11:18,480
O redirecionamento est envolvendo essa URL e o

208
00:11:18,480 --> 00:11:20,920
que ela faz  enviar uma resposta

209
00:11:20,920 --> 00:11:23,350
de volta ao navegador informando ao navegador

210
00:11:23,350 --> 00:11:26,400
que ele realmente no deve carregar essa pgina,

211
00:11:26,400 --> 00:11:29,250
ele deve ir e carregar essa pgina.

212
00:11:29,250 --> 00:11:31,860
Ento, essencialmente, o navegador carrega isso e ento

213
00:11:31,860 --> 00:11:33,830
recebe essa informao e depois vai

214
00:11:33,830 --> 00:11:35,750
e carrega a outra coisa.

215
00:11:35,750 --> 00:11:39,260
Os navegadores j esto conectados para entender isso, ento  por isso

216
00:11:39,260 --> 00:11:42,000
que funciona, voc pode enviar o navegador para ir

217
00:11:42,000 --> 00:11:44,100
a outro lugar e eles faro isso.

218
00:11:45,210 --> 00:11:47,820
Ok, vamos subir e importar os dois.

219
00:11:48,830 --> 00:11:51,090
Queremos importar URL para e redirecionar e

220
00:11:52,350 --> 00:11:54,520
agora, quando criamos uma nova postagem, passamos

221
00:11:54,520 --> 00:11:56,000
no ttulo e no contedo,

222
00:11:56,000 --> 00:11:57,510
a adicionamos ao nosso banco

223
00:11:57,510 --> 00:12:00,390
de dados e depois enviamos o usurio para a

224
00:12:00,390 --> 00:12:01,940
pgina de postagem dessa postagem especfica.

225
00:12:01,940 --> 00:12:04,890
Ento, assim que voc criar uma postagem, voc ser enviado de

226
00:12:04,890 --> 00:12:07,570
volta para a pgina de postagem que acabou de criar.

227
00:12:07,570 --> 00:12:09,720
Vamos executar nosso aplicativo e experimentar isso.

228
00:12:11,780 --> 00:12:12,780
Ento, o que

229
00:12:12,780 --> 00:12:16,030
vamos fazer  excluir esse parmetro de string de consulta.

230
00:12:18,140 --> 00:12:19,360
Vamos atualizar esta

231
00:12:19,360 --> 00:12:21,970
pgina e agora vamos inserir algo aqui.

232
00:12:21,970 --> 00:12:26,970
"Minha primeira postagem no blog" e "Ei, o que voc est lendo? "E depois enviar, e assim que o

233
00:12:27,510 --> 00:12:29,420
envio acontecer, voc sabe o

234
00:12:29,420 --> 00:12:32,160
que vai acontecer, a URL vai mudar,

235
00:12:32,160 --> 00:12:37,160
vamos enviar uma requisio para / post / create, isso vai processar essa

236
00:12:37,500 --> 00:12:39,350
funo aqui, adicionar algo ao

237
00:12:39,350 --> 00:12:40,870
nosso banco de dados,

238
00:12:40,870 --> 00:12:44,540
e ento nos redirecionar para / post / one.

239
00:12:46,000 --> 00:12:48,560
Vamos pressionar enviar e l voc tem.

240
00:12:48,560 --> 00:12:51,010
E isso acontece to rapidamente, que voc nem

241
00:12:51,010 --> 00:12:53,940
consegue ver porque no h nada acontecendo muito em segundo

242
00:12:53,940 --> 00:12:56,510
plano, mas isso agora foi adicionado ao nosso banco

243
00:12:56,510 --> 00:12:59,680
de dados, voc pode ver que estamos em / post /

244
00:12:59,680 --> 00:13:02,300
one, e nosso novo contedo post apareceu aqui.

245
00:13:05,230 --> 00:13:08,020
Ento isso est comeando a ficar bem legal.

246
00:13:08,020 --> 00:13:10,280
Agora podemos obter informaes de nossos usurios,

247
00:13:10,280 --> 00:13:13,570
adicion-las a um banco de dados, envi-las para outros locais,

248
00:13:13,570 --> 00:13:15,490
exibir informaes e assim por diante.

249
00:13:16,920 --> 00:13:18,560
Espero que voc esteja comeando a ver

250
00:13:18,560 --> 00:13:20,340
o poder do que o Flask pode fazer.

251
00:13:20,340 --> 00:13:22,240
Eu realmente amo o Flask e

252
00:13:22,240 --> 00:13:24,370
sou muito apaixonada pelo desenvolvimento de aplicaes

253
00:13:24,370 --> 00:13:26,190
Flask porque  muito simples.

254
00:13:26,190 --> 00:13:30,530
E  tudo Python, tudo o que est acontecendo aqui  isso.

255
00:13:30,530 --> 00:13:33,100
Isso  o que o Flask d a voc, realmente.

256
00:13:33,100 --> 00:13:35,810
Esse roteamento, voc sabe, acesso  requisio, renderizao

257
00:13:35,810 --> 00:13:39,600
de templates, o resto, bancos de dados, toda a sua lgica

258
00:13:40,970 --> 00:13:43,420
de negcios em termos de criao de

259
00:13:43,420 --> 00:13:46,010
novos posts e assim por diante,  tudo Python.

260
00:13:46,010 --> 00:13:48,690
E isso lhe d muita flexibilidade.

261
00:13:48,690 --> 00:13:51,470
Existem outros frameworks da web alm do Flask que podem

262
00:13:51,470 --> 00:13:55,160
ser um pouco mais complexos de usar, como o Django, que requer um

263
00:13:55,160 --> 00:13:57,100
pouco mais de conhecimento inicial, mas o

264
00:13:57,100 --> 00:13:58,090
Flask no,  por

265
00:13:58,090 --> 00:14:01,200
isso que eu estou realmente gostando de como o Flask funciona.

266
00:14:01,200 --> 00:14:03,240
E  isso que fao no meu trabalho

267
00:14:03,240 --> 00:14:04,990
e em muitos outros lugares tambm.

268
00:14:06,210 --> 00:14:08,070
Ento, esse foi o fim do

269
00:14:08,070 --> 00:14:10,900
vdeo, s queria mostrar como enviar o usurio para

270
00:14:10,900 --> 00:14:12,150
um post que acabaram

271
00:14:12,150 --> 00:14:14,240
de criar e como criar novas postagens.

272
00:14:14,240 --> 00:14:16,560
Vamos passar para o prximo vdeo

273
00:14:16,560 --> 00:14:19,600
para adicionar postagens de uma maneira um pouco diferente.

274
00:14:19,600 --> 00:14:20,550
Eu te vejo l.

