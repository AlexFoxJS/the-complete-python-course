1
00:00:00,550 --> 00:00:02,420
<v Jose>Hi there, welcome back.</v>

2
00:00:02,420 --> 00:00:05,230
In this video we're going to look at strings.

3
00:00:05,230 --> 00:00:07,270
In the last video we looked at numbers,

4
00:00:07,270 --> 00:00:09,840
both integers and floats

5
00:00:09,840 --> 00:00:11,520
and also we looked at printing

6
00:00:11,520 --> 00:00:14,560
and now we're going to look at what strings are.

7
00:00:14,560 --> 00:00:16,390
And also we're going to expand that

8
00:00:16,390 --> 00:00:18,470
with string formatting.

9
00:00:19,760 --> 00:00:22,910
A string is a set of characters

10
00:00:22,910 --> 00:00:25,810
and symbols and numbers and anything else you want

11
00:00:25,810 --> 00:00:28,180
that have no meaning to the computer.

12
00:00:29,810 --> 00:00:30,820
Where you have a number,

13
00:00:30,820 --> 00:00:34,950
that number represents quantity or a value,

14
00:00:34,950 --> 00:00:36,880
a string doesn't represent anything

15
00:00:36,880 --> 00:00:39,180
it's just the digits themselves

16
00:00:39,180 --> 00:00:41,080
or the characters themselves.

17
00:00:41,080 --> 00:00:43,480
And they can normally be used for things

18
00:00:43,480 --> 00:00:45,500
that make sense to a person

19
00:00:45,500 --> 00:00:47,970
but not necessarily to a computer.

20
00:00:47,970 --> 00:00:50,490
This is all quite abstract so let's get right on it.

21
00:00:50,490 --> 00:00:53,580
Create a new repl.it on Python3

22
00:00:53,580 --> 00:00:54,930
and then we can begin.

23
00:00:56,150 --> 00:00:59,520
For example, let me create my first string variable.

24
00:01:01,840 --> 00:01:04,550
And we've got here inside quotation marks,

25
00:01:04,550 --> 00:01:06,710
so one at the start, one at the end,

26
00:01:07,860 --> 00:01:12,120
this arbitrary or seemingly arbitrary to the computer,

27
00:01:12,120 --> 00:01:15,110
set of letters, symbols and spaces.

28
00:01:16,040 --> 00:01:19,690
The computer sees this and it doesn't know what that means

29
00:01:19,690 --> 00:01:22,560
but of course it does have some meaning to us.

30
00:01:25,150 --> 00:01:28,470
So we can use this for printing, for example.

31
00:01:28,470 --> 00:01:31,220
Print my string, once again,

32
00:01:31,220 --> 00:01:33,970
the print keyword, it gets followed by an opening

33
00:01:33,970 --> 00:01:36,250
and closing bracket and inside it

34
00:01:36,250 --> 00:01:39,030
goes whatever we want to print out to the console.

35
00:01:40,150 --> 00:01:42,700
And now you can see that the string

36
00:01:42,700 --> 00:01:44,840
is used to say something to the user,

37
00:01:44,840 --> 00:01:46,960
or whoever is running our programme

38
00:01:46,960 --> 00:01:48,900
and it's not used for things that make sense

39
00:01:48,900 --> 00:01:49,733
to the computer.

40
00:01:52,100 --> 00:01:53,750
So there you have it,

41
00:01:53,750 --> 00:01:56,020
we've built our hello world app in Python.

42
00:01:57,090 --> 00:01:59,170
If you don't know what this means,

43
00:01:59,170 --> 00:02:01,640
this is just a really popular thing to do

44
00:02:01,640 --> 00:02:03,340
when you're learning programing.

45
00:02:03,340 --> 00:02:05,110
Whenever you learn new programming language

46
00:02:05,110 --> 00:02:07,650
normally you'll write an app that prints out

47
00:02:07,650 --> 00:02:09,930
hello world to the console because that's normally

48
00:02:09,930 --> 00:02:12,440
a simple app to get started.

49
00:02:12,440 --> 00:02:14,160
So congratulations, you've built

50
00:02:14,160 --> 00:02:15,770
your first Python app.

51
00:02:18,110 --> 00:02:20,480
Now, hello world is not as exciting

52
00:02:20,480 --> 00:02:22,020
as what the other apps will be building

53
00:02:22,020 --> 00:02:24,660
so hold onto your horses and let's continue.

54
00:02:26,571 --> 00:02:27,930
Notice how this string has a double quote

55
00:02:27,930 --> 00:02:30,240
at the start and a double quote at the end

56
00:02:30,240 --> 00:02:31,430
but we can also

57
00:02:33,460 --> 00:02:35,490
build strings that use

58
00:02:35,490 --> 00:02:37,310
single quotes instead

59
00:02:37,310 --> 00:02:39,520
and it's totally up to us which one we use,

60
00:02:39,520 --> 00:02:41,637
either double quotes or single quotes, it does not matter

61
00:02:41,637 --> 00:02:44,780
as long as the one at the start and and the end

62
00:02:46,214 --> 00:02:47,047
are the same, okay?

63
00:02:48,900 --> 00:02:51,110
So I'll recommend you try to pick

64
00:02:51,110 --> 00:02:53,560
one of those two, doesn't matter which one you do

65
00:02:53,560 --> 00:02:56,760
and you stick to it throughout all your code,

66
00:02:56,760 --> 00:02:59,640
that's normally a good way to keep consistency.

67
00:02:59,640 --> 00:03:00,710
If you wanna use double quotes,

68
00:03:00,710 --> 00:03:03,470
by all means do that but always use double quotes,

69
00:03:03,470 --> 00:03:07,090
don't change between lines of code

70
00:03:07,090 --> 00:03:08,470
or between variables or things like that,

71
00:03:08,470 --> 00:03:10,020
always try to use the same one.

72
00:03:10,870 --> 00:03:12,210
Now there's a moment in time

73
00:03:12,210 --> 00:03:14,550
where you'll want to use a specific one

74
00:03:14,550 --> 00:03:17,180
even if it doesn't match the style you've picked.

75
00:03:18,598 --> 00:03:20,420
For example,

76
00:03:23,900 --> 00:03:26,820
if you have something like this string here,

77
00:03:28,090 --> 00:03:30,570
because we've got a single quote there

78
00:03:30,570 --> 00:03:33,070
to write the it's,

79
00:03:33,070 --> 00:03:35,470
you'll need to use double quotes on the outside.

80
00:03:36,610 --> 00:03:38,980
Even if you normally use single quotes,

81
00:03:38,980 --> 00:03:41,180
you will want to use double quotes for this

82
00:03:41,180 --> 00:03:46,180
and similar strings so that you don't mess things up here.

83
00:03:46,470 --> 00:03:48,730
If you were to put a quote here

84
00:03:48,730 --> 00:03:50,920
and these were also single quotes,

85
00:03:53,460 --> 00:03:55,430
you'll see that this gets really confused,

86
00:03:55,430 --> 00:03:57,520
doesn't know what's a string and what isn't

87
00:03:57,520 --> 00:03:59,410
because you've got a string here

88
00:03:59,410 --> 00:04:03,330
and it doesn't know what this is, okay?

89
00:04:03,330 --> 00:04:05,430
So make sure to remember

90
00:04:05,430 --> 00:04:08,600
that if you have a quote inside your string

91
00:04:08,600 --> 00:04:11,140
to make sure to use the opposite quotes

92
00:04:11,140 --> 00:04:11,973
on the outside.

93
00:04:14,750 --> 00:04:17,040
Same thing, if you have something

94
00:04:20,350 --> 00:04:22,060
like this, you'll want to use

95
00:04:22,060 --> 00:04:24,050
single quotes on the outside

96
00:04:24,050 --> 00:04:28,080
and the double quotes around your quote, okay?

97
00:04:29,720 --> 00:04:32,090
You can also do this.

98
00:04:39,310 --> 00:04:42,800
But hopefully, you realise how ugly it is.

99
00:04:42,800 --> 00:04:44,850
You can do what's called escaping

100
00:04:44,850 --> 00:04:47,670
which is an escaped quote

101
00:04:47,670 --> 00:04:49,990
and that tells Python that this is not

102
00:04:49,990 --> 00:04:51,680
the same thing as this,

103
00:04:51,680 --> 00:04:54,180
it's something that will be inside your string

104
00:04:54,180 --> 00:04:56,240
but not terminated or started.

105
00:04:57,610 --> 00:04:59,200
So you can do this,

106
00:04:59,200 --> 00:05:00,920
but I don't recommend it,

107
00:05:00,920 --> 00:05:02,430
it's just a bit uglier and then

108
00:05:02,430 --> 00:05:04,840
you have to start keeping track of which quotes

109
00:05:04,840 --> 00:05:07,020
are escaped and which are not and so on, so forth.

110
00:05:07,020 --> 00:05:08,950
It becomes a bit messy, okay?

111
00:05:11,350 --> 00:05:12,977
Now let's move on to

112
00:05:12,977 --> 00:05:15,980
the string formatting part of this video.

113
00:05:15,980 --> 00:05:17,470
Imagine you have a name,

114
00:05:17,470 --> 00:05:19,340
for example my name, and by the way,

115
00:05:19,340 --> 00:05:21,670
I normally use single quotes for things,

116
00:05:21,670 --> 00:05:22,720
it's just what I'm accustomed to,

117
00:05:22,720 --> 00:05:24,270
feel free to use double quotes.

118
00:05:25,360 --> 00:05:28,040
Imagine you have my name in a variable

119
00:05:28,040 --> 00:05:30,070
and you want to greet me, you want to say hello

120
00:05:30,070 --> 00:05:33,790
you want to say greeting, hello Jose.

121
00:05:36,720 --> 00:05:39,170
As soon as the name variable changes,

122
00:05:39,170 --> 00:05:41,080
for example if this changes to Rolf,

123
00:05:42,180 --> 00:05:44,370
you'll wanna go and change this string as well

124
00:05:44,370 --> 00:05:46,980
to hello Rolf and so on.

125
00:05:46,980 --> 00:05:49,480
So this is not great because you've got

126
00:05:49,480 --> 00:05:52,370
some duplication there and things you have to change.

127
00:05:52,370 --> 00:05:53,870
So the best thing to do

128
00:05:53,870 --> 00:05:57,630
is to make this greeting use the name variable

129
00:05:58,980 --> 00:06:00,600
and the way where you can do that

130
00:06:00,600 --> 00:06:03,530
is by adding it, okay?

131
00:06:03,530 --> 00:06:05,080
What we've got here is a string

132
00:06:06,210 --> 00:06:09,610
plus another string which is this Jose string here.

133
00:06:10,820 --> 00:06:15,820
Notice how the first thing has hello comma and a space,

134
00:06:15,925 --> 00:06:18,710
and then we add to it the name which has no spaces

135
00:06:18,710 --> 00:06:20,300
at the start or at the end,

136
00:06:20,300 --> 00:06:22,450
and of course if we remove this space here,

137
00:06:24,250 --> 00:06:25,380
everything will just be together

138
00:06:25,380 --> 00:06:27,670
it will be hello Jose altogether.

139
00:06:27,670 --> 00:06:30,710
We have a space, it will have appropriate spacing

140
00:06:30,710 --> 00:06:31,870
as we would in English.

141
00:06:33,510 --> 00:06:36,760
Of course, we can print this greeting and run it.

142
00:06:38,210 --> 00:06:39,043
See?

143
00:06:40,150 --> 00:06:41,000
And you may not be able to see,

144
00:06:41,000 --> 00:06:42,300
I know the text is small.

145
00:06:44,740 --> 00:06:47,900
Now, instead of concatenating this string,

146
00:06:47,900 --> 00:06:50,210
that is what this is called, concatenating,

147
00:06:50,210 --> 00:06:53,110
instead of concatenating which can get really messy

148
00:06:53,110 --> 00:06:55,720
if you have a lot of things you wanna join together,

149
00:06:55,720 --> 00:06:58,440
we can use a new thing in Python3.6

150
00:06:58,440 --> 00:07:00,450
which is called an F string.

151
00:07:04,240 --> 00:07:07,540
The F strings work by placing an F

152
00:07:07,540 --> 00:07:10,730
outside of the string and then you can use

153
00:07:10,730 --> 00:07:15,130
the string here and you can say hello, name.

154
00:07:16,330 --> 00:07:18,130
Okay so important,

155
00:07:18,130 --> 00:07:20,760
F then you open up your string

156
00:07:20,760 --> 00:07:23,740
with a single quotation mark, or a double quotation mark,

157
00:07:23,740 --> 00:07:25,620
then you can type out your string

158
00:07:25,620 --> 00:07:28,270
and then you close the string out here.

159
00:07:28,270 --> 00:07:30,350
Inside here, notice how we've got

160
00:07:30,350 --> 00:07:32,670
these curly braces

161
00:07:32,670 --> 00:07:35,200
and inside the curly braces we've got name.

162
00:07:35,200 --> 00:07:38,430
Now name, repl.it is already telling us,

163
00:07:38,430 --> 00:07:41,470
is this variable here, okay?

164
00:07:42,520 --> 00:07:43,850
And the F string, what it's gonna do

165
00:07:43,850 --> 00:07:46,130
is it's going to look at the name variable

166
00:07:46,130 --> 00:07:49,380
and is going to replace it into this F string here.

167
00:07:49,380 --> 00:07:51,650
F stands for formatted

168
00:07:51,650 --> 00:07:53,440
and this is a formatted string

169
00:07:53,440 --> 00:07:56,780
because it's going to format it with this stuff

170
00:07:56,780 --> 00:07:58,290
that is inside these brackets.

171
00:07:59,250 --> 00:08:02,210
Now if we print another greeting out,

172
00:08:02,210 --> 00:08:05,340
you'll see hello Jose, it's printed out again.

173
00:08:06,216 --> 00:08:07,560
Okay?

174
00:08:08,710 --> 00:08:11,500
If you have ever taken other Python courses,

175
00:08:11,500 --> 00:08:14,630
you will know this third, this second way

176
00:08:14,630 --> 00:08:16,400
of formatting strings.

177
00:08:16,400 --> 00:08:18,020
The second way I'm gonna show you

178
00:08:18,020 --> 00:08:20,060
so that you know that this exists

179
00:08:20,060 --> 00:08:21,840
because a lot of coding uses it,

180
00:08:21,840 --> 00:08:24,990
but always use F strings if you can.

181
00:08:31,610 --> 00:08:33,520
This final greeting

182
00:08:33,520 --> 00:08:36,890
is going to only have opening and closing braces

183
00:08:36,890 --> 00:08:39,340
and it does not have the F in front,

184
00:08:39,340 --> 00:08:43,580
so this is just a good old normal string, okay?

185
00:08:47,600 --> 00:08:52,010
And if we want to format it and put Jose in here

186
00:08:52,010 --> 00:08:53,360
from our variable, we have to do

187
00:08:53,360 --> 00:08:57,000
final greeting dot format, name

188
00:08:57,930 --> 00:08:59,530
and what this is going to do

189
00:08:59,530 --> 00:09:01,950
is it's going to get this string here

190
00:09:01,950 --> 00:09:04,630
and it's going to format it with our variable

191
00:09:04,630 --> 00:09:07,410
and it's going to replace the curly braces

192
00:09:07,410 --> 00:09:09,460
by the value in our variable.

193
00:09:13,126 --> 00:09:14,420
And once again, if we run this

194
00:09:14,420 --> 00:09:19,420
it prints how are you Jose, up here, okay?

195
00:09:19,500 --> 00:09:22,750
Don't use this way of formatting strings

196
00:09:22,750 --> 00:09:27,290
unless you are working with Python3.5 or below.

197
00:09:27,290 --> 00:09:30,440
If you are working with Python3.6 or above,

198
00:09:30,440 --> 00:09:32,840
always try to use F strings.

199
00:09:33,750 --> 00:09:35,700
The only reason why I'm showing you this

200
00:09:35,700 --> 00:09:39,310
is because if you look at older Python code,

201
00:09:39,310 --> 00:09:41,250
in fact the majority of Python code

202
00:09:41,250 --> 00:09:44,003
will use this format

203
00:09:44,003 --> 00:09:46,250
way of doing things.

204
00:09:47,130 --> 00:09:49,280
That's just because Python3.6 is quite new.

205
00:09:50,250 --> 00:09:51,890
Okay?

206
00:09:51,890 --> 00:09:52,723
That's it for this video,

207
00:09:52,723 --> 00:09:54,670
we've looked at strings which can use

208
00:09:54,670 --> 00:09:56,440
double or single quotes,

209
00:09:56,440 --> 00:09:58,790
we've looked at escaping quotes

210
00:09:58,790 --> 00:10:01,470
and we've also looked at string formatting

211
00:10:01,470 --> 00:10:04,270
by concatenating strings using plus,

212
00:10:04,270 --> 00:10:07,280
by using F strings which is the recommended way,

213
00:10:07,280 --> 00:10:10,220
or by using dot format which is

214
00:10:10,220 --> 00:10:13,240
how the majority of Python code has been written

215
00:10:13,240 --> 00:10:15,990
over the last many years.

216
00:10:15,990 --> 00:10:17,100
So that's it for this video,

217
00:10:17,100 --> 00:10:19,750
hope you enjoyed it and I'll see you on the next one.

