1
00:00:00,340 --> 00:00:01,610
Jose: Ol e bem vindo de volta.

2
00:00:01,610 --> 00:00:04,250
Neste vdeo, vamos ver uma estrutura de

3
00:00:04,250 --> 00:00:05,930
dados extremamente til no Python,

4
00:00:05,930 --> 00:00:08,320
que  muito semelhante a um conjunto.

5
00:00:08,320 --> 00:00:10,570
 chamado de dicionrio.

6
00:00:10,570 --> 00:00:12,520
Agora todos ns sabemos o

7
00:00:12,520 --> 00:00:16,704
que so dicionrios, so livros gigantes que contm algumas entradas

8
00:00:16,704 --> 00:00:20,470
e cada entrada  associada  sua definio.

9
00:00:21,421 --> 00:00:24,768
Um dicionrio em Python  na verdade a mesma coisa.

10
00:00:24,768 --> 00:00:27,220
O dicionrio  semelhante a um conjunto, mas

11
00:00:27,220 --> 00:00:31,070
em vez de armazenar valores nicos como nmeros ou cadeias de caracteres, ele

12
00:00:31,070 --> 00:00:33,900
associa cada um desses valores a algo diferente, muito

13
00:00:33,900 --> 00:00:37,072
parecido com o que o dicionrio faz na vida real.

14
00:00:37,072 --> 00:00:40,950
Cada entrada tem um valor associado a ela, da mesma forma

15
00:00:40,950 --> 00:00:42,480
que em um dicionrio

16
00:00:42,480 --> 00:00:45,435
toda entrada possui um dicionrio associado a ela.

17
00:00:45,435 --> 00:00:49,260
Normalmente, isso no  conhecido como um par de valores

18
00:00:49,260 --> 00:00:52,860
de entrada, mas  conhecido como um par de valores-chave.

19
00:00:52,860 --> 00:00:56,170
Realmente importante, voc ver isso em todos os lugares no software

20
00:00:56,170 --> 00:00:58,240
 medida que avana na sua carreira.

21
00:00:58,240 --> 00:01:00,880
Os pares de valores-chave so extremamente populares

22
00:01:00,880 --> 00:01:03,830
e o dicionrio  apenas uma estrutura de

23
00:01:03,830 --> 00:01:07,100
dados que nos permite armazenar pares de valores-chave no Python.

24
00:01:08,141 --> 00:01:10,570
Por exemplo, vamos criar um dicionrio que associe

25
00:01:10,570 --> 00:01:13,140
cada um dos nomes dos nossos amigos com um

26
00:01:13,140 --> 00:01:16,330
nmero que descreve h quanto tempo os vimos pela ltima vez.

27
00:01:20,540 --> 00:01:22,190
Para mim eu vou dizer seis

28
00:01:23,221 --> 00:01:25,760
dias, para Rolf eu vou dizer 12 dias, e

29
00:01:25,760 --> 00:01:28,250
para Anne eu vou dizer seis dias tambm.

30
00:01:29,420 --> 00:01:33,350
Ok, agora temos este dicionrio dos meus amigos e observe

31
00:01:33,350 --> 00:01:36,040
como as chaves neste caso so strings

32
00:01:36,040 --> 00:01:37,690
descrevendo a pessoa.

33
00:01:38,720 --> 00:01:42,300
Temos um clon que diz que a coisa da

34
00:01:42,300 --> 00:01:46,420
direita est associada a essa chave e essa coisa  seis.

35
00:01:47,530 --> 00:01:50,550
Ento ns temos a chave que Jose tem o valor seis.

36
00:01:50,550 --> 00:01:52,370
Em seguida, temos uma vrgula

37
00:01:52,370 --> 00:01:56,490
que separa esse par de valores-chave desse par de valores-chave.

38
00:01:56,490 --> 00:01:58,390
Ento isso  uma coisa totalmente

39
00:01:58,390 --> 00:02:01,310
nova e este  um dos poucos casos

40
00:02:01,310 --> 00:02:03,500
em que ter um valor seguido

41
00:02:03,500 --> 00:02:05,820
por uma vrgula no lhe d tupla,

42
00:02:05,820 --> 00:02:09,470
ok, isso  apenas separao entre este par de valores-chave e

43
00:02:09,470 --> 00:02:10,303
este aqui.

44
00:02:10,303 --> 00:02:11,220
E Python  inteligente

45
00:02:11,220 --> 00:02:13,120
o suficiente para no lhe dar tuplas neste caso.

46
00:02:14,060 --> 00:02:14,900
Ento no se preocupe.

47
00:02:15,860 --> 00:02:18,810
Novamente, as mesmas restries so definidas,

48
00:02:18,810 --> 00:02:20,900
pois voc no pode ter

49
00:02:20,900 --> 00:02:23,640
duplicatas e no pode ter ordem.

50
00:02:23,640 --> 00:02:26,900
Mas as restries s se aplicam s chaves, ento

51
00:02:26,900 --> 00:02:28,580
Jos, Rolf e Anne.

52
00:02:29,610 --> 00:02:31,440
Como voc pode ver, temos seis e depois seis aqui.

53
00:02:31,440 --> 00:02:33,940
Como os valores no so restritos, voc

54
00:02:33,940 --> 00:02:36,938
pode ter os mesmos valores, pode ter valores

55
00:02:36,938 --> 00:02:39,810
ordenados, pode ter o que quiser no lado

56
00:02:39,810 --> 00:02:40,770
direito do clon.

57
00:02:40,770 --> 00:02:43,960
Voc simplesmente no pode duplicar e uma chave e

58
00:02:43,960 --> 00:02:45,410
eles no sero ordenados.

59
00:02:46,350 --> 00:02:49,880
No entanto, as operaes de conjunto que vimos no

60
00:02:49,880 --> 00:02:52,710
ltimo vdeo, como unio, interseo e diferena,

61
00:02:52,710 --> 00:02:54,940
no podem ser feitas no dicionrio.

62
00:02:54,940 --> 00:02:56,960
Voc no pode adicionar e subtrair dicionrios como

63
00:02:56,960 --> 00:02:58,090
voc pode com o conjunto.

64
00:03:01,110 --> 00:03:03,600
Agora, depois de ter seu dicionrio, voc

65
00:03:03,600 --> 00:03:06,670
pode colocar o que quiser no lado direito.

66
00:03:06,670 --> 00:03:10,552
Isso significa que voc pode redefinir meus amigos como

67
00:03:10,552 --> 00:03:15,460
sendo Jose e o valor pode ser o que voc quiser.

68
00:03:15,460 --> 00:03:17,140
Voc pode colocar uma lista

69
00:03:17,140 --> 00:03:20,590
aqui, voc pode colocar tuplas aqui, voc pode colocar conjuntos

70
00:03:20,590 --> 00:03:22,950
aqui ou voc pode at colocar dicionrios.

71
00:03:27,138 --> 00:03:30,324
Tudo bem, isso pode ficar confuso rapidamente, mas o

72
00:03:30,324 --> 00:03:33,810
que temos aqui  que o Jos chave est associado

73
00:03:33,810 --> 00:03:35,880
ao seu valor e esse valor

74
00:03:35,880 --> 00:03:38,200
tambm est no dicionrio com uma

75
00:03:38,200 --> 00:03:41,960
nica tecla vista pela ltima vez e o valor seis.

76
00:03:41,960 --> 00:03:44,740
Ento isso realmente significa exatamente o mesmo que tnhamos antes.

77
00:03:46,710 --> 00:03:49,300
Ento ns temos Rolf e seu

78
00:03:49,300 --> 00:03:53,150
valor vai ser algo completamente diferente, sobrenome Smith.

79
00:03:54,750 --> 00:03:56,490
Ok, ns vamos ter outro

80
00:03:56,490 --> 00:03:58,070
dicionrio associado ao Rolf.

81
00:03:58,070 --> 00:04:00,360
Ento o tipo  o mesmo que para

82
00:04:00,360 --> 00:04:02,600
Jos, temos um dicionrio aqui, um dicionrio l,

83
00:04:02,600 --> 00:04:04,220
mas agora o contedo  diferente.

84
00:04:04,220 --> 00:04:07,000
Este tem um sobrenome em vez de um ltimo visto.

85
00:04:07,000 --> 00:04:09,720
Isso  totalmente bom, o Python no se importa.

86
00:04:10,730 --> 00:04:13,870
E finalmente para Anne, vamos manter os seis.

87
00:04:13,870 --> 00:04:17,240
Ento, Anne vai ter apenas um nmero l.

88
00:04:17,240 --> 00:04:19,620
Isso  novamente, totalmente bem.

89
00:04:19,620 --> 00:04:22,750
Python no se importa, desde que voc tenha suas chaves l,

90
00:04:22,750 --> 00:04:25,750
voc pode colocar os valores que quiser no lado direito.

91
00:04:26,930 --> 00:04:30,930
Observe como os valores so cada objeto independente.

92
00:04:30,930 --> 00:04:32,250
Voc no precisa ter as

93
00:04:32,250 --> 00:04:33,490
mesmas chaves se elas forem

94
00:04:33,490 --> 00:04:35,040
dicionrios, embora possam ter as mesmas chaves.

95
00:04:35,040 --> 00:04:36,890
Ok, todo mundo poderia ter last_seen

96
00:04:36,890 --> 00:04:38,210
l, est tudo bem.

97
00:04:38,210 --> 00:04:40,060
Eles no precisam ser todos os dicionrios.

98
00:04:40,060 --> 00:04:42,150
Eles podem ser qualquer coisa que

99
00:04:42,150 --> 00:04:44,840
voc queira que eles sejam, porque o dicionrio

100
00:04:44,840 --> 00:04:48,350
mapeia novamente os valores e pode ser qualquer coisa em chaves.

101
00:04:48,350 --> 00:04:49,520
E essas so normalmente

102
00:04:49,520 --> 00:04:50,970
cordas, mas tambm podem ser nmeros.

103
00:04:53,220 --> 00:04:54,420
Vamos criar outra varivel

104
00:04:54,420 --> 00:04:57,360
e sero os jogadores, por exemplo, de uma loteria.

105
00:04:58,650 --> 00:05:00,700
E isso vai ser uma lista.

106
00:05:00,700 --> 00:05:05,109
Mas normalmente j vimos listas de nmeros assim,

107
00:05:05,109 --> 00:05:07,100
ou at de strings.

108
00:05:08,218 --> 00:05:09,440
Igual a.

109
00:05:10,870 --> 00:05:14,730
No entanto, tambm podemos colocar dicionrios dentro de uma lista,

110
00:05:15,720 --> 00:05:18,440
por exemplo, para descrever cada um dos

111
00:05:18,440 --> 00:05:21,200
jogadores e seus nmeros, que sero tuplas.

112
00:05:25,320 --> 00:05:27,660
Ento agora temos um elemento dentro da

113
00:05:27,660 --> 00:05:29,440
nossa lista, que  um dicionrio.

114
00:05:29,440 --> 00:05:31,550
Se isso ajudar, voc pode colocar este dicionrio

115
00:05:31,550 --> 00:05:34,341
em uma nica linha, mas eu acho que isso freqentemente

116
00:05:34,341 --> 00:05:37,440
torna as coisas um pouco menos legveis, e  por isso

117
00:05:37,440 --> 00:05:39,840
que eu gosto de t-las em vrias linhas, mas

118
00:05:39,840 --> 00:05:42,350
depende totalmente de voc o que voc quer fazer.

119
00:05:42,350 --> 00:05:43,560
Qualquer um deles funciona.

120
00:05:43,560 --> 00:05:45,900
Voc pode ver que o Python registra as coisas

121
00:05:45,900 --> 00:05:48,440
bem ali, apenas para sua legibilidade, o que  legal.

122
00:05:49,462 --> 00:05:53,130
Agora, e se quisermos adicionar outro elemento a

123
00:05:53,130 --> 00:05:55,250
essa lista, outro dicionrio.

124
00:05:55,250 --> 00:05:56,460
Como faramos isso?

125
00:05:59,750 --> 00:06:00,920
Tenho certeza que voc entendeu.

126
00:06:00,920 --> 00:06:03,350
Tudo o que voc precisa fazer  pensar neste dicionrio

127
00:06:03,350 --> 00:06:04,980
como o primeiro elemento de uma lista.

128
00:06:04,980 --> 00:06:08,160
Agora, o que acontece entre os elementos de uma lista?

129
00:06:09,290 --> 00:06:10,460
Sempre a vrgula.

130
00:06:11,440 --> 00:06:13,120
E ento voc pode colocar outro elemento.

131
00:06:20,280 --> 00:06:21,280
Algo parecido.

132
00:06:22,700 --> 00:06:25,740
Observe como entre pares de valores chave voc tem a vrgula.

133
00:06:26,640 --> 00:06:29,130
No final do dicionrio voc no tem a

134
00:06:29,130 --> 00:06:31,430
vrgula, mas voc tem a vrgula aps

135
00:06:31,430 --> 00:06:35,000
o dicionrio para que esses dois sejam elementos diferentes da lista.

136
00:06:40,934 --> 00:06:43,220
Ento, como vamos selecionar um desses jogadores?

137
00:06:43,220 --> 00:06:45,770
Imagine que o jogador 1 seja

138
00:06:45,770 --> 00:06:48,240
o primeiro jogador dessa lista.

139
00:06:48,240 --> 00:06:50,510
Eu ensinei a voc como fazer isso mais cedo.

140
00:06:50,510 --> 00:06:53,880
Como voc escolheria o primeiro jogador?

141
00:06:57,520 --> 00:06:58,860
Tenho certeza que voc acertou.

142
00:06:58,860 --> 00:07:01,880
Seria jogadores e ento voc usaria um

143
00:07:01,880 --> 00:07:05,450
subscrito e comearia zero para o primeiro jogador.

144
00:07:05,450 --> 00:07:07,500
Isso daria a voc este dicionrio aqui.

145
00:07:10,090 --> 00:07:14,560
Ento o jogador um agora  um dicionrio que tem duas

146
00:07:14,560 --> 00:07:15,980
chaves, nome e nmeros.

147
00:07:18,750 --> 00:07:22,740
Se quisssemos acessar qualquer chave em particular

148
00:07:22,740 --> 00:07:26,980
ou executar um valor desse dicionrio, poderamos faz-lo

149
00:07:26,980 --> 00:07:30,690
fazendo o player_one e, em seguida, usando

150
00:07:31,610 --> 00:07:33,473
colchetes novamente e

151
00:07:33,473 --> 00:07:37,560
colocando qualquer chave que quisermos acessar l dentro.

152
00:07:37,560 --> 00:07:39,200
Ento  bem parecido com

153
00:07:39,200 --> 00:07:41,530
a lista, mas ao invs de acessar

154
00:07:41,530 --> 00:07:45,510
o ndice, eu. e. zero para o primeiro

155
00:07:45,510 --> 00:07:47,210
elemento, um para o segundo

156
00:07:47,210 --> 00:07:49,879
elemento, agora podemos acessar a chave da qual

157
00:07:49,879 --> 00:07:52,740
queremos obter o valor, novamente dentro do colchete.

158
00:07:52,740 --> 00:07:54,300
Ento, o que isso nos daria?

159
00:07:58,030 --> 00:08:00,370
Voc estaria correto se dissesse Rolf,

160
00:08:00,370 --> 00:08:04,530
porque o valor associado ao nome  esta string aqui.

161
00:08:06,300 --> 00:08:09,920
 claro que se voc quisesse acessar os nmeros,

162
00:08:09,920 --> 00:08:11,810
bastaria clicar nos nmeros e,

163
00:08:13,640 --> 00:08:15,490
em seguida, os divulgaria aqui.

164
00:08:18,460 --> 00:08:20,970
E se voc quisesse adicionar todos os nmeros juntos?

165
00:08:20,970 --> 00:08:22,850
Isso no  algo que

166
00:08:22,850 --> 00:08:26,910
voc faria para uma loteria, mas talvez voc quisesse adicionar todos eles.

167
00:08:30,310 --> 00:08:32,640
Python vem com uma funo muito legal

168
00:08:33,500 --> 00:08:35,710
e eu disse a palavra funcionar l.

169
00:08:35,710 --> 00:08:37,610
Ns vamos olhar as funes muito em

170
00:08:37,610 --> 00:08:38,510
breve no prximo vdeo.

171
00:08:39,520 --> 00:08:44,520
Voc pode definir uma funo que aceita alguns nmeros

172
00:08:46,960 --> 00:08:49,680
e lhe d o total.

173
00:08:49,680 --> 00:08:52,210
Ento, nmeros de player_one.

174
00:08:54,740 --> 00:08:57,440
Player_one numbers  essa tupla aqui

175
00:08:58,300 --> 00:09:02,042
e se voc coloc-los dentro dos parnteses dessa

176
00:09:02,042 --> 00:09:03,600
soma, eles sero somados

177
00:09:03,600 --> 00:09:05,820
e isso dar a sada.

178
00:09:08,340 --> 00:09:09,220
Ento vamos fazer isso.

179
00:09:13,750 --> 00:09:16,570
E voc recebe 53 de volta, o que deve ser,

180
00:09:16,570 --> 00:09:18,660
esperanosamente, a soma de todas essas coisas.

181
00:09:18,660 --> 00:09:20,950
Ento, novamente voc pode ter soma e

182
00:09:20,950 --> 00:09:22,700
dentro dos colchetes voc pode

183
00:09:23,880 --> 00:09:26,550
colocar o que quiser e eles sero adicionados juntos.

184
00:09:28,320 --> 00:09:29,890
Ento  isso sobre dicionrios.

185
00:09:29,890 --> 00:09:31,950
Ns olhamos como podemos defini-los

186
00:09:31,950 --> 00:09:33,700
e os colocamos em listas.

187
00:09:33,700 --> 00:09:36,483
Podemos dar-lhes qualquer valor que desejemos para as chaves.

188
00:09:36,483 --> 00:09:39,920
E tambm ns olhamos para esta funo de soma aqui e eu

189
00:09:39,920 --> 00:09:41,330
sei que continuo dizendo funo,

190
00:09:41,330 --> 00:09:42,880
no se preocupe, vamos olhar

191
00:09:42,880 --> 00:09:44,883
funes muito em breve na prxima seo.

192
00:09:44,883 --> 00:09:48,080
E  isso para este vdeo.

193
00:09:48,080 --> 00:09:51,470
Dicionrios so fundamentais em Python

194
00:09:51,470 --> 00:09:53,140
e extremamente populares.

195
00:09:53,140 --> 00:09:56,738
Ns vamos us-los o tempo todo para armazenar dados.

196
00:09:56,738 --> 00:09:59,650
Podemos colocar esses dados em arquivos.

197
00:09:59,650 --> 00:10:01,510
Podemos colocar esses dados e envi-los pela internet.

198
00:10:01,510 --> 00:10:02,930
Essa  uma maneira muito popular de

199
00:10:02,930 --> 00:10:04,080
fazer as coisas com este dicionrio.

200
00:10:04,080 --> 00:10:06,801
E h muito mais usos para dicionrios.

201
00:10:06,801 --> 00:10:11,801
Ento, novamente, ns apenas aprendemos os blocos fundamentais

202
00:10:12,810 --> 00:10:14,810
do Python nesta

203
00:10:14,810 --> 00:10:16,627
seo, variveis, nmeros,

204
00:10:16,627 --> 00:10:19,992
strings, listas, dicionrios, conjuntos e tuplas.

205
00:10:19,992 --> 00:10:24,130
E agora estamos prontos para comear a construir isso.

206
00:10:24,130 --> 00:10:27,086
Ento voc tem essa camada bsica que

207
00:10:27,086 --> 00:10:32,040
 essencial, agora estamos prontos para avanar para coisas mais avanadas.

208
00:10:32,040 --> 00:10:34,980
Ento, com isso dito, vejo vocs no prximo vdeo.

