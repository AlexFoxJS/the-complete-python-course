1
00:00:00,080 --> 00:00:01,620
Jos: Ol, e bem vindo de volta.

2
00:00:01,620 --> 00:00:04,100
Nesta palestra estamos falando de

3
00:00:04,100 --> 00:00:05,710
entender HTML com BeautifulSoup.

4
00:00:06,820 --> 00:00:09,210
Agora que entendemos a estrutura do

5
00:00:09,210 --> 00:00:11,820
HTML, podemos dizer ao Python como entend-lo

6
00:00:11,820 --> 00:00:14,820
tambm e como extrair alguns dados dele.

7
00:00:14,820 --> 00:00:16,770
Como o HTML  to

8
00:00:16,770 --> 00:00:18,858
estruturado, sempre com suas tags de

9
00:00:18,858 --> 00:00:22,004
abertura e fechamento,  bastante simples obter dados dele.

10
00:00:22,004 --> 00:00:25,360
E como complemento, como parte desta palestra,

11
00:00:25,360 --> 00:00:28,285
tambm vamos instalar nossa primeira biblioteca.

12
00:00:28,285 --> 00:00:31,210
Como o Python no possui nenhuma funcionalidade

13
00:00:31,210 --> 00:00:35,020
para entender HTML, precisamos instalar uma biblioteca do lado

14
00:00:35,020 --> 00:00:37,610
de fora para fazer isso.

15
00:00:37,610 --> 00:00:39,410
Existem muitas bibliotecas Python.

16
00:00:39,410 --> 00:00:41,770
 um dos pontos fortes do Python, na verdade.

17
00:00:41,770 --> 00:00:43,750
Para fazer todo tipo de coisas.

18
00:00:43,750 --> 00:00:45,677
E entender HTML  um desses.

19
00:00:45,677 --> 00:00:47,620
Existem outras bibliotecas para coisas

20
00:00:47,620 --> 00:00:50,147
como fazer desenvolvimento web, cincia de

21
00:00:50,147 --> 00:00:54,070
dados, mostrando o Windows no seu monitor e coisas assim.

22
00:00:54,070 --> 00:00:57,460
H um monte de bibliotecas e vamos instalar uma.

23
00:00:57,460 --> 00:00:59,880
Para instalar sua biblioteca,

24
00:00:59,880 --> 00:01:04,880
precisamos ir at o PyCharm e encontrar suas preferncias.

25
00:01:06,230 --> 00:01:09,779
No Mac,  na edio da comunidade do PyCharm, preferncias, e eu acredito

26
00:01:09,779 --> 00:01:11,320
em janelas que esto sob o

27
00:01:11,320 --> 00:01:13,640
arquivo e est em algum lugar aqui embaixo.

28
00:01:13,640 --> 00:01:15,671
Ento, se voc vai para

29
00:01:15,671 --> 00:01:18,230
as suas preferncias, ento voc ser saudado

30
00:01:18,230 --> 00:01:21,550
com esta janela que voc pode ter visto antes.

31
00:01:21,550 --> 00:01:23,370
E aqui, h uma seo particularmente

32
00:01:23,370 --> 00:01:25,400
importante para a instalao de bibliotecas,

33
00:01:25,400 --> 00:01:27,280
e esse  o seu projeto.

34
00:01:27,280 --> 00:01:29,811
Em seu projeto, voc pode escolher

35
00:01:29,811 --> 00:01:34,811
seu interpretador de projeto e aqui voc ver a verso atual do

36
00:01:35,170 --> 00:01:36,540
Python que est executando.

37
00:01:36,540 --> 00:01:39,706
Ento, como voc pode ver, eu estou correndo 3. 6 0, porque no

38
00:01:39,706 --> 00:01:41,309
h muitas diferenas entre

39
00:01:41,309 --> 00:01:43,936
3. 6 0 e 3. 6 4, que  a verso atual.

40
00:01:43,936 --> 00:01:47,300
Mas se voc estiver usando 3. 7 ou algo assim, voc

41
00:01:47,300 --> 00:01:48,540
ver isso aqui.

42
00:01:49,470 --> 00:01:51,390
Ento aqui embaixo, voc ver todas as

43
00:01:51,390 --> 00:01:52,410
bibliotecas que voc instalou.

44
00:01:52,410 --> 00:01:53,910
 possvel que isso esteja vazio

45
00:01:53,910 --> 00:01:56,020
porque voc acabou de iniciar sua jornada em

46
00:01:56,020 --> 00:01:57,800
Python e no tem muitas coisas instaladas,

47
00:01:57,800 --> 00:01:58,808
e tudo bem.

48
00:01:58,808 --> 00:02:01,688
Agora existem outras maneiras de instalar bibliotecas

49
00:02:01,688 --> 00:02:03,700
alm do PyCharm, e vamos

50
00:02:03,700 --> 00:02:07,670
aprender como usar essas outras formas, mas no neste

51
00:02:07,670 --> 00:02:08,540
vdeo.

52
00:02:08,540 --> 00:02:10,350
Vamos mant-lo simples por agora, e

53
00:02:10,350 --> 00:02:11,890
nesta seo, vamos apenas instalar

54
00:02:11,890 --> 00:02:12,940
as coisas por aqui.

55
00:02:12,940 --> 00:02:14,713
Basta pressionar o cone mais, e

56
00:02:14,713 --> 00:02:16,745
aqui voc pode ver, todas essas

57
00:02:16,745 --> 00:02:18,922
coisas so bibliotecas Python que voc pode

58
00:02:18,922 --> 00:02:23,310
instalar, mas o Python no faz nenhum tipo de sanitizao, ento essas bibliotecas, voc

59
00:02:23,310 --> 00:02:25,643
realmente no sabe o que elas fazem.

60
00:02:25,643 --> 00:02:27,080
Eu recomendo que

61
00:02:27,080 --> 00:02:29,760
voc no v instalar bibliotecas aleatrias daqui.

62
00:02:29,760 --> 00:02:31,230
Certifique-se de saber o que

63
00:02:31,230 --> 00:02:34,180
voc quer antes de passar por isso e instalar qualquer coisa.

64
00:02:34,180 --> 00:02:38,060
E o que queremos  uma biblioteca chamada beautifulsoup4.

65
00:02:39,570 --> 00:02:40,761
 esse aqui.

66
00:02:40,761 --> 00:02:43,090
Observe como h dois

67
00:02:43,090 --> 00:02:46,590
no momento, beautifulsoup4-slurp e beautifulsoup4.

68
00:02:47,590 --> 00:02:50,060
Queremos instalar o beautifulsoup4.

69
00:02:50,060 --> 00:02:51,260
OK.

70
00:02:51,260 --> 00:02:53,000
H outros, como o

71
00:02:53,000 --> 00:02:55,570
BeautifulSoup e um monte de outros.

72
00:02:55,570 --> 00:02:57,570
Certifique-se de escolher beautifulsoup4.

73
00:02:58,610 --> 00:03:00,270
Este aqui  a verso trs.

74
00:03:00,270 --> 00:03:01,630
Voc no quer ir para

75
00:03:01,630 --> 00:03:05,050
isso, voc quer ir para o nmero quatro, ok, e depois instal-lo.

76
00:03:05,050 --> 00:03:06,440
Como eu j o instalei, minha

77
00:03:06,440 --> 00:03:08,420
biblioteca  azul, como voc pode ver, ento

78
00:03:08,420 --> 00:03:09,970
no preciso instalar novamente, mas tudo

79
00:03:09,970 --> 00:03:11,220
que voc precisa fazer 

80
00:03:11,220 --> 00:03:13,870
selecion-lo, e pressionar instal, e tudo deve ficar bem .

81
00:03:13,870 --> 00:03:15,870
Voc no precisa fazer mais nada.

82
00:03:15,870 --> 00:03:16,780
Uma vez feito

83
00:03:16,780 --> 00:03:17,920
isso, voc deve ver

84
00:03:17,920 --> 00:03:20,360
BeautifulSoup aparecer aqui como tem para mim, e ento

85
00:03:20,360 --> 00:03:22,420
isso significa que voc est pronto para us-lo.

86
00:03:22,420 --> 00:03:24,909
Pressione aplicar e, em seguida, tudo bem.

87
00:03:24,909 --> 00:03:27,400
Uma vez feito isso, podemos ir

88
00:03:27,400 --> 00:03:29,610
em frente e ver nosso primeiro

89
00:03:29,610 --> 00:03:32,730
exemplo de compreenso de HTML usando o BeautifulSoup.

90
00:03:32,730 --> 00:03:35,250
E tambm veremos exatamente o que a BeautifulSoup

91
00:03:35,250 --> 00:03:36,780
faz e por que queremos.

92
00:03:36,780 --> 00:03:38,670
Ento vamos criar um novo arquivo

93
00:03:38,670 --> 00:03:41,420
Python, e voc pode nome-lo, por exemplo, simple_HTML.

94
00:03:43,100 --> 00:03:45,620
O simple_HTML  porque neste primeiro exemplo,

95
00:03:46,677 --> 00:03:48,940
vamos ver alguns HTML razoavelmente simples

96
00:03:48,940 --> 00:03:51,810
que podemos entender com o BeautifulSoup, e no

97
00:03:51,810 --> 00:03:53,229
prximo exemplo vamos ver

98
00:03:53,229 --> 00:03:55,480
algo um pouco mais complicado.

99
00:03:55,480 --> 00:03:58,430
Ento o que o BeautifulSoup faz?

100
00:03:58,430 --> 00:04:01,130
Bem, vou criar uma varivel aqui, que

101
00:04:01,130 --> 00:04:02,540
 meu HTML simples,

102
00:04:02,540 --> 00:04:03,840
e estou baseando-o aqui.

103
00:04:05,160 --> 00:04:07,884
E veja como o HTML est estruturado em suas tags.

104
00:04:07,884 --> 00:04:11,850
Voc pode ver a tag HTML, a tag de fechamento em

105
00:04:11,850 --> 00:04:13,060
HTML e, dentro

106
00:04:13,060 --> 00:04:15,610
dessa tag, voc tem dois filhos, essencialmente.

107
00:04:15,610 --> 00:04:18,950
A tag head e a tag body.

108
00:04:18,950 --> 00:04:21,500
A tag body contm um monte

109
00:04:21,500 --> 00:04:24,300
de crianas, como h1, p, p

110
00:04:24,300 --> 00:04:25,801
aqui, essa aqui.

111
00:04:25,801 --> 00:04:29,623
A ul contm um monte de crianas, que so estas lis.

112
00:04:29,623 --> 00:04:33,524
Ul, a propsito, significa lista no ordenada.

113
00:04:33,524 --> 00:04:36,200
Li significa item de lista.

114
00:04:36,200 --> 00:04:38,640
J vimos h1 para o cabealho um

115
00:04:38,640 --> 00:04:40,570
e p para o pargrafo.

116
00:04:40,570 --> 00:04:41,890
Observe tambm como

117
00:04:41,890 --> 00:04:44,920
um desses pargrafos tem uma classe, subttulo.

118
00:04:44,920 --> 00:04:46,906
O que o BeautifulSoup

119
00:04:46,906 --> 00:04:50,680
pode fazer  entender melhor essa estrutura, e

120
00:04:50,680 --> 00:04:52,330
ela pode determinar que

121
00:04:52,330 --> 00:04:55,110
a cabea  filha de HTML

122
00:04:55,110 --> 00:04:58,260
e pode determinar que h dois pargrafos.

123
00:04:58,260 --> 00:05:01,370
Ele pode olhar para os atributos de elementos diferentes, como este

124
00:05:01,370 --> 00:05:03,050
subttulo, e tambm pode fazer coisas

125
00:05:03,050 --> 00:05:04,760
como pesquisar, ento voc pode dizer

126
00:05:04,760 --> 00:05:06,590
que eu estou procurando por um

127
00:05:06,590 --> 00:05:08,440
elemento que tenha subttulo de classe,

128
00:05:08,440 --> 00:05:10,870
e ele te dar essa tag p aqui.

129
00:05:11,720 --> 00:05:13,607
Ento, o BeautifulSoup 

130
00:05:13,607 --> 00:05:17,202
usado para entender e pesquisar por cdigo HTML.

131
00:05:17,202 --> 00:05:20,400
By the way, apenas para a integralidade, o

132
00:05:20,400 --> 00:05:23,709
HTML  muito semelhante a outra linguagem chamada XML.

133
00:05:23,709 --> 00:05:25,610
Eles parecem, essencialmente, idnticos, o

134
00:05:25,610 --> 00:05:27,490
que algumas pequenas diferenas.

135
00:05:27,490 --> 00:05:30,460
Ento o BeautifulSoup tambm pode ser usado para entender

136
00:05:30,460 --> 00:05:32,970
XML, no vamos olhar para isso neste

137
00:05:32,970 --> 00:05:35,000
vdeo, ou, de fato, neste curso.

138
00:05:35,000 --> 00:05:36,530
Ento, agora que temos

139
00:05:36,530 --> 00:05:38,150
nossa varivel, temos que

140
00:05:38,150 --> 00:05:41,180
incluir o BeautifulSoup em nosso arquivo para import-lo.

141
00:05:41,180 --> 00:05:43,238
E as importaes no Python devem, geralmente,

142
00:05:43,238 --> 00:05:44,520
ir no topo do arquivo.

143
00:05:44,520 --> 00:05:49,080
Ento vamos fazer do bs4 import BeautifulSoup.

144
00:05:50,250 --> 00:05:53,150
Perceba como no estamos usando o beautifulsoup4 em nenhum lugar?

145
00:05:53,150 --> 00:05:55,770
Estamos usando apenas o bs4.

146
00:05:55,770 --> 00:05:58,460
Isso porque a biblioteca BeautifulSoup foi codificada,

147
00:05:58,460 --> 00:06:01,650
foi programada para que a importao acontea assim.

148
00:06:01,650 --> 00:06:03,130
Outras bibliotecas so ligeiramente diferentes.

149
00:06:03,130 --> 00:06:03,963
Em outras

150
00:06:03,963 --> 00:06:05,050
bibliotecas, voc pode

151
00:06:05,050 --> 00:06:08,165
fazer algo como de beautifulsoup4 importar alguma

152
00:06:08,165 --> 00:06:10,721
coisa, mas no caso de beautifulsoup4,

153
00:06:10,721 --> 00:06:15,250
isso  incorreto, voc deve fazer de bs4 importar BeautifulSoup.

154
00:06:15,250 --> 00:06:16,170
 assim que  codificado.

155
00:06:16,170 --> 00:06:18,692
Isso no significa nada especfico.

156
00:06:18,692 --> 00:06:22,330
E ento ns vamos dar este HTML

157
00:06:22,330 --> 00:06:24,750
para o BeautifulSoup para anlise.

158
00:06:24,750 --> 00:06:26,870
A anlise  apenas um termo

159
00:06:26,870 --> 00:06:30,144
de programao para entender algo que tenha uma estrutura.

160
00:06:30,144 --> 00:06:32,500
Ento eu vou criar uma varivel chamada

161
00:06:32,500 --> 00:06:34,510
simple_soup para o nosso HTML simples,

162
00:06:34,510 --> 00:06:37,296
e vai ser o BeautifulSoup, e isso 

163
00:06:37,296 --> 00:06:40,640
uma classe, ento vamos instanciar um novo objeto dessa

164
00:06:40,640 --> 00:06:42,170
classe, vamos criar um

165
00:06:42,170 --> 00:06:45,802
novo objeto, e os argumentos tm que ser o HTML

166
00:06:45,802 --> 00:06:49,280
que voc quer analisar, e como um segundo argumento, voc

167
00:06:49,280 --> 00:06:54,000
deve dar a ele uma string do tipo de documento que , e

168
00:06:54,000 --> 00:06:58,110
este  um documento HTML, ento devemos dar a ele a

169
00:06:58,110 --> 00:06:59,450
string html. parser.

170
00:07:01,000 --> 00:07:03,116
Dessa forma, isso diz ao

171
00:07:03,116 --> 00:07:06,970
BeautifulSoup para usar o analisador html para entender este documento.

172
00:07:06,970 --> 00:07:08,277
E ento ele pode entender.

173
00:07:08,277 --> 00:07:13,220
Agora, o BeautifulSoup  capaz de passar por este documento e entend-lo

174
00:07:13,220 --> 00:07:15,469
completamente, para que possamos fazer coisas

175
00:07:15,469 --> 00:07:18,630
como imprimir o simple_soup. encontre h1.

176
00:07:20,874 --> 00:07:24,532
Observe como tudo o que estamos fazendo  acessar esse objeto

177
00:07:24,532 --> 00:07:26,156
de sopa, esse simples objeto

178
00:07:26,156 --> 00:07:28,920
de sopa, e acessar o mtodo find dentro dele,

179
00:07:28,920 --> 00:07:32,090
e dar a ele o que queremos encontrar como argumento.

180
00:07:32,090 --> 00:07:33,730
Nesse caso, o que queremos

181
00:07:33,730 --> 00:07:35,136
encontrar  esse cabealho.

182
00:07:35,136 --> 00:07:38,022
Como h apenas um nico ttulo na pgina,

183
00:07:38,022 --> 00:07:39,972
isso nos dar esse elemento.

184
00:07:39,972 --> 00:07:42,780
Ento o que eu vou fazer  seguir em frente e executar isso.

185
00:07:42,780 --> 00:07:47,780
E voc pode ver como isso nos d a tag que encontramos.

186
00:07:47,850 --> 00:07:50,630
H1, este  o ttulo e fecha h1.

187
00:07:52,290 --> 00:07:54,580
Se voc quiser encontrar o contedo

188
00:07:54,580 --> 00:07:55,830
da tag, ao

189
00:07:55,830 --> 00:07:58,240
contrrio da tag inteira, somente esse

190
00:07:58,240 --> 00:08:00,185
 um ttulo, voc pode

191
00:08:00,185 --> 00:08:02,400
fazer isso fazendo simple_soup. ache h1, essa 

192
00:08:02,400 --> 00:08:04,900
a tag que voc quer encontrar, e depois

193
00:08:04,900 --> 00:08:07,780
disso voc pode fazer. corda.

194
00:08:09,200 --> 00:08:11,470
E ento isso te d um ttulo.

195
00:08:12,820 --> 00:08:17,820
Observe como nossa tag h1  esse simple_soup. encontre h1, e esse 

196
00:08:19,022 --> 00:08:22,750
um objeto que tem essa propriedade aqui, string,

197
00:08:22,750 --> 00:08:24,840
que voc pode acessar.

198
00:08:24,840 --> 00:08:26,200
Nenhuma mgica est acontecendo aqui.

199
00:08:26,200 --> 00:08:28,328
Isso tudo exatamente o que vimos at

200
00:08:28,328 --> 00:08:32,110
agora em Python, estamos apenas instanciando novos objetos de tag de tipo,

201
00:08:32,110 --> 00:08:34,020
neste caso, e ento estamos acessando

202
00:08:34,020 --> 00:08:35,230
uma propriedade dessa tag.

203
00:08:37,210 --> 00:08:39,940
Se quisssemos extrair essa funcionalidade em

204
00:08:39,940 --> 00:08:43,080
uma funo, poderamos fazer isso,  claro.

205
00:08:43,080 --> 00:08:45,540
Ope, deletou muitas coisas l.

206
00:08:45,540 --> 00:08:47,150
Ou melhor, muitas coisas demais.

207
00:08:47,150 --> 00:08:49,700
Poderamos dizer algo como find_title, e

208
00:08:51,070 --> 00:08:53,720
isso poderia nos dar esse contedo aqui.

209
00:08:54,660 --> 00:08:57,340
Pep oito me pede para colocar duas linhas em branco

210
00:08:57,340 --> 00:08:59,365
antes de uma definio de funo, e

211
00:08:59,365 --> 00:09:00,768
ento podemos,  claro, encontrar

212
00:09:00,768 --> 00:09:01,601
o ttulo aqui.

213
00:09:01,601 --> 00:09:02,908
No precisamos imprimir, porque

214
00:09:02,908 --> 00:09:03,741
j est imprimindo.

215
00:09:03,741 --> 00:09:04,880
Quando corremos isso, percebemos que

216
00:09:04,880 --> 00:09:05,990
isso  uma telha.

217
00:09:08,640 --> 00:09:10,050
OK.

218
00:09:10,050 --> 00:09:11,320
Agora, outra coisa que

219
00:09:11,320 --> 00:09:14,990
podemos fazer , por exemplo, encontrar as diferentes coisas em uma lista.

220
00:09:14,990 --> 00:09:16,440
Vamos fazer isso agora.

221
00:09:16,440 --> 00:09:19,475
Ns vamos fazer find_list_items def,

222
00:09:19,475 --> 00:09:23,510
e esta funo vai imprimir Rolf, Charlie,

223
00:09:23,510 --> 00:09:25,450
Jen e Jose.

224
00:09:25,450 --> 00:09:28,861
Ento, vai e encontra esses itens da lista.

225
00:09:28,861 --> 00:09:33,168
O BeautifulSoup ir devolv-los como uma lista de tags, porque h

226
00:09:33,168 --> 00:09:36,320
muitos deles, e ento ns vamos pegar o

227
00:09:36,320 --> 00:09:39,000
contedo da string de cada um.

228
00:09:39,000 --> 00:09:40,130
OK.

229
00:09:40,130 --> 00:09:41,458
Ento o que vamos

230
00:09:41,458 --> 00:09:44,708
fazer  dizer list_items = simple_soup. encontrar tudo.

231
00:09:47,300 --> 00:09:49,480
E isso vai nos dar todas as

232
00:09:49,480 --> 00:09:50,450
tags, se houver

233
00:09:50,450 --> 00:09:52,870
muitas, encontrar s vai te dar uma.

234
00:09:52,870 --> 00:09:56,260
Ento vamos encontrar tudo e ento li.

235
00:09:56,260 --> 00:09:57,346
E o que

236
00:09:57,346 --> 00:10:01,170
isso vai fazer,  nos dar os itens da lista que encontramos.

237
00:10:01,170 --> 00:10:02,182
Vamos imprimi-los, s

238
00:10:02,182 --> 00:10:05,320
para voc ver exatamente o que est acontecendo,

239
00:10:05,320 --> 00:10:07,935
e vou chamar a funo aqui tambm.

240
00:10:07,935 --> 00:10:12,935
E agora observe como o BeautifulSoup nos d uma lista de tags,

241
00:10:13,020 --> 00:10:15,022
e cada tag  a

242
00:10:15,022 --> 00:10:18,080
lista itme, e inclui dentro dela, Rolf.

243
00:10:18,080 --> 00:10:22,040
Agora voc j sabe como extrair a string para cada um

244
00:10:22,040 --> 00:10:23,520
desses itens da lista.

245
00:10:23,520 --> 00:10:25,600
Voc pode usar uma compreenso de lista, por

246
00:10:25,600 --> 00:10:26,870
exemplo, para criar uma nova

247
00:10:26,870 --> 00:10:29,204
lista do contedo de string de cada tag.

248
00:10:29,204 --> 00:10:30,910
Voc pode ir e fazer isso agora.

249
00:10:35,090 --> 00:10:36,610
Tenho certeza que voc conseguiu.

250
00:10:36,610 --> 00:10:40,860
Tudo o que voc precisa fazer  dizer que list_contents  e. string, por exemplo,

251
00:10:40,860 --> 00:10:44,150
para e em list_items.

252
00:10:44,150 --> 00:10:46,870
E  a varivel que estamos criando para passar por

253
00:10:46,870 --> 00:10:49,580
cima de cada elemento em list_items, e estamos acessando a

254
00:10:49,580 --> 00:10:52,150
propriedade string dessa e colocando isso em uma nova lista,

255
00:10:52,150 --> 00:10:53,825
que  o contedo da lista.

256
00:10:53,825 --> 00:10:56,371
Agora, se imprimirmos o contedo da

257
00:10:56,371 --> 00:10:59,890
lista, voc pode ver que temos uma lista

258
00:10:59,890 --> 00:11:02,565
do contedo, Rolf, Charlie, Jen e Jose.

259
00:11:02,565 --> 00:11:04,450
OK.

260
00:11:05,410 --> 00:11:07,790
Vamos agora olhar para algo um pouco mais complicado.

261
00:11:07,790 --> 00:11:09,310
Vamos olhar para este pargrafo.

262
00:11:09,310 --> 00:11:11,283
Vamos encontrar o pargrafo.

263
00:11:11,283 --> 00:11:13,070
Observe como existem dois

264
00:11:13,070 --> 00:11:14,180
pargrafos, ento, para

265
00:11:14,180 --> 00:11:15,550
encontr-lo, vamos ter

266
00:11:15,550 --> 00:11:18,430
que dar algumas informaes  BeautifulSoup, alm

267
00:11:18,430 --> 00:11:20,079
de procurarmos um pargrafo.

268
00:11:20,079 --> 00:11:23,660
Ento, o que vamos fazer  dizer ao BeautifulSoup

269
00:11:23,660 --> 00:11:25,402
que estamos procurando por

270
00:11:25,402 --> 00:11:28,420
um pargrafo que tenha uma classe de legendas.

271
00:11:28,420 --> 00:11:31,820
Ento, estamos procurando por este, no este.

272
00:11:31,820 --> 00:11:33,400
Vamos fazer isso.

273
00:11:33,400 --> 00:11:35,503
Ns vamos definir uma nova funo, mais uma vez.

274
00:11:35,503 --> 00:11:36,670
Find_subtitle.

275
00:11:39,530 --> 00:11:44,483
E o que vamos fazer  simplesmente encontrar o pargrafo,

276
00:11:44,483 --> 00:11:47,508
que ser simple_soup. encontre e agora

277
00:11:47,508 --> 00:11:51,650
vamos dar a tag p que estamos procurando,

278
00:11:51,650 --> 00:11:52,830
e ento

279
00:11:52,830 --> 00:11:56,360
observe como o segundo argumento  um

280
00:11:56,360 --> 00:11:57,463
dicionrio attrs.

281
00:11:57,463 --> 00:12:02,463
Este dicionrio attrs  o atributo da tag

282
00:12:03,250 --> 00:12:04,870
que estamos procurando.

283
00:12:04,870 --> 00:12:06,310
Ento, se estamos procurando por

284
00:12:06,310 --> 00:12:07,600
algo que tenha uma

285
00:12:07,600 --> 00:12:09,220
classe, vamos dar um dicionrio

286
00:12:09,220 --> 00:12:10,790
que represente o que estamos procurando.

287
00:12:10,790 --> 00:12:14,330
Ento, neste caso, ser classe subttulo.

288
00:12:16,360 --> 00:12:20,200
Ok, ento podemos imprimir pargrafo. seqncia de caracteres e

289
00:12:20,200 --> 00:12:21,350
deve nos

290
00:12:21,350 --> 00:12:23,022
dar, uma vez

291
00:12:23,022 --> 00:12:26,980
que temos a funo, claro, nossa legenda l.

292
00:12:28,531 --> 00:12:29,364
E a voc tem isso.

293
00:12:29,364 --> 00:12:31,270
E  assim que voc pode

294
00:12:31,270 --> 00:12:33,760
encontrar algo que tenha um atributo para que

295
00:12:33,760 --> 00:12:35,680
voc possa detalhar uma entidade especfica

296
00:12:35,680 --> 00:12:38,270
em vez de uma tag mais geral.

297
00:12:38,270 --> 00:12:41,400
Se voc tem muitas tags p em

298
00:12:41,400 --> 00:12:44,300
seu cdigo, no seu cdigo HTML, voc

299
00:12:44,300 --> 00:12:47,210
pode querer reduzi-lo usando algum outro atributo,

300
00:12:47,210 --> 00:12:49,710
neste caso, estamos usando a classe.

301
00:12:49,710 --> 00:12:51,750
Note que este HTML  bastante

302
00:12:51,750 --> 00:12:54,340
simples, ento precisamos aprender um pouco mais

303
00:12:54,340 --> 00:12:55,950
sobre o BeautifulSoup se

304
00:12:55,950 --> 00:12:57,679
vamos fazer algo mais complicado.

305
00:12:57,679 --> 00:12:59,970
Falando de mais complicado, vamos

306
00:12:59,970 --> 00:13:01,969
agora encontrar o outro pargrafo.

307
00:13:01,969 --> 00:13:04,691
Observe como o BeautifulSoup no consegue

308
00:13:04,691 --> 00:13:08,810
encontrar o pargrafo em que a classe no  legvel.

309
00:13:08,810 --> 00:13:12,530
Mas o que podemos fazer  encontrar todos os

310
00:13:12,530 --> 00:13:16,450
pargrafos e depois remover aquele que tem essa classe.

311
00:13:16,450 --> 00:13:17,668
Ento vamos fazer isso.

312
00:13:17,668 --> 00:13:22,588
O que fazer  dizer find_other_paragraph, por

313
00:13:22,588 --> 00:13:23,587
exemplo.

314
00:13:23,587 --> 00:13:27,600
E ento ns vamos olhar todos os pargrafos, voc

315
00:13:27,600 --> 00:13:28,530
sabe como

316
00:13:28,530 --> 00:13:31,630
fazer este simple_soup. find_all p.

317
00:13:31,630 --> 00:13:33,670
Isso nos dar todos os pargrafos da mesma

318
00:13:33,670 --> 00:13:37,037
maneira que fazer isso aqui nos deu todos os itens da lista.

319
00:13:37,037 --> 00:13:39,773
E ento ns vamos fazer other_paragraph

320
00:13:39,773 --> 00:13:44,773
 p para p nos pargrafos se a legenda no

321
00:13:49,080 --> 00:13:54,080
estiver em p. attrs. obter aula.

322
00:13:57,798 --> 00:13:59,700
E vamos olhar para o que isso

323
00:13:59,700 --> 00:14:02,150
nos d e consertar isso em apenas um momento.

324
00:14:02,150 --> 00:14:04,770
E ento ns vamos imprimir o

325
00:14:04,770 --> 00:14:06,810
outro pargrafo zero. corda.

326
00:14:06,810 --> 00:14:08,400
Ento o que est acontecendo aqui?

327
00:14:08,400 --> 00:14:10,240
Isso no vai funcionar, a propsito.

328
00:14:10,240 --> 00:14:12,030
Mas vamos corrigir em apenas um momento.

329
00:14:12,030 --> 00:14:13,568
Ns estamos achando todos

330
00:14:13,568 --> 00:14:17,150
os pargrafos, ento ns vamos colocar o pargrafo

331
00:14:17,150 --> 00:14:21,050
inteiro dentro desta lista, que ns iteramos sobre os

332
00:14:21,050 --> 00:14:23,150
pargrafos que encontramos, mas ns

333
00:14:23,150 --> 00:14:25,270
s faremos isso se a

334
00:14:25,270 --> 00:14:26,860
string de legenda no

335
00:14:28,196 --> 00:14:30,936
estiver nos atributos do pargrafo. .

336
00:14:30,936 --> 00:14:35,754
E este ponto chegar aqui  uma maneira diferente de fazer isso.

337
00:14:35,754 --> 00:14:40,754
Ento p. attrs, os atributos de p,  um

338
00:14:41,321 --> 00:14:44,102
dicionrio, como vimos quando tentamos acess-lo aqui.

339
00:14:44,102 --> 00:14:47,410
O BeautifulSoup gosta desses atributos como um dicionrio.

340
00:14:47,410 --> 00:14:48,560
Portanto, os atributos

341
00:14:48,560 --> 00:14:51,840
so um dicionrio e podemos acess-los usando a notao

342
00:14:51,840 --> 00:14:54,060
de colchetes ou usando o mtodo get.

343
00:14:55,040 --> 00:14:56,750
O mtodo get tem um

344
00:14:56,750 --> 00:14:58,480
benefcio, ou seja, ele no

345
00:14:58,480 --> 00:15:00,582
gera um erro-chave se no conseguir encontr-lo.

346
00:15:00,582 --> 00:15:02,830
Em vez disso, no retorna nenhum.

347
00:15:02,830 --> 00:15:04,730
Ento, isso  um benefcio do mtodo get.

348
00:15:05,660 --> 00:15:06,930
No entanto, no funciona bem.

349
00:15:06,930 --> 00:15:08,420
Vamos correr e descobrir.

350
00:15:12,040 --> 00:15:12,873
E como voc pode

351
00:15:12,873 --> 00:15:13,990
ver, temos um erro aqui.

352
00:15:15,188 --> 00:15:17,880
E o erro  razovel, mas talvez no

353
00:15:17,880 --> 00:15:20,500
to bvio se voc no sabe exatamente

354
00:15:20,500 --> 00:15:23,436
o que est acontecendo nessa compreenso da lista.

355
00:15:23,436 --> 00:15:27,980
Por isso, diz erro de tipo, argumento do tipo

356
00:15:27,980 --> 00:15:29,961
NoneType no  itervel.

357
00:15:29,961 --> 00:15:31,178
OK.

358
00:15:31,178 --> 00:15:33,618
Ento, o que est acontecendo exatamente?

359
00:15:33,618 --> 00:15:36,967
Ns temos, evidentemente, algo que no  nada.

360
00:15:36,967 --> 00:15:39,400
E est nos dizendo que no  nada

361
00:15:39,400 --> 00:15:41,510
itervel, com o qual provavelmente podemos concordar,

362
00:15:41,510 --> 00:15:43,855
porque no  uma lista ou uma sequncia,

363
00:15:43,855 --> 00:15:44,700
ou qualquer coisa assim.

364
00:15:44,700 --> 00:15:47,160
E est dizendo que voc est tentando iterar sobre isso.

365
00:15:47,160 --> 00:15:48,853
O que estamos tentando fazer?

366
00:15:48,853 --> 00:15:50,820
No estamos interagindo com nada?

367
00:15:50,820 --> 00:15:52,420
Ento, existem duas opes.

368
00:15:52,420 --> 00:15:54,190
Pargrafos podem ser nenhum, e ento

369
00:15:54,190 --> 00:15:55,040
est dizendo para

370
00:15:55,040 --> 00:15:58,324
voc, voc no pode iterar sobre pargrafos porque no  nenhum.

371
00:15:58,324 --> 00:16:02,490
Ento, vamos trazer pargrafos e ver se esse  o problema.

372
00:16:02,490 --> 00:16:03,440
Vamos correr de novo.

373
00:16:05,620 --> 00:16:07,230
Voc pode ver que ns imprimimos

374
00:16:07,230 --> 00:16:09,435
os pargrafos, e encontramos ambos os pargrafos aqui.

375
00:16:09,435 --> 00:16:11,182
Ento esse no  o problema.

376
00:16:11,182 --> 00:16:13,701
Quando fazemos por p nos pargrafos,

377
00:16:13,701 --> 00:16:15,940
Python vai ficar bem com isso,

378
00:16:15,940 --> 00:16:17,800
porque estamos interagindo sobre pargrafos,

379
00:16:17,800 --> 00:16:19,370
pargrafos  uma lista,

380
00:16:19,370 --> 00:16:20,669
ento tudo bem.

381
00:16:20,669 --> 00:16:24,870
O nico outro exemplo que estamos usando est aqui,

382
00:16:24,870 --> 00:16:26,660
p. attrs. obter.

383
00:16:26,660 --> 00:16:30,019
E eu acabei de dizer que o mtodo get

384
00:16:30,019 --> 00:16:34,692
no retorna nenhum se no puder encontrar essa coisa no dicionrio, essa classe.

385
00:16:34,692 --> 00:16:38,830
Ento temos dois pargrafos.

386
00:16:38,830 --> 00:16:41,090
Um deles tem a

387
00:16:41,090 --> 00:16:43,020
classe, o outro no.

388
00:16:43,020 --> 00:16:45,049
Ento, para este

389
00:16:45,049 --> 00:16:50,049
pargrafo, p. attrs. obter aula no vai ser nada.

390
00:16:50,296 --> 00:16:54,458
E ento ns estamos verificando a legenda no em nenhum, e o que

391
00:16:54,458 --> 00:16:56,430
est fazendo em segundo plano, isso

392
00:16:56,430 --> 00:16:57,560
est passando por cima

393
00:16:57,560 --> 00:17:00,790
de cada elemento, e comparando a legenda com cada elemento,

394
00:17:00,790 --> 00:17:02,870
e dizendo se existe ou no.

395
00:17:02,870 --> 00:17:05,084
Ento, aqui tambm estamos fazendo

396
00:17:05,084 --> 00:17:10,084
iterao, s que  um pouco mais ofuscado pela sintaxe do Python.

397
00:17:10,740 --> 00:17:12,150
Mas est fazendo iteraes, e est

398
00:17:12,150 --> 00:17:15,550
dizendo isso, hey, p. attrs. Um pouco de classe no

399
00:17:15,550 --> 00:17:16,770
est lhe dando nada, e ento

400
00:17:16,770 --> 00:17:18,660
voc est checando se algo est nele, mas voc

401
00:17:18,660 --> 00:17:20,540
no pode verificar se algo est em nenhum, porque

402
00:17:20,540 --> 00:17:21,877
isso no faz nenhum sentido.

403
00:17:21,877 --> 00:17:23,281
Felizmente, o mtodo

404
00:17:23,281 --> 00:17:26,030
get nos permite fazer algo que

405
00:17:26,030 --> 00:17:27,647
 bastante til.

406
00:17:27,647 --> 00:17:29,417
Em vez de retornar

407
00:17:29,417 --> 00:17:31,240
nenhum, que  o

408
00:17:31,240 --> 00:17:33,069
padro, que , essencialmente,

409
00:17:33,069 --> 00:17:36,170
isso, podemos retornar outra coisa se

410
00:17:36,170 --> 00:17:38,930
no pudermos encontrar a coisa.

411
00:17:38,930 --> 00:17:39,763
Ento, o

412
00:17:39,763 --> 00:17:41,907
que vamos fazer  retornar uma

413
00:17:41,907 --> 00:17:44,410
lista vazia se no pudermos encontrar a

414
00:17:44,410 --> 00:17:45,550
classe neste dicionrio.

415
00:17:46,480 --> 00:17:48,480
Dessa forma, vamos verificar se a legenda

416
00:17:48,480 --> 00:17:51,093
no est em uma lista vazia, e sim em nenhuma.

417
00:17:51,093 --> 00:17:53,369
Vamos correr isso de novo.

418
00:17:53,369 --> 00:17:57,249
Agora voc pode ver como o encontramos.

419
00:17:57,249 --> 00:17:58,590
OK.

420
00:17:58,590 --> 00:18:00,820
Portanto,  importante que voc entenda exatamente o

421
00:18:00,820 --> 00:18:02,010
que est acontecendo em

422
00:18:02,010 --> 00:18:03,680
seu cdigo para poder depurar seus erros.

423
00:18:03,680 --> 00:18:05,722
Mas se voc no fizer isso, v em depurao.

424
00:18:05,722 --> 00:18:07,560
Ns sabemos como depurar agora.

425
00:18:07,560 --> 00:18:09,820
Coloque algumas declaraes de impresso tambm  um bom caminho.

426
00:18:09,820 --> 00:18:13,140
Ou, de fato, use o mdulo de registro que

427
00:18:13,140 --> 00:18:14,216
aprendemos para verific-lo.

428
00:18:14,216 --> 00:18:18,261
Agora, analisamos algumas anlises simples de HTML neste vdeo.

429
00:18:18,261 --> 00:18:22,720
Analisamos itens individuais, como h1.

430
00:18:22,720 --> 00:18:24,392
Analisamos vrios itens, como a lista.

431
00:18:24,392 --> 00:18:27,170
Ns olhamos para um item especfico, usando os

432
00:18:27,170 --> 00:18:30,080
atributos, encontrando com este dicionrio de atributos, e

433
00:18:30,080 --> 00:18:31,780
tambm olhamos para encontrar todos

434
00:18:31,780 --> 00:18:34,790
os elementos e, em seguida, removendo alguns usando

435
00:18:34,790 --> 00:18:36,830
este p. attrs.

436
00:18:37,945 --> 00:18:39,900
OK.

437
00:18:39,900 --> 00:18:41,330
No prximo vdeo, vamos olhar para

438
00:18:41,330 --> 00:18:43,390
algo um pouco mais complexo, ento fique comigo, e

439
00:18:43,390 --> 00:18:44,540
eu vou ver voc l.

