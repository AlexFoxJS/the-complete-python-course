1
00:00:00,120 --> 00:00:01,430
Narrador: Hola y bienvenido de nuevo.

2
00:00:01,430 --> 00:00:05,130
En este video estamos hablando de mtodos especiales.

3
00:00:05,130 --> 00:00:09,370
En una clase, como hemos visto, no todos los mtodos son iguales.

4
00:00:09,370 --> 00:00:10,990
Python a veces hace

5
00:00:10,990 --> 00:00:13,400
una distincin segn el nombre del mtodo.

6
00:00:13,400 --> 00:00:16,410
Aqu hay un ejemplo de uno de esos mtodos.

7
00:00:17,410 --> 00:00:19,930
Ese es el mtodo de def dunder init.

8
00:00:26,590 --> 00:00:28,936
El mtodo dunder init se

9
00:00:28,936 --> 00:00:31,300
llama cuando creas un nuevo objeto.

10
00:00:31,300 --> 00:00:34,660
El nuevo objeto en blanco se analiza a s mismo y

11
00:00:34,660 --> 00:00:36,610
el nombre es lo que pone

12
00:00:36,610 --> 00:00:38,810
dentro de los argumentos de los constructores.

13
00:00:39,960 --> 00:00:42,400
Y luego definimos una propiedad nueva como una

14
00:00:42,400 --> 00:00:45,390
autoestima y se ve en el valor de nuestro parmetro.

15
00:00:46,680 --> 00:00:50,900
Entonces el mtodo dunder init es un mtodo especial porque

16
00:00:50,900 --> 00:00:53,840
Python lo llama automticamente cuando creas un

17
00:00:54,760 --> 00:00:56,270
objeto, no tienes que

18
00:00:56,270 --> 00:00:57,380
llamarlo t mismo.

19
00:00:58,370 --> 00:01:01,930
As que aqu hay un par de otros mtodos interesantes y especiales.

20
00:01:01,930 --> 00:01:05,530
Antes que nada, definamos una lista de pelculas.

21
00:01:10,590 --> 00:01:12,310
Qu crees que va

22
00:01:12,310 --> 00:01:15,900
a pasar cuando imprima la clase de pelculas?

23
00:01:16,890 --> 00:01:19,780
Ahora, miramos imprimir la clase del estudiante

24
00:01:19,780 --> 00:01:22,960
ms temprano y se imprimi algo de estudiante.

25
00:01:22,960 --> 00:01:25,480
Cul es la clase de la pelcula?

26
00:01:27,440 --> 00:01:28,360
Es un error?

27
00:01:31,650 --> 00:01:34,824
Bueno, como pueden ver, obtenemos una lista de clases.

28
00:01:34,824 --> 00:01:36,560
Esa es una funcionalidad bastante extraa all.

29
00:01:36,560 --> 00:01:40,920
Esto significa que una lista es de alguna manera un objeto?

30
00:01:42,340 --> 00:01:47,280
S, casi todo en Python es un objeto.

31
00:01:47,280 --> 00:01:49,520
Y esta lista no es diferente.

32
00:01:49,520 --> 00:01:52,270
Solo que no hemos tenido que crearlo usando

33
00:01:52,270 --> 00:01:54,730
este constructor como los estudiantes escriben cosa.

34
00:01:55,590 --> 00:01:57,630
En cambio, Python lo cre automticamente

35
00:01:57,630 --> 00:01:59,800
para nosotros cuando usamos esta sintaxis.

36
00:02:00,760 --> 00:02:05,760
Puedes, por ejemplo, imprimir, hi dot class, y eso te

37
00:02:06,400 --> 00:02:10,140
dar una clase de cuerda, ver str.

38
00:02:11,920 --> 00:02:15,330
Entonces, todo es un objeto en Python.

39
00:02:16,450 --> 00:02:20,510
Qu significa para una lista ser un objeto?

40
00:02:20,510 --> 00:02:22,530
Bueno, significa que todo lo que

41
00:02:22,530 --> 00:02:26,070
podemos hacer con una lista, podemos hacerlo con nuestras propias clases.

42
00:02:27,713 --> 00:02:28,680
As que aqu hay un ejemplo.

43
00:02:28,680 --> 00:02:31,510
Podemos imprimir la len de pelculas.

44
00:02:33,010 --> 00:02:36,630
De acuerdo, ahora sabemos que las pelculas son un objeto.

45
00:02:36,630 --> 00:02:38,400
Entonces, qu est pasando entre

46
00:02:38,400 --> 00:02:42,520
bastidores que nos permite llamar a esta funcin len, darle el

47
00:02:42,520 --> 00:02:46,030
objeto de pelculas y nos ha dado dos?

48
00:02:47,720 --> 00:02:49,350
Bueno, hagmoslo.

49
00:02:50,345 --> 00:02:51,540
Vamos a crear un garaje de clase.

50
00:02:53,473 --> 00:02:56,500
Y en l vamos a definir un mtodo init.

51
00:02:56,500 --> 00:03:00,070
Eso va a definir autos auto dot para ser una lista vaca.

52
00:03:03,904 --> 00:03:05,780
Ahora, podemos crear nuestro garaje, digamos que

53
00:03:07,028 --> 00:03:08,350
Ford estar en el garaje.

54
00:03:09,270 --> 00:03:13,720
Y ahora este Ford tiene un Ford. autos tiene esta propiedad de

55
00:03:13,720 --> 00:03:17,920
autos aqu, que imprimir una lista vaca cuando la

56
00:03:17,920 --> 00:03:20,515
imprimamos, porque eso es lo que

57
00:03:20,515 --> 00:03:22,320
le hemos asignado.

58
00:03:22,320 --> 00:03:27,320
Sin embargo, podemos agregar, podemos decir Ford. carros. Aadir fiesta.

59
00:03:28,280 --> 00:03:33,280
Y Ford. carros. anexar foco por ejemplo.

60
00:03:33,400 --> 00:03:34,940
Luego, cuando ejecutamos este programa

61
00:03:34,940 --> 00:03:38,360
nuevamente, ahora obtenemos una lista de dos elementos, fiesta y enfoque.

62
00:03:40,570 --> 00:03:45,570
Ahora que pasara si quisiera hacer len de Ford.

63
00:03:46,330 --> 00:03:47,960
Ford es el nico en el

64
00:03:47,960 --> 00:03:50,270
garaje, pero quiero obtener el dinero de Ford, porque

65
00:03:50,270 --> 00:03:53,510
eso me va a decir cuntos autos hay dentro de mi garaje.

66
00:03:54,800 --> 00:03:59,470
Por supuesto, cuando ejecutamos esto, obtenemos un error de tipo.

67
00:03:59,470 --> 00:04:02,380
Objeto del tipo garage no tiene len

68
00:04:02,380 --> 00:04:04,080
De acuerdo, ese es un error interesante.

69
00:04:05,440 --> 00:04:08,480
Nos dice que Python no puede calcular el tamao

70
00:04:08,480 --> 00:04:09,870
de este garaje, porque

71
00:04:09,870 --> 00:04:11,790
no sabe qu significa el gabinete

72
00:04:11,790 --> 00:04:13,990
del garaje, ni siquiera lo que significa.

73
00:04:15,430 --> 00:04:18,720
Entonces, para decirle a Python que este

74
00:04:18,720 --> 00:04:23,720
garaje tiene una longitud, tenemos que definir otro mtodo dunder.

75
00:04:24,050 --> 00:04:26,901
Y eso es guin bajo subrayar guin bajo subrayar.

76
00:04:26,901 --> 00:04:30,830
Nuevamente te lleva a uno mismo, como lo hacen todos los mtodos y luego

77
00:04:31,779 --> 00:04:33,900
tiene que devolver la longitud del garaje.

78
00:04:33,900 --> 00:04:36,860
En este caso, cuntos carros hay.

79
00:04:36,860 --> 00:04:39,450
As que va a devolver la longitud de uno mismo. carros.

80
00:04:40,760 --> 00:04:42,700
Ahora, cuando ejecutemos este programa nuevamente, veremos que

81
00:04:42,700 --> 00:04:44,470
se imprimen dos, a pesar de que

82
00:04:44,470 --> 00:04:46,880
hemos llamado a len de Ford nuestro objeto de

83
00:04:47,941 --> 00:04:51,210
garaje en lugar de a Ford. carros.

84
00:04:52,540 --> 00:04:55,070
Eso es porque cuando llamamos a len, Ford

85
00:04:55,070 --> 00:04:58,280
viene aqu, a nosotros mismos, y luego devolvemos la longitud

86
00:04:58,280 --> 00:05:00,680
de uno mismo. carros.

87
00:05:02,080 --> 00:05:06,320
La lista tambin tiene este mtodo dunder len que

88
00:05:06,320 --> 00:05:10,970
nos da la cantidad de elementos en la lista.

89
00:05:10,970 --> 00:05:15,180
Esa es solo una definicin un poco ms complicada, pero no

90
00:05:15,180 --> 00:05:17,080
obstante, lo que tenemos que

91
00:05:17,080 --> 00:05:19,980
saber es que este mtodo de len

92
00:05:19,980 --> 00:05:22,330
dunder nos permite hacer algo y

93
00:05:22,330 --> 00:05:24,580
devolver un valor que obtenemos cuando

94
00:05:24,580 --> 00:05:27,680
llamamos a la funcin len en nuestro objeto.

95
00:05:31,550 --> 00:05:36,550
Hagamos algo como, por ejemplo, ford zero.

96
00:05:38,580 --> 00:05:41,500
Ford cero debera darnos el primer auto en la

97
00:05:41,500 --> 00:05:43,230
fila de autos con el

98
00:05:43,230 --> 00:05:44,500
que trabajamos, por ejemplo.

99
00:05:44,500 --> 00:05:45,770
En este caso, debera ser

100
00:05:45,770 --> 00:05:48,180
fiesta porque ese es el primer automvil que agregamos.

101
00:05:48,180 --> 00:05:50,760
Por supuesto, si ejecutamos esto, conseguiremos que el

102
00:05:50,760 --> 00:05:53,860
objeto de garaje no sea compatible con la indexacin.

103
00:05:53,860 --> 00:05:56,440
Recuerde, esto es acceder a algo por un

104
00:05:56,440 --> 00:05:57,900
ndice, Python lo llama indexacin.

105
00:05:58,970 --> 00:06:00,160
Qu hacer?

106
00:06:00,160 --> 00:06:03,280
Bueno, ya lo adivinaste, definiremos otro mtodo dunder.

107
00:06:04,150 --> 00:06:06,100
Aqu hay un desafo para ti.

108
00:06:06,100 --> 00:06:08,280
Detenga el video e

109
00:06:08,280 --> 00:06:12,510
investigue cmo puede indexar su propio objeto personalizado.

110
00:06:12,510 --> 00:06:14,720
Va a ser un desafo, un poco complicado, pero

111
00:06:14,720 --> 00:06:16,070
estoy seguro de que puedes hacerlo.

112
00:06:19,090 --> 00:06:21,100
De acuerdo, estoy seguro de que tienes eso.

113
00:06:21,100 --> 00:06:23,420
Tenemos que definir un nuevo mtodo dunder.

114
00:06:24,540 --> 00:06:26,540
Y esta vez se llama obtener artculo.

115
00:06:27,850 --> 00:06:30,170
Y se necesita uno por supuesto, el

116
00:06:30,170 --> 00:06:31,910
objeto que estamos llamando a esto.

117
00:06:31,910 --> 00:06:36,410
Y tambin lleva el ndice al que estamos tratando de acceder, i.

118
00:06:37,280 --> 00:06:39,280
As que recuerda, esta es

119
00:06:39,280 --> 00:06:44,280
solo otra forma de llamar a Ford. getitem, con vado,

120
00:06:44,560 --> 00:06:49,090
lo siento, garaje. getitem con Ford y cero.

121
00:06:50,330 --> 00:06:54,240
De acuerdo, esto es azcar sintctico para esto.

122
00:06:55,867 --> 00:06:56,860
Lo que estamos haciendo

123
00:06:56,860 --> 00:06:59,230
es llamar a los get i's y a la funcin

124
00:06:59,230 --> 00:07:00,820
de la clase garage y estamos analizando

125
00:07:00,820 --> 00:07:02,770
el objeto ford que hemos creado y el

126
00:07:02,770 --> 00:07:04,730
ndice al que queremos acceder, que es cero.

127
00:07:04,730 --> 00:07:09,730
Y todo lo que tenemos que hacer es regresar a uno mismo. carros. yo, entonces el

128
00:07:10,000 --> 00:07:11,480
auto es yo.

129
00:07:12,320 --> 00:07:15,000
Y eso nos dar el ndice

130
00:07:15,000 --> 00:07:17,310
del yo. lista de autos

131
00:07:17,310 --> 00:07:18,143
Vamos a ejecutarlo.

132
00:07:19,877 --> 00:07:22,970
Y ah lo tienen, recuperamos la fiesta.

133
00:07:22,970 --> 00:07:26,270
Estos son dos mtodos muy importantes que

134
00:07:26,270 --> 00:07:29,820
pueden ser muy tiles en muchas circunstancias.

135
00:07:29,820 --> 00:07:33,734
Siempre que quiera un objeto que almacenar cosas

136
00:07:33,734 --> 00:07:37,550
y que puede acceder, estos dos mtodos pueden

137
00:07:37,550 --> 00:07:38,900
ser bastante tiles.

138
00:07:38,900 --> 00:07:42,130
Ahora, tan pronto como haya implementado los

139
00:07:42,130 --> 00:07:46,340
mtodos len y get item, se desbloquea una nueva funcionalidad.

140
00:07:46,340 --> 00:07:50,380
Y eso es, que puede iterar sobre su garaje.

141
00:07:51,880 --> 00:07:54,270
Puedes usar un bucle de cuatro en tu garaje.

142
00:07:54,270 --> 00:07:57,850
Pero solo cuando tienes estos dos mtodos definidos.

143
00:07:57,850 --> 00:07:59,160
Porque Python usar estos

144
00:07:59,160 --> 00:08:01,200
dos mtodos en el fondo del

145
00:08:01,200 --> 00:08:03,070
bucle ford para iterar sobre l.

146
00:08:04,420 --> 00:08:07,180
Y ah lo tienes, obtienes fiesta y concentracin.

147
00:08:09,090 --> 00:08:10,790
Entonces son algunas cosas geniales.

148
00:08:10,790 --> 00:08:12,500
La primera vez

149
00:08:12,500 --> 00:08:16,710
que supe esto, perdon la expresin, estupefacto.

150
00:08:16,710 --> 00:08:19,776
Porque realmente no saba mucho acerca de

151
00:08:19,776 --> 00:08:23,070
estos mtodos dunder, y es bastante interesante, porque

152
00:08:23,070 --> 00:08:25,110
todo lo que puedes hacer

153
00:08:25,110 --> 00:08:28,930
en Python, todas las funciones integradas como len y

154
00:08:28,930 --> 00:08:31,460
algunas, y todas las construcciones como

155
00:08:31,460 --> 00:08:35,790
for, estn construidas sobre objetos que tienen estos mtodos especiales.

156
00:08:36,660 --> 00:08:39,440
Y entonces aprender sobre esto es realmente emocionante.

157
00:08:39,440 --> 00:08:43,160
Y aprenderemos acerca de ellos a medida que avanzamos en el curso.

158
00:08:43,160 --> 00:08:47,130
Pero quera darte otros dos mtodos especiales,

159
00:08:50,316 --> 00:08:53,620
de hecho, que son los dunder

160
00:08:53,620 --> 00:08:55,520
repr y dunder string.

161
00:08:56,390 --> 00:08:58,870
As que implementemos dunder repr.

162
00:08:58,870 --> 00:09:01,430
As es como defines la repr.

163
00:09:01,430 --> 00:09:04,080
Y esta repr se debe usar para

164
00:09:04,080 --> 00:09:06,950
imprimir una cadena que representa el objeto.

165
00:09:08,530 --> 00:09:11,770
Entonces, una vez ms, pongmonos aqu.

166
00:09:11,770 --> 00:09:15,390
Y podemos regresar, lo siento, dije que esto debera usarse para imprimir

167
00:09:15,390 --> 00:09:17,240
una cadena, eso es una mentira.

168
00:09:17,240 --> 00:09:18,850
Debera usarse para devolver una

169
00:09:18,850 --> 00:09:20,350
cadena, que representa el objeto.

170
00:09:22,357 --> 00:09:26,770
Entonces podemos definir esto como un garaje.

171
00:09:26,770 --> 00:09:28,930
Y dentro de eso nos vamos a poner. carros.

172
00:09:30,180 --> 00:09:32,680
Eso realmente representa nuestro garaje.

173
00:09:32,680 --> 00:09:34,680
Es un objeto de garaje y tiene

174
00:09:34,680 --> 00:09:36,230
esta lista de autos dentro.

175
00:09:39,740 --> 00:09:44,470
La cadena dunder se debe usar para devolver una

176
00:09:44,470 --> 00:09:49,130
cadena que le indique al usuario cierta informacin sobre

177
00:09:49,130 --> 00:09:50,810
este garaje, de

178
00:09:50,810 --> 00:09:54,610
modo que si imprimiera el objeto, el

179
00:09:54,610 --> 00:09:57,850
usuario podra obtener informacin til sobre

180
00:09:57,850 --> 00:10:00,010
el garaje que est imprimiendo.

181
00:10:01,550 --> 00:10:04,034
Entonces, en este caso, deberamos devolver algo as como f.

182
00:10:04,034 --> 00:10:09,034
Y garaje con len de auto autos.

183
00:10:12,320 --> 00:10:15,070
Observe cmo el repr, el dunder

184
00:10:15,070 --> 00:10:19,410
repr devuelve una especie de versin codificada de este garaje.

185
00:10:19,410 --> 00:10:20,730
Incluye todo lo

186
00:10:20,730 --> 00:10:23,140
que necesitamos para representar este objeto.

187
00:10:23,140 --> 00:10:26,880
Y el mtodo str convierte algo que un usuario

188
00:10:26,880 --> 00:10:28,390
podra querer leer.

189
00:10:28,390 --> 00:10:30,740
Esa es realmente la diferencia entre estos dos.

190
00:10:32,446 --> 00:10:34,260
Observe cmo aqu hemos accedido a len de uno mismo.

191
00:10:34,260 --> 00:10:36,690
Me encanta esto, el yo es el objeto.

192
00:10:36,690 --> 00:10:38,390
As que cuando llamas a s

193
00:10:38,390 --> 00:10:41,330
mismo, realmente ests llamando al mtodo Len que definiste aqu.

194
00:10:42,670 --> 00:10:46,830
Ahora cuando imprimes Ford aqu, ves que

195
00:10:48,360 --> 00:10:52,020
se usa str, garage con dos autos.

196
00:10:53,590 --> 00:10:57,010
Entonces, cundo se usa el mtodo dunder repr?

197
00:10:58,440 --> 00:11:00,482
El mtodo dunder

198
00:11:00,482 --> 00:11:04,770
repr se usa particularmente cuando ests codificando.

199
00:11:04,770 --> 00:11:06,640
Cuando usas un depurador, vamos

200
00:11:06,640 --> 00:11:09,670
a aprender qu es eso en unas pocas

201
00:11:09,670 --> 00:11:11,960
sesiones, puede ser realmente til para

202
00:11:11,960 --> 00:11:15,150
que veas el objeto y comprendas exactamente de

203
00:11:15,150 --> 00:11:18,340
qu est compuesto, en este caso autos.

204
00:11:18,340 --> 00:11:19,950
A medida que investigamos la depuracin,

205
00:11:19,950 --> 00:11:23,780
vamos a ver ms sobre la funcin de repr y por qu puede ser til.

206
00:11:23,780 --> 00:11:25,720
As que no te preocupes demasiado por el

207
00:11:25,720 --> 00:11:27,080
momento, solo debes saber que

208
00:11:27,080 --> 00:11:30,660
la funcin str puede ser realmente til cuando se imprimen cosas a un usuario.

209
00:11:30,660 --> 00:11:33,620
Sin embargo, si solo va a implementar

210
00:11:33,620 --> 00:11:36,710
uno de estos dos, elija la repr.

211
00:11:38,080 --> 00:11:41,220
Puedes simplemente borrar la repr.

212
00:11:41,220 --> 00:11:46,220
Puede convertir el str en un repr, eliminar esta repr aqu.

213
00:11:48,730 --> 00:11:51,310
Y haz que se imprima algo que un usuario querr ver.

214
00:11:51,310 --> 00:11:52,830
Y este es un mejor enfoque,

215
00:11:52,830 --> 00:11:55,090
cuando ahora imprime ford, va a llamar a

216
00:11:56,270 --> 00:11:59,024
la funcin repr en lugar de a la funcin str.

217
00:11:59,024 --> 00:12:00,450
Porque repr es un poco ms importante.

218
00:12:00,450 --> 00:12:03,660
Entonces, si solo vas a implementar uno, implementa la repr.

219
00:12:03,660 --> 00:12:07,030
Pero, por supuesto, si puede implementar tanto uno para

220
00:12:07,030 --> 00:12:10,840
una descripcin ms orientada al cdigo, y el otro para

221
00:12:10,840 --> 00:12:13,570
una descripcin ms orientada al usuario, esto

222
00:12:13,570 --> 00:12:14,790
es mucho mejor.

223
00:12:15,670 --> 00:12:18,310
Soy un firme defensor de que cada

224
00:12:18,310 --> 00:12:23,000
clase que crees debe tener un mtodo repr y un mtodo str.

225
00:12:25,160 --> 00:12:27,290
Hay muchos ms mtodos de

226
00:12:27,290 --> 00:12:32,020
dunder mgico que puede implementar, incluidos algunos para agregar objetos juntos.

227
00:12:32,020 --> 00:12:34,660
Despus de todo, los enteros tambin son objetos.

228
00:12:34,660 --> 00:12:37,420
Puede sobrecargar lo que hacen los operadores booleanos.

229
00:12:37,420 --> 00:12:39,700
Puedes hacer que tus objetos sean llamables.

230
00:12:39,700 --> 00:12:41,930
Y puede hacer cosas como agregar administradores de contexto.

231
00:12:41,930 --> 00:12:44,330
Vamos a ver qu son esos, y mucho, mucho ms.

232
00:12:44,330 --> 00:12:45,940
Aprenderemos sobre muchos de estos

233
00:12:45,940 --> 00:12:47,470
mtodos dunder a lo largo

234
00:12:47,470 --> 00:12:49,870
del curso porque, una vez ms, es el

235
00:12:49,870 --> 00:12:51,980
curso ms completo de Python que puede tomar.

236
00:12:51,980 --> 00:12:54,890
As que quiero cubrir todo sobre Python.

237
00:12:55,810 --> 00:12:56,690
Eso es todo por este video.

238
00:12:56,690 --> 00:12:58,140
S que se est haciendo un

239
00:12:58,140 --> 00:13:00,020
poco ms avanzado, as que todava ests conmigo.

240
00:13:00,020 --> 00:13:01,730
Cuando consigamos construir nuestro prximo

241
00:13:01,730 --> 00:13:04,490
proyecto, todo va a ser un poco ms claro.

242
00:13:04,490 --> 00:13:05,690
Entonces eso es todo por este video.

243
00:13:05,690 --> 00:13:07,140
Te ver en el prximo.

