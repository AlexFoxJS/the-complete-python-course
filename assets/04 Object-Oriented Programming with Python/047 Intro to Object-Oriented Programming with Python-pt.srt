1
00:00:00,220 --> 00:00:01,620
Jose: Ol e bem vindo de volta.

2
00:00:01,620 --> 00:00:03,880
Neste vdeo, estamos falando de

3
00:00:03,880 --> 00:00:07,740
dicionrios e objetos e vamos apresentar este conceito

4
00:00:07,740 --> 00:00:09,890
de programao orientada a objetos.

5
00:00:12,070 --> 00:00:14,140
Agora, do jeito que eu planejei apresentar isso

6
00:00:14,140 --> 00:00:16,230
para voc, eu estou muito feliz com isso.

7
00:00:16,230 --> 00:00:18,570
Eu acho que vai ser bem compreensvel.

8
00:00:18,570 --> 00:00:21,670
Ento vamos em frente e ver como isso acontece.

9
00:00:23,230 --> 00:00:26,400
Ns olhamos para dicionrios como coisas que

10
00:00:26,400 --> 00:00:29,840
podemos usar para representar coisas em nosso programa.

11
00:00:31,260 --> 00:00:34,050
Por exemplo, podemos ter um dicionrio que

12
00:00:34,050 --> 00:00:36,970
representa um aluno e podemos dizer que

13
00:00:36,970 --> 00:00:39,660
meu aluno  igual a esse

14
00:00:42,030 --> 00:00:47,030
novo dicionrio, tem um nome e potencialmente tem algumas notas, algo assim.

15
00:00:48,380 --> 00:00:52,730
Agora, em nosso programa, este dicionrio representa o que pensamos de

16
00:00:52,730 --> 00:00:56,040
um aluno, e em outras partes do nosso

17
00:00:56,040 --> 00:00:58,460
programa, podemos fazer coisas como imprimir

18
00:00:58,460 --> 00:01:00,680
o nome do aluno ou calcular

19
00:01:00,680 --> 00:01:03,491
a nota mdia do aluno e usar

20
00:01:03,491 --> 00:01:07,500
este dicionrio como se fosse um aluno, embora, claro, sabemos

21
00:01:07,500 --> 00:01:10,007
que os verdadeiros estudantes no mundo

22
00:01:10,007 --> 00:01:12,724
real tm muito mais propriedades, como um

23
00:01:12,724 --> 00:01:16,078
endereo, e voc conhece uma famlia e coisas assim.

24
00:01:16,078 --> 00:01:19,760
Em nosso programa, no nos importamos com essas outras propriedades, apenas nos

25
00:01:19,760 --> 00:01:22,159
preocupamos com as propriedades que vamos usar.

26
00:01:22,159 --> 00:01:25,575
Ento, no nosso programa, este dicionrio pode representar um aluno.

27
00:01:25,575 --> 00:01:28,650
E se expandirmos nosso programa e precisarmos de

28
00:01:28,650 --> 00:01:31,240
mais propriedades, sempre poderemos modificar a estrutura

29
00:01:31,240 --> 00:01:33,050
desse dicionrio e adicion-lo.

30
00:01:35,140 --> 00:01:37,720
E esse conceito de ter algo que representa uma

31
00:01:37,720 --> 00:01:40,967
entidade do mundo real  bastante poderoso em programao e nos

32
00:01:40,967 --> 00:01:43,898
permite comear a pensar em nossos programas em termos do

33
00:01:43,898 --> 00:01:47,140
que eles fazem em oposio a como eles fazem isso.

34
00:01:49,800 --> 00:01:52,370
Vamos seguir em frente e assumir que queremos

35
00:01:52,370 --> 00:01:55,360
calcular a nota mdia deste aluno para que possamos, por

36
00:01:55,360 --> 00:01:58,610
exemplo, coloc-lo em algum tipo de relatrio em algum lugar.

37
00:01:58,610 --> 00:02:01,190
Eu acho que voc j pode calcular a nota mdia

38
00:02:01,190 --> 00:02:03,330
deste aluno com bastante facilidade, ento eu vou

39
00:02:03,330 --> 00:02:05,750
pedir para voc pausar o vdeo e dar um presente.

40
00:02:05,750 --> 00:02:08,306
Tente implementar uma funo que

41
00:02:08,306 --> 00:02:11,980
retornar a nota mdia deste dicionrio do aluno.

42
00:02:14,230 --> 00:02:15,290
Eu espero que voc tenha isso.

43
00:02:15,290 --> 00:02:17,660
O que vamos fazer 

44
00:02:17,660 --> 00:02:20,090
definir uma funo de nota mdia.

45
00:02:20,090 --> 00:02:22,090
Vai levar um parmetro que

46
00:02:22,090 --> 00:02:25,093
vai ser o aluno, ento dois pontos no

47
00:02:25,093 --> 00:02:27,850
final do curso e tudo o que

48
00:02:27,850 --> 00:02:30,433
vai fazer  somar as notas que

49
00:02:30,433 --> 00:02:34,545
vamos fazer com a soma das notas dos alunos e vai

50
00:02:34,545 --> 00:02:37,846
dividir essa soma pela durao das notas dos alunos.

51
00:02:37,846 --> 00:02:42,030
O tamanho novamente  a contagem de quantos

52
00:02:42,030 --> 00:02:44,380
existem e h quatro neste

53
00:02:44,380 --> 00:02:47,317
caso, e naturalmente retornar esse clculo.

54
00:02:47,317 --> 00:02:50,400
Ento, agora, se quisermos imprimir a mdia do

55
00:02:52,470 --> 00:02:54,690
meu aluno, podemos fazer isso.

56
00:02:54,690 --> 00:02:58,170
Mais uma vez, tudo o que estamos fazendo aqui  que estamos avaliando meu aluno.

57
00:02:58,170 --> 00:02:59,620
 s um dicionrio.

58
00:02:59,620 --> 00:03:01,500
Ns estamos chamando a funo de

59
00:03:01,500 --> 00:03:04,668
nota mdia com isso como um argumento, ento o valor

60
00:03:04,668 --> 00:03:08,210
do meu aluno, este dicionrio, ir ento para o parmetro do

61
00:03:09,570 --> 00:03:12,130
aluno e isto retornar estes clculos aqui e

62
00:03:12,130 --> 00:03:13,380
ento ns vamos imprimir isso.

63
00:03:13,380 --> 00:03:14,213
Ento vamos rodar.

64
00:03:15,745 --> 00:03:18,695
E como voc pode ver, temos 86. 75, o que parece certo.

65
00:03:20,180 --> 00:03:22,455
No entanto, e aqui vem

66
00:03:22,455 --> 00:03:26,520
o pouco interessante, h uma falha com todo este programa.

67
00:03:26,520 --> 00:03:27,970
Eu vou apenas apagar isso.

68
00:03:27,970 --> 00:03:30,320
A falha no est no cdigo.

69
00:03:30,320 --> 00:03:31,730
O cdigo est totalmente bem, voc sabe.

70
00:03:31,730 --> 00:03:33,230
Ele faz o que deve fazer.

71
00:03:34,185 --> 00:03:35,018
Calcula a nota mdia.

72
00:03:35,018 --> 00:03:36,646
O aluno  um dicionrio que est definido l.

73
00:03:36,646 --> 00:03:38,362
Todo o cdigo funciona e

74
00:03:38,362 --> 00:03:40,940
imprime ou nos d o valor que queremos.

75
00:03:42,310 --> 00:03:46,340
Mas a falha est no seu design, no no design da interface do

76
00:03:46,340 --> 00:03:50,117
usurio, mas no design de software, e isso  um conceito, e

77
00:03:50,117 --> 00:03:53,440
um tpico inteiro que a maioria dos tutoriais de cdigo

78
00:03:53,440 --> 00:03:56,962
simplesmente pula, mas eu acho que  muito importante e eu

79
00:03:56,962 --> 00:03:57,800
acho que 

80
00:03:57,800 --> 00:04:00,990
uma boa maneira de explicar a programao orientada a objetos.

81
00:04:00,990 --> 00:04:04,000
A falha no design do software 

82
00:04:04,000 --> 00:04:09,000
que essas duas funes so essencialmente no relacionadas, embora sejam intimamente relacionadas

83
00:04:10,660 --> 00:04:15,270
ou estejam intimamente relacionadas. Elas so essencialmente desconectadas, e o que

84
00:04:15,270 --> 00:04:18,600
eu quero dizer  que voc tem essa

85
00:04:18,600 --> 00:04:22,110
funo e em uma grande programa, potencialmente, voc poderia

86
00:04:22,110 --> 00:04:24,360
ter uma funo em algum lugar

87
00:04:24,360 --> 00:04:27,090
em um arquivo completamente diferente que lhe

88
00:04:27,090 --> 00:04:28,760
d a nota mdia.

89
00:04:29,670 --> 00:04:31,100
E em um arquivo completamente

90
00:04:31,100 --> 00:04:32,861
diferente, voc poderia ter esse aluno, ento

91
00:04:32,861 --> 00:04:36,030
eles poderiam estar em lugares completamente diferentes fisicamente em um grande projeto.

92
00:04:37,060 --> 00:04:40,560
No entanto, o que dizemos  que essas

93
00:04:40,560 --> 00:04:44,610
duas coisas esto fortemente acopladas, na medida em que

94
00:04:44,610 --> 00:04:49,610
a funo de classificao mdia requer que o parmetro seja um

95
00:04:50,560 --> 00:04:55,020
dicionrio e requer que o parmetro tenha uma classificao chave

96
00:04:55,020 --> 00:04:57,450
para poder cumprir sua finalidade.

97
00:04:57,450 --> 00:04:59,700
 totalmente bom para uma funo ter

98
00:04:59,700 --> 00:05:02,373
esses requisitos, mas no quando tambm  possvel

99
00:05:02,373 --> 00:05:05,910
que a funo esteja em um lugar completamente diferente, porque digamos

100
00:05:05,910 --> 00:05:08,040
que voc queira alterar as notas

101
00:05:08,040 --> 00:05:12,640
por resultados, por exemplo, voc teria um caos se Tenho funes em todo o

102
00:05:12,640 --> 00:05:15,160
lugar que dependem desse aluno para ter uma

103
00:05:15,160 --> 00:05:18,270
chave de notas, mas agora voc a altera.

104
00:05:19,910 --> 00:05:23,290
Ento esta  a falha no design deste programa.

105
00:05:23,290 --> 00:05:28,290
Temos uma funo que no est vivendo com o aluno, mas est

106
00:05:29,460 --> 00:05:32,220
fortemente acoplada a esse aluno ou a

107
00:05:32,220 --> 00:05:33,890
essa estrutura de dicionrio.

108
00:05:35,630 --> 00:05:38,683
Ento, seria timo se pudssemos ter nossa funo

109
00:05:38,683 --> 00:05:43,683
de viver dentro do dicionrio para que ele vivesse no mesmo lugar

110
00:05:44,300 --> 00:05:47,190
que os dados em que ele age.

111
00:05:47,190 --> 00:05:48,550
Algo assim.

112
00:05:48,550 --> 00:05:51,154
Digamos que adicionamos uma nova chave aqui

113
00:05:51,154 --> 00:05:55,420
que  a mdia e isso  algo que calcula a mdia.

114
00:05:56,660 --> 00:05:58,450
Esta poderia ser uma

115
00:05:58,450 --> 00:06:03,450
funo que calcula a mdia de um aluno, especificamente deste aluno.

116
00:06:04,030 --> 00:06:09,030
Ento, atualmente, com essas notas, isso deveria ser 86. 75, mas  claro, se adicionarmos

117
00:06:09,170 --> 00:06:12,450
outra nota, digamos 100, isso deve passar

118
00:06:12,450 --> 00:06:14,830
para 90 ou algo assim.

119
00:06:15,976 --> 00:06:20,976
Esse valor aqui deve ser uma funo para que possa ser recalculado toda

120
00:06:21,780 --> 00:06:24,170
vez que as notas forem alteradas.

121
00:06:26,860 --> 00:06:31,810
No entanto, no podemos fazer isso com um dicionrio.

122
00:06:31,810 --> 00:06:35,329
Um dicionrio no nos permitir colocar aqui uma

123
00:06:35,329 --> 00:06:39,310
funo que atue nos dados desse mesmo dicionrio.

124
00:06:40,380 --> 00:06:41,740
Isso no  possvel.

125
00:06:43,391 --> 00:06:44,650
Desculpa.

126
00:06:45,780 --> 00:06:50,250
Portanto, devemos usar objetos para isso, porque o objeto

127
00:06:50,250 --> 00:06:54,260
 a progresso natural nesta utilidade do dicionrio,

128
00:06:54,260 --> 00:06:57,420
onde nos permitir agir sobre os

129
00:06:57,420 --> 00:07:00,000
dados que o objeto contm.

130
00:07:01,720 --> 00:07:04,730
Assim, podemos comear a pensar em objetos apenas

131
00:07:04,730 --> 00:07:09,730
como um ponto de partida de uma coisa que contm dados, neste nome

132
00:07:09,850 --> 00:07:14,450
de caso e notas, e tambm pode conter aes relacionadas a esses

133
00:07:14,450 --> 00:07:16,900
dados, nesse caso, calcular a mdia.

134
00:07:20,440 --> 00:07:24,010
Ento, vou manter isso aqui enquanto implementarmos nossa

135
00:07:24,010 --> 00:07:27,560
definio de objeto, vamos nos referir a ela.

136
00:07:29,220 --> 00:07:32,250
Ento, o que eu vou fazer agora, agora

137
00:07:32,250 --> 00:07:36,130
que sabemos que um objeto armazena dados e aes para

138
00:07:36,130 --> 00:07:41,130
fazer com os dados,  que eu vou definir esse objeto e vai

139
00:07:41,710 --> 00:07:46,500
ser um pouco confuso para comear, mas eu quero que ns cumpri-lo.

140
00:07:46,500 --> 00:07:48,240
Ns vamos definir os objetos,

141
00:07:48,240 --> 00:07:49,730
ento vamos criar o objeto.

142
00:07:49,730 --> 00:07:51,760
Essas so duas etapas distintas.

143
00:07:51,760 --> 00:07:54,260
E ento vamos explicar exatamente o que est acontecendo.

144
00:07:54,260 --> 00:07:56,362
O que eu quero que voc

145
00:07:56,362 --> 00:08:00,790
entenda em termos desses objetos  que eles so apenas coisas que armazenam dados.

146
00:08:00,790 --> 00:08:03,730
Os dados podem ser um nome e

147
00:08:03,730 --> 00:08:06,810
as notas e tambm podem armazenar essas aes.

148
00:08:06,810 --> 00:08:10,424
Ento, vamos comear definindo como um objeto se parece.

149
00:08:10,424 --> 00:08:13,220
E ns fazemos isso com uma aula.

150
00:08:14,420 --> 00:08:17,950
Ok, a classe  algo que define quais

151
00:08:17,950 --> 00:08:22,270
so os objetos e, portanto, temos a classe de palavras-chave.

152
00:08:22,270 --> 00:08:23,920
Ento ns temos o nome da

153
00:08:23,920 --> 00:08:26,700
classe e normalmente em Python, eles comeam com uma letra

154
00:08:26,700 --> 00:08:28,160
maiscula, e ento temos dois pontos.

155
00:08:28,160 --> 00:08:30,082
Agora sabemos que depois de dois pontos,

156
00:08:30,082 --> 00:08:33,078
as coisas devem ser mais recuadas e como voc pode

157
00:08:33,078 --> 00:08:36,540
ver, o Ripple It j sugere que colocamos quatro espaos na frente.

158
00:08:37,996 --> 00:08:42,710
Agora dentro desta classe, recuada como quatro espaos,

159
00:08:42,710 --> 00:08:45,340
vamos definir duas funes.

160
00:08:46,920 --> 00:08:49,360
E isso  muito estranho, porque at agora, temos

161
00:08:49,360 --> 00:08:51,720
definido funes e no nvel superior do recuo.

162
00:08:51,720 --> 00:08:53,780
Isso est no canto esquerdo da pgina.

163
00:08:53,780 --> 00:08:56,490
Agora vamos defini-los dentro da classe.

164
00:08:56,490 --> 00:08:58,290
E isso significa que a

165
00:08:58,290 --> 00:09:00,220
classe vai conter essas funes.

166
00:09:01,170 --> 00:09:03,510
Vamos comear definindo uma funo, que 

167
00:09:03,510 --> 00:09:06,070
uma funo especial chamada underscore, underscore, que

168
00:09:06,070 --> 00:09:08,950
 dois sublinhados separados, sublinhado do init, sublinhado.

169
00:09:10,050 --> 00:09:13,300
Em Python, essas funes com dois sublinhados na frente e dois

170
00:09:13,300 --> 00:09:15,760
sublinhados na parte de trs, so funes especiais

171
00:09:15,760 --> 00:09:17,470
e so chamadas de funes dunder,

172
00:09:17,470 --> 00:09:19,320
ento isso seria um init dunder.

173
00:09:19,320 --> 00:09:20,830
Dunder para sublinhado duplo.

174
00:09:22,280 --> 00:09:24,690
Esta funo init vai levar trs parmetros.

175
00:09:24,690 --> 00:09:27,930
O primeiro  auto, o prximo vai ser novo nome

176
00:09:27,930 --> 00:09:29,660
e o prximo ser novo.

177
00:09:29,660 --> 00:09:31,940
Esses parmetros podem ser chamados de qualquer coisa

178
00:09:31,940 --> 00:09:35,000
que voc quiser, mas eu estou escolhendo por uma razo em

179
00:09:35,000 --> 00:09:36,942
particular e estes podem ser qualquer coisa,

180
00:09:36,942 --> 00:09:40,660
mas estes sero o nome e a nota que vamos armazenar em nosso objeto.

181
00:09:40,660 --> 00:09:44,190
E dentro disso, vamos nos dizer. nome, woo, completamente

182
00:09:44,190 --> 00:09:47,450
errado l, auto. nome  igual a

183
00:09:48,910 --> 00:09:51,742
novo nome e auto. notas  igual a novas notas

184
00:09:51,742 --> 00:09:53,980
e eu vou ter certeza de fazer novas notas l.

185
00:09:55,660 --> 00:09:58,100
Ok, passar para a segunda funo vai

186
00:09:58,100 --> 00:10:00,390
ser uma funo de nota mdia

187
00:10:00,390 --> 00:10:02,810
bem parecida com a que temos aqui.

188
00:10:02,810 --> 00:10:04,840
Vou cham-lo de mdia e vai

189
00:10:04,840 --> 00:10:06,940
ter um nico parmetro chamado self.

190
00:10:07,960 --> 00:10:10,560
Ento novamente o clon e ento o que vai retornar

191
00:10:10,560 --> 00:10:15,560
 a soma de si mesmo. notas divididas pelo comprimento do eu. notas.

192
00:10:16,030 --> 00:10:19,699
Ento, eu aprecio isso,  s eu digitando e voc

193
00:10:19,699 --> 00:10:24,510
est assistindo e agora vamos comear a explicar exatamente o que est acontecendo

194
00:10:24,510 --> 00:10:27,270
aqui, mas antes que possamos fazer isso, antes

195
00:10:27,270 --> 00:10:30,760
que possamos explicar a sintaxe assustadora aqui, temos que definir

196
00:10:30,760 --> 00:10:33,230
ou melhor temos que criar um objeto.

197
00:10:33,230 --> 00:10:34,960
O que definimos aqui

198
00:10:34,960 --> 00:10:37,640
 que definimos a estrutura do objeto.

199
00:10:37,640 --> 00:10:40,782
Agora vamos criar um objeto, ento vamos criar

200
00:10:40,782 --> 00:10:43,490
um objeto chamado student one e a

201
00:10:43,490 --> 00:10:48,490
maneira como criamos um novo objeto em Python  que chamamos a classe assim.

202
00:10:49,710 --> 00:10:51,630
Veja que temos um colchete de

203
00:10:51,630 --> 00:10:55,330
abertura e fechamento l e que cria um novo objeto do tipo

204
00:10:56,620 --> 00:10:59,570
aluno e, portanto, essa turma de alunos agora 

205
00:10:59,570 --> 00:11:02,120
chamada usando esses colchetes como se fosse uma

206
00:11:02,120 --> 00:11:03,920
funo e cria um novo objeto.

207
00:11:04,880 --> 00:11:06,710
Ento, o que  um objeto?

208
00:11:07,649 --> 00:11:11,370
Bem, pense em um objeto apenas como algo que

209
00:11:11,370 --> 00:11:15,637
pode armazenar dados e ns vamos dizer quais dados armazenar,

210
00:11:15,637 --> 00:11:20,637
ento dentro desta chamada de estudante aqui, whoop, desculpe por isso, ns

211
00:11:22,040 --> 00:11:23,840
vamos colocar duas coisas.

212
00:11:24,880 --> 00:11:27,650
Ns vamos colocar o Rolf Smith e tambm

213
00:11:27,650 --> 00:11:30,390
vamos colocar 70, 88, 90 e 99.

214
00:11:34,060 --> 00:11:36,240
Agora o que est acontecendo .

215
00:11:36,240 --> 00:11:39,430
A primeira coisa que vai acontecer  que esta

216
00:11:39,430 --> 00:11:42,080
chamada aqui vai criar um novo objeto.

217
00:11:42,080 --> 00:11:44,520
Um objeto  uma coisa completamente vazia,

218
00:11:44,520 --> 00:11:47,000
ou coisa mais ou menos vazia que

219
00:11:47,000 --> 00:11:50,300
nos permite armazenar dados e nos permite armazenar aes.

220
00:11:52,240 --> 00:11:54,696
Quando o objeto  criado,

221
00:11:54,696 --> 00:11:59,130
criado antes de chamarmos qualquer uma dessas funes, ele

222
00:11:59,130 --> 00:12:02,510
chama imediatamente essa funo dunder init.

223
00:12:02,510 --> 00:12:04,380
Ento, o objeto  criado primeiro e,

224
00:12:04,380 --> 00:12:06,580
em seguida, chama imediatamente essa funo dunder init.

225
00:12:07,660 --> 00:12:12,532
O novo objeto vazio que acabou de ser criado  passado para si

226
00:12:12,532 --> 00:12:17,532
mesmo como o primeiro parmetro, de modo que o self agora  um objeto

227
00:12:19,020 --> 00:12:22,170
vazio e vazio que no tem essencialmente nada nele.

228
00:12:24,510 --> 00:12:27,180
E a maneira como o Python  estruturado,

229
00:12:27,180 --> 00:12:30,167
ele atribui a Rolf Smith como um novo nome

230
00:12:30,167 --> 00:12:34,580
o segundo parmetro e essa lista como novas notas, o terceiro parmetro.

231
00:12:35,580 --> 00:12:36,850
Terceiro, sim terceiro.

232
00:12:38,400 --> 00:12:40,950
Estou to confuso pensando em zeros e uns aqui.

233
00:12:42,040 --> 00:12:44,250
Ento, muito, muito importante.

234
00:12:44,250 --> 00:12:47,397
Self  um objeto em branco que foi

235
00:12:47,397 --> 00:12:50,890
criado antes de chamarmos essa funo dunder init.

236
00:12:50,890 --> 00:12:53,360
Novo nome  o primeiro argumento aqui, novas

237
00:12:53,360 --> 00:12:55,310
notas so o segundo argumento aqui.

238
00:12:56,500 --> 00:13:00,308
Agora, sabemos que quando entramos na primeira

239
00:13:00,308 --> 00:13:02,700
linha, agora temos esses valores.

240
00:13:02,700 --> 00:13:05,410
Self  um objeto em branco e agora

241
00:13:05,410 --> 00:13:08,680
o que vamos fazer  usar o ponto para acessar

242
00:13:08,680 --> 00:13:13,230
algo dentro desse objeto e o que vamos acessar  essa coisa do nome.

243
00:13:14,430 --> 00:13:16,533
Agora deixe-me dizer, porque 

244
00:13:16,533 --> 00:13:21,060
um objeto sem graa, no tem nada chamado de nome dentro dele.

245
00:13:21,060 --> 00:13:23,378
No tem uma varivel chamada nome dentro dela.

246
00:13:23,378 --> 00:13:26,960
Ento, o que isto est fazendo  criar uma nova

247
00:13:26,960 --> 00:13:31,140
varivel chamada nome que vive dentro desse objeto em branco que estamos

248
00:13:31,140 --> 00:13:32,450
chamando de self.

249
00:13:33,450 --> 00:13:36,000
Claro, voc pode chamar o que quiser.

250
00:13:36,000 --> 00:13:39,150
Voc pode chamar isso de boject se quiser ou voc pode

251
00:13:39,150 --> 00:13:42,870
soletrar corretamente e chamar isso de meu objeto e est tudo bem.

252
00:13:42,870 --> 00:13:43,910
Sim, tudo bem.

253
00:13:43,910 --> 00:13:46,180
Voc pode fazer isso se quiser,

254
00:13:46,180 --> 00:13:49,595
mas a conveno  cham-lo e, em Python, ele sempre

255
00:13:49,595 --> 00:13:52,700
ser chamado, mesmo que voc possa cham-lo como quiser.

256
00:13:52,700 --> 00:13:56,840
Ento ns temos este objeto vazio e dentro dele neste ponto, ns estamos

257
00:13:56,840 --> 00:14:00,650
definindo a varivel name e ns estamos dando a essa varivel o

258
00:14:00,650 --> 00:14:03,266
valor do novo nome, que  Rolf Smith.

259
00:14:03,266 --> 00:14:07,660
Ento agora o que anteriormente era um objeto completamente vazio agora

260
00:14:07,660 --> 00:14:11,676
no est mais em branco, ele contm essa varivel de nome.

261
00:14:11,676 --> 00:14:14,480
E na segunda linha, estamos fazendo a mesma coisa.

262
00:14:14,480 --> 00:14:17,340
Estamos obtendo nosso objeto agora no em branco e

263
00:14:17,340 --> 00:14:20,370
estamos definindo a varivel de notas dentro dele e o

264
00:14:20,370 --> 00:14:23,820
valor disso  a nova lista de notas que passamos aqui.

265
00:14:27,070 --> 00:14:29,540
Agora, antes de passarmos para a

266
00:14:29,540 --> 00:14:32,367
funo mdia, quero ter certeza de que

267
00:14:32,367 --> 00:14:37,367
isso est claro e, se imprimirmos o aluno, esse  o objeto que criamos. nome, ns vamos conseguir.

268
00:14:38,053 --> 00:14:41,570
Oh, ns fizemos algo incorreto aqui.

269
00:14:42,940 --> 00:14:45,000
Oh, sim, desculpe, ns perdemos alguma coisa aqui.

270
00:14:45,000 --> 00:14:48,740
Eu no vou colocar nada l por enquanto.

271
00:14:48,740 --> 00:14:51,410
Maneira de matar o fluxo, cara.

272
00:14:52,380 --> 00:14:54,030
De qualquer forma, se imprimirmos um aluno. nome, ns temos Rolf Smith.

273
00:14:54,030 --> 00:14:58,119
Isso  o que definimos aqui.

274
00:14:58,119 --> 00:15:00,480
Tudo o que est acontecendo de novo, o

275
00:15:01,430 --> 00:15:03,780
aluno est criando um objeto vazio e que

276
00:15:03,780 --> 00:15:06,030
est sendo passado pelo mtodo dunder init como self.

277
00:15:06,030 --> 00:15:08,470
O novo nome  Rolf Smith, novas notas esto aqui

278
00:15:08,470 --> 00:15:11,416
e, ento, tudo o que estamos fazendo  atribuir novas variveis dentro

279
00:15:11,416 --> 00:15:12,320
de si e estamos

280
00:15:12,320 --> 00:15:14,690
dando a elas os valores pelos quais passamos.

281
00:15:14,690 --> 00:15:16,960
Portanto, o objeto de aluno  uma entidade

282
00:15:16,960 --> 00:15:21,325
que pode armazenar dados e a maneira como armazenamos dados nele  usando isso. nome.

283
00:15:21,325 --> 00:15:25,380
No entanto, o aluno sabe

284
00:15:27,110 --> 00:15:32,110
que  o nosso Aluno com S maisculo e o modo como podemos fazer

285
00:15:32,348 --> 00:15:35,570
isso  que podemos acessar alguma propriedade especial dele

286
00:15:35,570 --> 00:15:37,910
que  sublinhado, subclasse de classe.

287
00:15:37,910 --> 00:15:40,130
Podemos executar isso e voc pode ver que  a classe 'Aluno'.

288
00:15:42,362 --> 00:15:46,390
Esse  o tipo.

289
00:15:46,390 --> 00:15:47,900
Ento, estudante, um sabe que 

290
00:15:50,410 --> 00:15:53,860
uma coisa de estudante e agora tem um nome e uma nota definidos l.

291
00:15:53,860 --> 00:15:58,545
Se fssemos definir o aluno dois, torn-lo igual a

292
00:15:58,545 --> 00:16:03,010
outro aluno, por exemplo, Jos e dar-lhe algumas notas

293
00:16:03,010 --> 00:16:05,850
de 50, 60, 99 e 100.

294
00:16:05,850 --> 00:16:08,390
Eu fiquei melhor no final do prazo.

295
00:16:08,390 --> 00:16:10,457
Ento podemos imprimir o aluno dois. nome.

296
00:16:10,457 --> 00:16:14,260
Podemos executar isso e

297
00:16:16,070 --> 00:16:20,120
perceber como ele diz Jos e podemos imprimir um aluno. nome e observe agora como ele diz Jos e Rolf

298
00:16:20,120 --> 00:16:25,120
Smith, ento essas duas coisas so

299
00:16:27,080 --> 00:16:29,780
entidades completamente diferentes, coisas completamente diferentes.

300
00:16:29,780 --> 00:16:32,760
Ambos sabem que so estudantes e ambos tm

301
00:16:32,760 --> 00:16:35,550
essa varivel de nome que declaramos aqui.

302
00:16:35,550 --> 00:16:38,120
Mas, claro, se quisssemos, cada um poderia

303
00:16:39,090 --> 00:16:40,630
ter uma propriedade diferente.

304
00:16:40,630 --> 00:16:42,480
Voc sabe, isso  algo que voc

305
00:16:42,480 --> 00:16:44,850
pode fazer se voc fosse to inclinado e

306
00:16:44,850 --> 00:16:47,670
eles no se importassem com exatamente o que eles so.

307
00:16:47,670 --> 00:16:50,440
Tudo o que eles sabem  que, porque

308
00:16:50,440 --> 00:16:53,170
ns definimos isso aqui dentro e ns chamamos

309
00:16:53,170 --> 00:16:56,037
esse mtodo init dunder, como eles tm um nome

310
00:16:56,037 --> 00:16:59,390
e o valor desse nome  o que passamos aqui.

311
00:16:59,390 --> 00:17:01,380
Nada de mgico est acontecendo, apenas os dados

312
00:17:01,380 --> 00:17:03,700
esto sendo passados de um lugar para outro e

313
00:17:03,700 --> 00:17:05,300
 sobre isso que trata a programao.

314
00:17:05,300 --> 00:17:06,800
Ok, agora que

315
00:17:09,420 --> 00:17:12,580
criamos nosso objeto e sabemos que podemos

316
00:17:12,580 --> 00:17:15,960
criar vrios objetos e eles so apenas coisas

317
00:17:15,960 --> 00:17:20,957
em branco independentes s quais atribumos essas variveis, estamos prontos para

318
00:17:20,957 --> 00:17:25,957
ir para a prxima etapa, que  olhando para essa funo mdia.

319
00:17:26,170 --> 00:17:28,282
Vamos fazer isso no prximo vdeo.

320
00:17:28,282 --> 00:17:30,750
Eu te vejo l.

321
00:17:30,750 --> 00:17:31,700
&nbsp;

