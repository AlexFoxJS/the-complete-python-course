1
00:00:00,220 --> 00:00:01,620
<v Jose>Hi and welcome back.</v>

2
00:00:01,620 --> 00:00:03,880
In this video, we're talking about dictionaries

3
00:00:03,880 --> 00:00:07,740
and objects and we're going to introduce this concept

4
00:00:07,740 --> 00:00:09,890
of object-oriented programming.

5
00:00:12,070 --> 00:00:14,140
Now, the way I've got planned to introduce

6
00:00:14,140 --> 00:00:16,230
this to you, I'm pretty chuffed with.

7
00:00:16,230 --> 00:00:18,570
I think it's gonna be quite understandable.

8
00:00:18,570 --> 00:00:21,670
So let's get on it and see how it turns out.

9
00:00:23,230 --> 00:00:26,400
We've looked at dictionaries as things we can use

10
00:00:26,400 --> 00:00:29,840
to represent things in our programme.

11
00:00:31,260 --> 00:00:34,050
For example, we can have a dictionary that represents

12
00:00:34,050 --> 00:00:36,970
a student and we can say my student is equal

13
00:00:36,970 --> 00:00:39,660
to this new dictionary, has a name,

14
00:00:42,030 --> 00:00:47,030
and potentially has some grades, something like that.

15
00:00:48,380 --> 00:00:52,730
Now, in our programme, this dictionary represents

16
00:00:52,730 --> 00:00:56,040
what we think of a student, and in other parts

17
00:00:56,040 --> 00:00:58,460
of our programme, we may do things like print out

18
00:00:58,460 --> 00:01:00,680
the student's name or calculate the average

19
00:01:00,680 --> 00:01:03,491
grade of the student and use this dictionary

20
00:01:03,491 --> 00:01:07,500
as though it was a student even though of course

21
00:01:07,500 --> 00:01:10,007
we know that real students in the real world

22
00:01:10,007 --> 00:01:12,724
have a lot more properties like an address

23
00:01:12,724 --> 00:01:16,078
and you know a family and things like that.

24
00:01:16,078 --> 00:01:19,760
In our programme, we don't care about those other properties,

25
00:01:19,760 --> 00:01:22,159
we only care about the properties that we're going to use.

26
00:01:22,159 --> 00:01:25,575
So in our programme, this dictionary can represent a student.

27
00:01:25,575 --> 00:01:28,650
And if we expand our programme and we need

28
00:01:28,650 --> 00:01:31,240
more properties, we can always modify the structure

29
00:01:31,240 --> 00:01:33,050
of this dictionary and add them in.

30
00:01:35,140 --> 00:01:37,720
And this concept of having something that represents

31
00:01:37,720 --> 00:01:40,967
a real-world entity is pretty powerful in programming

32
00:01:40,967 --> 00:01:43,898
and it allows us to start thinking of our programmes

33
00:01:43,898 --> 00:01:47,140
in terms of what they do as opposed to how they do it.

34
00:01:49,800 --> 00:01:52,370
Let's move on and assume we want to calculate

35
00:01:52,370 --> 00:01:55,360
the average grade of this student so that we can,

36
00:01:55,360 --> 00:01:58,610
for example, put it in some sort of report somewhere.

37
00:01:58,610 --> 00:02:01,190
I think you can already calculate the average grade

38
00:02:01,190 --> 00:02:03,330
of this student quite easily, so I'm going to ask you

39
00:02:03,330 --> 00:02:05,750
to pause the video and give this a go.

40
00:02:05,750 --> 00:02:08,306
Try to implement a function that will return

41
00:02:08,306 --> 00:02:11,980
the average grade of this student dictionary.

42
00:02:14,230 --> 00:02:15,290
I hope you got that.

43
00:02:15,290 --> 00:02:17,660
What we're going to do is we're going to define

44
00:02:17,660 --> 00:02:20,090
an average grade function.

45
00:02:20,090 --> 00:02:22,090
It's going to take one parameter that is going to be

46
00:02:22,090 --> 00:02:25,093
the student, then a colon at the end of course

47
00:02:25,093 --> 00:02:27,850
and all it's going to do is it's going to add up

48
00:02:27,850 --> 00:02:30,433
the grades that we're going to do with the sum

49
00:02:30,433 --> 00:02:34,545
of student grades and it's going to divide that sum

50
00:02:34,545 --> 00:02:37,846
by the length of the student grades.

51
00:02:37,846 --> 00:02:42,030
The length again is the count of how many there are

52
00:02:42,030 --> 00:02:44,380
and there are four in this case, and naturally

53
00:02:44,380 --> 00:02:47,317
it's going to return that calculation.

54
00:02:47,317 --> 00:02:50,400
So now if we wanted to print out the average

55
00:02:52,470 --> 00:02:54,690
of my student, we can do that.

56
00:02:54,690 --> 00:02:58,170
Again, all we're doing here is we are evaluating my student.

57
00:02:58,170 --> 00:02:59,620
It's just a dictionary.

58
00:02:59,620 --> 00:03:01,500
We're calling the average grade function with that

59
00:03:01,500 --> 00:03:04,668
as an argument so the value of my student, this dictionary,

60
00:03:04,668 --> 00:03:08,210
will then go into the student parameter

61
00:03:09,570 --> 00:03:12,130
and that's gonna return these calculations here

62
00:03:12,130 --> 00:03:13,380
and then we're gonna print that out.

63
00:03:13,380 --> 00:03:14,213
So let's run it.

64
00:03:15,745 --> 00:03:18,695
And as you can see, we get 86.75, which sounds about right.

65
00:03:20,180 --> 00:03:22,455
However, and here comes the interesting bit,

66
00:03:22,455 --> 00:03:26,520
there is a flaw with this entire programme.

67
00:03:26,520 --> 00:03:27,970
I'm going to just delete that.

68
00:03:27,970 --> 00:03:30,320
The flaw is not in the code.

69
00:03:30,320 --> 00:03:31,730
The code's totally fine, you know.

70
00:03:31,730 --> 00:03:33,230
It does what it's meant to do.

71
00:03:34,185 --> 00:03:35,018
It calculates the average grade.

72
00:03:35,018 --> 00:03:36,646
The student is a dictionary that's defined up there.

73
00:03:36,646 --> 00:03:38,362
All the code works and it prints out

74
00:03:38,362 --> 00:03:40,940
or it gives us the value that we want.

75
00:03:42,310 --> 00:03:46,340
But the flaw is in its design, not user-interface design,

76
00:03:46,340 --> 00:03:50,117
but in software design, and this is a concept,

77
00:03:50,117 --> 00:03:53,440
and a whole topic that the majority of coding

78
00:03:53,440 --> 00:03:56,962
tutorials out there just completely skip over,

79
00:03:56,962 --> 00:03:57,800
but I think it's pretty important and I think

80
00:03:57,800 --> 00:04:00,990
it's a good way to explain object-oriented programming.

81
00:04:00,990 --> 00:04:04,000
The flaw in the software design is that these two

82
00:04:04,000 --> 00:04:09,000
functions are essentially unrelated even though

83
00:04:10,660 --> 00:04:15,270
they are very closely, or seemingly closely related,

84
00:04:15,270 --> 00:04:18,600
they are essentially disjoined, and what I mean to say

85
00:04:18,600 --> 00:04:22,110
by that is you've got this function and in a large

86
00:04:22,110 --> 00:04:24,360
programme, potentially, you could have a function

87
00:04:24,360 --> 00:04:27,090
somewhere in an entirely different file altogether

88
00:04:27,090 --> 00:04:28,760
that gives you the average grade.

89
00:04:29,670 --> 00:04:31,100
And in a different file altogether, you could have

90
00:04:31,100 --> 00:04:32,861
this student, so these could be in completely

91
00:04:32,861 --> 00:04:36,030
different places physically in a large project.

92
00:04:37,060 --> 00:04:40,560
However, what we say that these two things are

93
00:04:40,560 --> 00:04:44,610
tightly coupled in that the average grade function

94
00:04:44,610 --> 00:04:49,610
requires that the parameter be a dictionary

95
00:04:50,560 --> 00:04:55,020
and it requires that the parameter have a key grades in it

96
00:04:55,020 --> 00:04:57,450
in order to be able to fulfil its purpose.

97
00:04:57,450 --> 00:04:59,700
It's totally fine for a function to have those

98
00:04:59,700 --> 00:05:02,373
requirements, but not when it's also possible

99
00:05:02,373 --> 00:05:05,910
for the function to be in a completely different place

100
00:05:05,910 --> 00:05:08,040
because then let's say you wanted to change grades

101
00:05:08,040 --> 00:05:12,640
for results, for example, you'd have a mayhem

102
00:05:12,640 --> 00:05:15,160
if you've got functions all over the place that rely

103
00:05:15,160 --> 00:05:18,270
on this student to have a grades key, but now you change it.

104
00:05:19,910 --> 00:05:23,290
So this is the flaw in the design of this programme.

105
00:05:23,290 --> 00:05:28,290
We've got a function that is not living with the student,

106
00:05:29,460 --> 00:05:32,220
but is tightly coupled to that student

107
00:05:32,220 --> 00:05:33,890
or to this dictionary structure.

108
00:05:35,630 --> 00:05:38,683
So it would be great if we could have our function

109
00:05:38,683 --> 00:05:43,683
living inside the dictionary so that it lives in the same

110
00:05:44,300 --> 00:05:47,190
place as the data that it acts on.

111
00:05:47,190 --> 00:05:48,550
Something like this.

112
00:05:48,550 --> 00:05:51,154
Let's say we add a new key here that's the average

113
00:05:51,154 --> 00:05:55,420
and this like something that calculates average.

114
00:05:56,660 --> 00:05:58,450
This could be a function that calculates

115
00:05:58,450 --> 00:06:03,450
the average of a student, of this student specifically.

116
00:06:04,030 --> 00:06:09,030
So currently, with these grades, this should be 86.75,

117
00:06:09,170 --> 00:06:12,450
but of course, if we add another grade, say 100,

118
00:06:12,450 --> 00:06:14,830
this should go up to like 90 or something.

119
00:06:15,976 --> 00:06:20,976
This value here must be a function in order that it can be

120
00:06:21,780 --> 00:06:24,170
recalculated every time that the grades change.

121
00:06:26,860 --> 00:06:31,810
However, we cannot do that with a dictionary.

122
00:06:31,810 --> 00:06:35,329
A dictionary will not allow us to put a function here

123
00:06:35,329 --> 00:06:39,310
that acts on the data inside that same dictionary.

124
00:06:40,380 --> 00:06:41,740
It's just not possible.

125
00:06:43,391 --> 00:06:44,650
Sorry.

126
00:06:45,780 --> 00:06:50,250
So we must use objects for this because the object

127
00:06:50,250 --> 00:06:54,260
is the natural progression in this dictionary

128
00:06:54,260 --> 00:06:57,420
usefulness thing where it will allow us

129
00:06:57,420 --> 00:07:00,000
to act on the data that the object holds.

130
00:07:01,720 --> 00:07:04,730
So we can begin of thinking of objects just as a starting

131
00:07:04,730 --> 00:07:09,730
point of a thing that holds data, in this case name

132
00:07:09,850 --> 00:07:14,450
and grades, and it can also hold actions to do with

133
00:07:14,450 --> 00:07:16,900
that data, in this case, calculating the average.

134
00:07:20,440 --> 00:07:24,010
So I'm going to keep that here for as we implement

135
00:07:24,010 --> 00:07:27,560
our object definition, we're going to refer back to it.

136
00:07:29,220 --> 00:07:32,250
So what I'm going to do now, now that we know that an object

137
00:07:32,250 --> 00:07:36,130
stores data and actions to do with data, is I'm going

138
00:07:36,130 --> 00:07:41,130
to define that object and it's gonna be quite confusing

139
00:07:41,710 --> 00:07:46,500
to begin with, but I want us to stick to it.

140
00:07:46,500 --> 00:07:48,240
We're gonna define the objects,

141
00:07:48,240 --> 00:07:49,730
then we're gonna create the object.

142
00:07:49,730 --> 00:07:51,760
Those are two distinct steps.

143
00:07:51,760 --> 00:07:54,260
And then we're gonna explain exactly what's going on.

144
00:07:54,260 --> 00:07:56,362
What I want you to understand in terms of these objects

145
00:07:56,362 --> 00:08:00,790
is that they are just things that store data.

146
00:08:00,790 --> 00:08:03,730
The data can be a name and the grades

147
00:08:03,730 --> 00:08:06,810
and it can also store these actions.

148
00:08:06,810 --> 00:08:10,424
So let's start by defining what an object looks like.

149
00:08:10,424 --> 00:08:13,220
And we do that with a class.

150
00:08:14,420 --> 00:08:17,950
Okay the class is something that defines what the objects

151
00:08:17,950 --> 00:08:22,270
are and so we've got the keyword class.

152
00:08:22,270 --> 00:08:23,920
Then we've got the name of the class and normally

153
00:08:23,920 --> 00:08:26,700
in Python, they start with an upper-case letter,

154
00:08:26,700 --> 00:08:28,160
and then we've got a colon.

155
00:08:28,160 --> 00:08:30,082
Now we know that after a colon, things must be

156
00:08:30,082 --> 00:08:33,078
indented more and as you can see Ripple It already

157
00:08:33,078 --> 00:08:36,540
suggests that we put four spaces in front.

158
00:08:37,996 --> 00:08:42,710
Now inside this class, indented as four spaces,

159
00:08:42,710 --> 00:08:45,340
we're going to define two functions.

160
00:08:46,920 --> 00:08:49,360
And this is pretty weird because so far, we've been defining

161
00:08:49,360 --> 00:08:51,720
functions and in the top level of indentation.

162
00:08:51,720 --> 00:08:53,780
That's at the very left of the page.

163
00:08:53,780 --> 00:08:56,490
Now we're going to define them inside the class.

164
00:08:56,490 --> 00:08:58,290
And that's gonna mean that the class

165
00:08:58,290 --> 00:09:00,220
is going to contain these functions.

166
00:09:01,170 --> 00:09:03,510
Let's start by defining a function, which is

167
00:09:03,510 --> 00:09:06,070
a special function called underscore, underscore, that's two

168
00:09:06,070 --> 00:09:08,950
separate underscores, init underscore, underscore.

169
00:09:10,050 --> 00:09:13,300
In Python, these functions with two underscores in front

170
00:09:13,300 --> 00:09:15,760
and two underscores at the back, they are special functions

171
00:09:15,760 --> 00:09:17,470
and they're called dunder functions,

172
00:09:17,470 --> 00:09:19,320
so this would be a dunder init.

173
00:09:19,320 --> 00:09:20,830
Dunder for double underscore.

174
00:09:22,280 --> 00:09:24,690
This init function is going to take three parameters.

175
00:09:24,690 --> 00:09:27,930
The first one is self, the next one is gonna be new name

176
00:09:27,930 --> 00:09:29,660
and next one's gonna be new grade.

177
00:09:29,660 --> 00:09:31,940
These parameters can be called anything you want,

178
00:09:31,940 --> 00:09:35,000
but I'm picking self for a particular reason

179
00:09:35,000 --> 00:09:36,942
and these can be anything, but these are gonna be

180
00:09:36,942 --> 00:09:40,660
the name and the grade that we're gonna store in our object.

181
00:09:40,660 --> 00:09:44,190
And inside it, we're gonna say self.name, woo,

182
00:09:44,190 --> 00:09:47,450
completely wrong there, self.name equals new name

183
00:09:48,910 --> 00:09:51,742
and self.grades equals new grades and I'm gonna

184
00:09:51,742 --> 00:09:53,980
make sure to make it new grades there.

185
00:09:55,660 --> 00:09:58,100
Okay, moving on to the second function

186
00:09:58,100 --> 00:10:00,390
is gonna be an average grade function

187
00:10:00,390 --> 00:10:02,810
pretty much like the one we've got here.

188
00:10:02,810 --> 00:10:04,840
I'm gonna call it average and it's

189
00:10:04,840 --> 00:10:06,940
gonna take a single parameter called self.

190
00:10:07,960 --> 00:10:10,560
Then again the colon and then what it's gonna return is the

191
00:10:10,560 --> 00:10:15,560
sum of self.grades divided by the length of self.grades.

192
00:10:16,030 --> 00:10:19,699
So I appreciate this is just me typing and you watching

193
00:10:19,699 --> 00:10:24,510
and now let's begin to explain exactly what is going on

194
00:10:24,510 --> 00:10:27,270
here, but before we can do that, before we can explain

195
00:10:27,270 --> 00:10:30,760
the scary syntax here, we have to define or rather

196
00:10:30,760 --> 00:10:33,230
we have to create an object.

197
00:10:33,230 --> 00:10:34,960
What we've defined here is

198
00:10:34,960 --> 00:10:37,640
we've defined the object's structure.

199
00:10:37,640 --> 00:10:40,782
We're gonna now create an object, so we're gonna create

200
00:10:40,782 --> 00:10:43,490
an object called student one and the way we create

201
00:10:43,490 --> 00:10:48,490
a new object in Python is we call the class like so.

202
00:10:49,710 --> 00:10:51,630
See we've got an opening and closing bracket there

203
00:10:51,630 --> 00:10:55,330
and that creates a new object of type student

204
00:10:56,620 --> 00:10:59,570
and so this student class now gets called

205
00:10:59,570 --> 00:11:02,120
using these brackets as if it were a function

206
00:11:02,120 --> 00:11:03,920
and that creates a brand new object.

207
00:11:04,880 --> 00:11:06,710
So what is an object?

208
00:11:07,649 --> 00:11:11,370
Well, think of an object just as something that

209
00:11:11,370 --> 00:11:15,637
can store data and we are gonna tell it what data to store,

210
00:11:15,637 --> 00:11:20,637
so inside this student call here, whoop, sorry about that,

211
00:11:22,040 --> 00:11:23,840
we're gonna put two things.

212
00:11:24,880 --> 00:11:27,650
We're gonna put Rolf Smith and then we're also

213
00:11:27,650 --> 00:11:30,390
gonna put 70, 88, 90 and 99.

214
00:11:34,060 --> 00:11:36,240
Now what's happening is.

215
00:11:36,240 --> 00:11:39,430
The first thing that's gonna happen is this call here

216
00:11:39,430 --> 00:11:42,080
is going to create a brand new object.

217
00:11:42,080 --> 00:11:44,520
An object is a completely empty thing,

218
00:11:44,520 --> 00:11:47,000
or more or less empty thing that allows us

219
00:11:47,000 --> 00:11:50,300
to store data and allows us to store actions.

220
00:11:52,240 --> 00:11:54,696
When the object is created, that's created before

221
00:11:54,696 --> 00:11:59,130
we call any of these functions, then it

222
00:11:59,130 --> 00:12:02,510
immediately calls this dunder init function.

223
00:12:02,510 --> 00:12:04,380
So the object is first created and then it

224
00:12:04,380 --> 00:12:06,580
immediately calls this dunder init function.

225
00:12:07,660 --> 00:12:12,532
The new empty object that was just created gets passed

226
00:12:12,532 --> 00:12:17,532
to self as the first parameter, so self is now an empty,

227
00:12:19,020 --> 00:12:22,170
blank object that has essentially nothing in it.

228
00:12:24,510 --> 00:12:27,180
And the way that Python is structured, it then gives

229
00:12:27,180 --> 00:12:30,167
Rolf Smith as a new name the second parameter

230
00:12:30,167 --> 00:12:34,580
and this list as new grades, the third parameter.

231
00:12:35,580 --> 00:12:36,850
Third, yes third.

232
00:12:38,400 --> 00:12:40,950
I'm so confused thinking about zeros and ones here.

233
00:12:42,040 --> 00:12:44,250
So very, very important.

234
00:12:44,250 --> 00:12:47,397
Self is a blank object that was created

235
00:12:47,397 --> 00:12:50,890
before we called this dunder init function.

236
00:12:50,890 --> 00:12:53,360
New name is the first argument here,

237
00:12:53,360 --> 00:12:55,310
new grades is the second argument here.

238
00:12:56,500 --> 00:13:00,308
Now, we know that when we get into the first line,

239
00:13:00,308 --> 00:13:02,700
we now have these values.

240
00:13:02,700 --> 00:13:05,410
Self is a blank object and now what we're gonna do

241
00:13:05,410 --> 00:13:08,680
is we're gonna use the dot to access something inside this

242
00:13:08,680 --> 00:13:13,230
object and what we're gonna access is this name thing.

243
00:13:14,430 --> 00:13:16,533
Now let me tell you, because it's a bland object,

244
00:13:16,533 --> 00:13:21,060
it does not have anything called name inside it.

245
00:13:21,060 --> 00:13:23,378
It doesn't have a variable called name inside it.

246
00:13:23,378 --> 00:13:26,960
So what this is doing is it's creating a new variable

247
00:13:26,960 --> 00:13:31,140
called name that lives inside of this blank object

248
00:13:31,140 --> 00:13:32,450
that we are calling self.

249
00:13:33,450 --> 00:13:36,000
Of course, you can call it whatever you want.

250
00:13:36,000 --> 00:13:39,150
You can call this my boject if you want or you can spell

251
00:13:39,150 --> 00:13:42,870
it right and call it my object and that's totally okay.

252
00:13:42,870 --> 00:13:43,910
Yeah, that's totally fine.

253
00:13:43,910 --> 00:13:46,180
You can do that if you want, but the convention is to call

254
00:13:46,180 --> 00:13:49,595
it self and in Python, it will always be called self

255
00:13:49,595 --> 00:13:52,700
even though you can call it whatever you want.

256
00:13:52,700 --> 00:13:56,840
So we've got this empty object and inside of it in this dot,

257
00:13:56,840 --> 00:14:00,650
we're defining the name variable and we're giving

258
00:14:00,650 --> 00:14:03,266
that variable the value of new name, which is Rolf Smith.

259
00:14:03,266 --> 00:14:07,660
So now what was previously a completely blank object

260
00:14:07,660 --> 00:14:11,676
now is no longer blank, it contains this name variable.

261
00:14:11,676 --> 00:14:14,480
And in the second line we're doing the same thing.

262
00:14:14,480 --> 00:14:17,340
We're getting our now not blank object and we're

263
00:14:17,340 --> 00:14:20,370
defining the grades variable inside of it and the value

264
00:14:20,370 --> 00:14:23,820
of that is the new grades list that we passed in here.

265
00:14:27,070 --> 00:14:29,540
Now before we move on to the average function,

266
00:14:29,540 --> 00:14:32,367
I want to make sure that this is clear and if we print

267
00:14:32,367 --> 00:14:37,367
student one, this is the object that we've created,

268
00:14:38,053 --> 00:14:41,570
.name, we're gonna get.

269
00:14:42,940 --> 00:14:45,000
Oh, we've done something incorrect here.

270
00:14:45,000 --> 00:14:48,740
Oh, yeah, sorry, we've missed something here.

271
00:14:48,740 --> 00:14:51,410
I'm just gonna put none there for the time being.

272
00:14:52,380 --> 00:14:54,030
Way to kill the flow, man.

273
00:14:54,030 --> 00:14:58,119
Anyway, if we print out student one.name, we get Rolf Smith.

274
00:14:58,119 --> 00:15:00,480
That is what we defined up here.

275
00:15:01,430 --> 00:15:03,780
All that's happening again, student is creating

276
00:15:03,780 --> 00:15:06,030
an empty object and that's getting passed

277
00:15:06,030 --> 00:15:08,470
through the dunder init method as self.

278
00:15:08,470 --> 00:15:11,416
New name is Rolf Smith, new grades is here

279
00:15:11,416 --> 00:15:12,320
and then all we're doing is we're assigning

280
00:15:12,320 --> 00:15:14,690
new variables inside of self and we're giving them

281
00:15:14,690 --> 00:15:16,960
the values that we passed in.

282
00:15:16,960 --> 00:15:21,325
So the student object is an entity that can store data

283
00:15:21,325 --> 00:15:25,380
and the way we store data in it is by using this .name.

284
00:15:27,110 --> 00:15:32,110
However, student one knows that it is our Student

285
00:15:32,348 --> 00:15:35,570
with capital S and the way we can do that

286
00:15:35,570 --> 00:15:37,910
is we can access some special property of it

287
00:15:37,910 --> 00:15:40,130
that is underscore, underscore class.

288
00:15:42,362 --> 00:15:46,390
We can run that and you can see that it is class 'Student'.

289
00:15:46,390 --> 00:15:47,900
That's the type.

290
00:15:50,410 --> 00:15:53,860
So student one knows that it is a student thing

291
00:15:53,860 --> 00:15:58,545
and it has now a name and a grade defined in there.

292
00:15:58,545 --> 00:16:03,010
If we were to define student two, make it equal

293
00:16:03,010 --> 00:16:05,850
to another student, for example, Jose and give it

294
00:16:05,850 --> 00:16:08,390
some grades of 50, 60, 99 and 100.

295
00:16:08,390 --> 00:16:10,457
I got better towards the end of the term.

296
00:16:10,457 --> 00:16:14,260
Then we can print student two.name.

297
00:16:16,070 --> 00:16:20,120
We can run that and notice how it says Jose and we can print

298
00:16:20,120 --> 00:16:25,120
student one.name and notice now how it says Jose and Rolf

299
00:16:27,080 --> 00:16:29,780
Smith, so these two things are completely different

300
00:16:29,780 --> 00:16:32,760
entities, completely different things.

301
00:16:32,760 --> 00:16:35,550
They both know they're students and they both have this

302
00:16:35,550 --> 00:16:38,120
name variable that we've declared in here.

303
00:16:39,090 --> 00:16:40,630
But of course, if we wanted, each one

304
00:16:40,630 --> 00:16:42,480
could have a different property.

305
00:16:42,480 --> 00:16:44,850
You know, that's something that you can do

306
00:16:44,850 --> 00:16:47,670
if you were so inclined and they don't care

307
00:16:47,670 --> 00:16:50,440
about exactly what they are.

308
00:16:50,440 --> 00:16:53,170
All that they know is that because we've defined it

309
00:16:53,170 --> 00:16:56,037
inside here and we've called this dunder init method,

310
00:16:56,037 --> 00:16:59,390
they how have a name and the value of that name

311
00:16:59,390 --> 00:17:01,380
is what we've passed in here.

312
00:17:01,380 --> 00:17:03,700
Nothing magical is going on, just data's being passed

313
00:17:03,700 --> 00:17:05,300
from one place to another and that's really

314
00:17:05,300 --> 00:17:06,800
what programming is all about.

315
00:17:09,420 --> 00:17:12,580
Okay, now that we've created our object and we know that we

316
00:17:12,580 --> 00:17:15,960
can create multiple objects and they're all just independent

317
00:17:15,960 --> 00:17:20,957
blank things that we've assigned these variables to,

318
00:17:20,957 --> 00:17:25,957
we're ready to go into the next step, which is looking

319
00:17:26,170 --> 00:17:28,282
at this average function.

320
00:17:28,282 --> 00:17:30,750
Let's do that in the very next video.

321
00:17:30,750 --> 00:17:31,700
I'll see you there.

