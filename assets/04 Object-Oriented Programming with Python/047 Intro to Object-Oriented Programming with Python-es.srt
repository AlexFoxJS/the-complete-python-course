1
00:00:00,220 --> 00:00:01,620
Jos: Hola y bienvenido de nuevo.

2
00:00:01,620 --> 00:00:03,880
En este video, estamos hablando

3
00:00:03,880 --> 00:00:07,740
de diccionarios y objetos, y vamos a presentar este

4
00:00:07,740 --> 00:00:09,890
concepto de programacin orientada a objetos.

5
00:00:12,070 --> 00:00:14,140
Ahora, de la forma en que

6
00:00:14,140 --> 00:00:16,230
he planeado presentarte esto, estoy muy contento.

7
00:00:16,230 --> 00:00:18,570
Creo que ser bastante comprensible.

8
00:00:18,570 --> 00:00:21,670
As que entremos y veamos cmo resulta.

9
00:00:23,230 --> 00:00:26,400
Hemos considerado los diccionarios como cosas que

10
00:00:26,400 --> 00:00:29,840
podemos usar para representar cosas en nuestro programa.

11
00:00:31,260 --> 00:00:34,050
Por ejemplo, podemos tener un diccionario que

12
00:00:34,050 --> 00:00:36,970
represente a un alumno y podemos decir

13
00:00:36,970 --> 00:00:39,660
que mi alumno es igual a este

14
00:00:42,030 --> 00:00:47,030
nuevo diccionario, tiene un nombre y, potencialmente, tiene algunas calificaciones, algo as.

15
00:00:48,380 --> 00:00:52,730
Ahora, en nuestro programa, este diccionario representa lo que pensamos de

16
00:00:52,730 --> 00:00:56,040
un alumno, y en otras partes de nuestro programa,

17
00:00:56,040 --> 00:00:58,460
podemos hacer cosas como imprimir el

18
00:00:58,460 --> 00:01:00,680
nombre del alumno o calcular la

19
00:01:00,680 --> 00:01:03,491
calificacin promedio del alumno y usar este

20
00:01:03,491 --> 00:01:07,500
diccionario como si fuera un estudiante, aunque, por supuesto, sabemos que

21
00:01:07,500 --> 00:01:10,007
los estudiantes reales en el mundo real

22
00:01:10,007 --> 00:01:12,724
tienen muchas ms propiedades, como una direccin,

23
00:01:12,724 --> 00:01:16,078
y conocen una familia y cosas por el estilo.

24
00:01:16,078 --> 00:01:19,760
En nuestro programa, no nos importan esas otras propiedades, solo nos

25
00:01:19,760 --> 00:01:22,159
importan las propiedades que vamos a usar.

26
00:01:22,159 --> 00:01:25,575
Entonces, en nuestro programa, este diccionario puede representar a un estudiante.

27
00:01:25,575 --> 00:01:28,650
Y si ampliamos nuestro programa y necesitamos ms

28
00:01:28,650 --> 00:01:31,240
propiedades, siempre podemos modificar la estructura de

29
00:01:31,240 --> 00:01:33,050
este diccionario y agregarlas.

30
00:01:35,140 --> 00:01:37,720
Y este concepto de tener algo que representa una

31
00:01:37,720 --> 00:01:40,967
entidad del mundo real es bastante poderoso en la programacin y

32
00:01:40,967 --> 00:01:43,898
nos permite comenzar a pensar en nuestros programas en trminos

33
00:01:43,898 --> 00:01:47,140
de lo que hacen en lugar de cmo lo hacen.

34
00:01:49,800 --> 00:01:52,370
Sigamos adelante y supongamos que queremos calcular la

35
00:01:52,370 --> 00:01:55,360
calificacin promedio de este alumno para que podamos, por

36
00:01:55,360 --> 00:01:58,610
ejemplo, ponerlo en algn tipo de informe en alguna parte.

37
00:01:58,610 --> 00:02:01,190
Creo que ya puede calcular la calificacin promedio de

38
00:02:01,190 --> 00:02:03,330
este estudiante con bastante facilidad, as que

39
00:02:03,330 --> 00:02:05,750
le pedir que pause el video y lo intente.

40
00:02:05,750 --> 00:02:08,306
Intente implementar una funcin que devolver

41
00:02:08,306 --> 00:02:11,980
la calificacin promedio de este diccionario de estudiante.

42
00:02:14,230 --> 00:02:15,290
Espero que tengas eso.

43
00:02:15,290 --> 00:02:17,660
Lo que vamos a hacer es

44
00:02:17,660 --> 00:02:20,090
definir una funcin de calificacin promedio.

45
00:02:20,090 --> 00:02:22,090
Va a tomar un parmetro que

46
00:02:22,090 --> 00:02:25,093
va a ser el estudiante, luego dos puntos al

47
00:02:25,093 --> 00:02:27,850
final del curso y todo lo que va

48
00:02:27,850 --> 00:02:30,433
a hacer es sumar las calificaciones que vamos

49
00:02:30,433 --> 00:02:34,545
a hacer con la suma de calificaciones de los estudiantes y dividir esa

50
00:02:34,545 --> 00:02:37,846
suma por la duracin de las calificaciones de los estudiantes.

51
00:02:37,846 --> 00:02:42,030
La longitud nuevamente es el recuento de cuntos hay

52
00:02:42,030 --> 00:02:44,380
y hay cuatro en este

53
00:02:44,380 --> 00:02:47,317
caso, y naturalmente devolver ese clculo.

54
00:02:47,317 --> 00:02:50,400
Entonces, si quisiramos imprimir el promedio

55
00:02:52,470 --> 00:02:54,690
de mi alumno, podemos hacerlo.

56
00:02:54,690 --> 00:02:58,170
De nuevo, todo lo que estamos haciendo aqu es que estamos evaluando a mi estudiante.

57
00:02:58,170 --> 00:02:59,620
Es solo un diccionario.

58
00:02:59,620 --> 00:03:01,500
Estamos llamando a la funcin

59
00:03:01,500 --> 00:03:04,668
de calificacin promedio con eso como argumento para que

60
00:03:04,668 --> 00:03:08,210
el valor de mi alumno, este diccionario, vaya al parmetro

61
00:03:09,570 --> 00:03:12,130
de estudiante y que devuelva estos clculos

62
00:03:12,130 --> 00:03:13,380
aqu y luego lo imprimiremos.

63
00:03:13,380 --> 00:03:14,213
Entonces, corramos.

64
00:03:15,745 --> 00:03:18,695
Y como pueden ver, obtenemos 86. 75, que suena bien.

65
00:03:20,180 --> 00:03:22,455
Sin embargo, y aqu viene

66
00:03:22,455 --> 00:03:26,520
lo interesante, hay un error con todo este programa.

67
00:03:26,520 --> 00:03:27,970
Voy a eliminar eso.

68
00:03:27,970 --> 00:03:30,320
El defecto no est en el cdigo.

69
00:03:30,320 --> 00:03:31,730
El cdigo est totalmente bien, ya sabes.

70
00:03:31,730 --> 00:03:33,230
Hace lo que debe hacer.

71
00:03:34,185 --> 00:03:35,018
Calcula la calificacin promedio.

72
00:03:35,018 --> 00:03:36,646
El alumno es un diccionario que est definido all.

73
00:03:36,646 --> 00:03:38,362
Todo el cdigo funciona y se

74
00:03:38,362 --> 00:03:40,940
imprime o nos da el valor que queremos.

75
00:03:42,310 --> 00:03:46,340
Pero la falla est en su diseo, no en el diseo de la

76
00:03:46,340 --> 00:03:50,117
interfaz del usuario, sino en el diseo del software, y este es un

77
00:03:50,117 --> 00:03:53,440
concepto, y un tema completo que la mayora de los tutoriales

78
00:03:53,440 --> 00:03:56,962
de codificacin saltan por completo, pero creo que es bastante importante y

79
00:03:56,962 --> 00:03:57,800
Creo que es

80
00:03:57,800 --> 00:04:00,990
una buena manera de explicar la programacin orientada a objetos.

81
00:04:00,990 --> 00:04:04,000
El error en el diseo del software

82
00:04:04,000 --> 00:04:09,000
es que estas dos funciones no estn relacionadas, aunque estn muy relacionadas,

83
00:04:10,660 --> 00:04:15,270
o aparentemente relacionadas, estn esencialmente separadas, y lo que quiero decir

84
00:04:15,270 --> 00:04:18,600
con eso es que tienes esta funcin y

85
00:04:18,600 --> 00:04:22,110
en un gran programa, potencialmente, podra tener una

86
00:04:22,110 --> 00:04:24,360
funcin en algn lugar en

87
00:04:24,360 --> 00:04:27,090
un archivo completamente diferente que le

88
00:04:27,090 --> 00:04:28,760
da la calificacin promedio.

89
00:04:29,670 --> 00:04:31,100
Y en un archivo completamente

90
00:04:31,100 --> 00:04:32,861
diferente, podra tener este estudiante, por lo

91
00:04:32,861 --> 00:04:36,030
que podran estar en lugares completamente diferentes fsicamente en un proyecto grande.

92
00:04:37,060 --> 00:04:40,560
Sin embargo, lo que decimos es que

93
00:04:40,560 --> 00:04:44,610
estas dos cosas estn estrechamente relacionadas, ya que la

94
00:04:44,610 --> 00:04:49,610
funcin de calificacin promedio requiere que el parmetro sea un diccionario

95
00:04:50,560 --> 00:04:55,020
y requiere que el parmetro tenga una calificacin clave

96
00:04:55,020 --> 00:04:57,450
para poder cumplir su propsito.

97
00:04:57,450 --> 00:04:59,700
Est muy bien que una funcin tenga

98
00:04:59,700 --> 00:05:02,373
esos requisitos, pero no cuando tambin es posible

99
00:05:02,373 --> 00:05:05,910
que la funcin est en un lugar completamente diferente porque entonces

100
00:05:05,910 --> 00:05:08,040
digamos que desea cambiar las calificaciones

101
00:05:08,040 --> 00:05:12,640
para obtener resultados, por ejemplo, tendra un caos si Hay funciones en todo el

102
00:05:12,640 --> 00:05:15,160
lugar que dependen de que este estudiante tenga

103
00:05:15,160 --> 00:05:18,270
una clave de calificaciones, pero ahora la cambias.

104
00:05:19,910 --> 00:05:23,290
Entonces esta es la falla en el diseo de este programa.

105
00:05:23,290 --> 00:05:28,290
Tenemos una funcin que no est viviendo con el estudiante, pero est

106
00:05:29,460 --> 00:05:32,220
estrechamente relacionada con ese estudiante o con

107
00:05:32,220 --> 00:05:33,890
esta estructura de diccionario.

108
00:05:35,630 --> 00:05:38,683
As que sera genial si pudiramos tener nuestra

109
00:05:38,683 --> 00:05:43,683
funcin viviendo dentro del diccionario para que viva en el mismo lugar

110
00:05:44,300 --> 00:05:47,190
que los datos sobre los que acta.

111
00:05:47,190 --> 00:05:48,550
Algo como esto.

112
00:05:48,550 --> 00:05:51,154
Digamos que agregamos una nueva clave aqu

113
00:05:51,154 --> 00:05:55,420
que es el promedio y esto como algo que calcula el promedio.

114
00:05:56,660 --> 00:05:58,450
Esta podra ser una

115
00:05:58,450 --> 00:06:03,450
funcin que calcula el promedio de un estudiante, especficamente de este estudiante.

116
00:06:04,030 --> 00:06:09,030
Entonces, actualmente, con estas calificaciones, esto debera ser 86. 75, pero por supuesto, si agregamos

117
00:06:09,170 --> 00:06:12,450
otra calificacin, digamos 100, esto debera subir

118
00:06:12,450 --> 00:06:14,830
a 90 o algo as.

119
00:06:15,976 --> 00:06:20,976
Este valor aqu debe ser una funcin para que se pueda volver a calcular

120
00:06:21,780 --> 00:06:24,170
cada vez que cambien las calificaciones.

121
00:06:26,860 --> 00:06:31,810
Sin embargo, no podemos hacer eso con un diccionario.

122
00:06:31,810 --> 00:06:35,329
Un diccionario no nos permitir poner aqu una funcin

123
00:06:35,329 --> 00:06:39,310
que acte sobre los datos dentro de ese mismo diccionario.

124
00:06:40,380 --> 00:06:41,740
Simplemente no es posible.

125
00:06:43,391 --> 00:06:44,650
Lo siento.

126
00:06:45,780 --> 00:06:50,250
Entonces, debemos usar objetos para esto porque el objeto

127
00:06:50,250 --> 00:06:54,260
es la progresin natural en esta utilidad del

128
00:06:54,260 --> 00:06:57,420
diccionario, donde nos permitir actuar sobre

129
00:06:57,420 --> 00:07:00,000
los datos que contiene el objeto.

130
00:07:01,720 --> 00:07:04,730
Entonces, podemos comenzar a pensar en los objetos

131
00:07:04,730 --> 00:07:09,730
como el punto de partida de una cosa que contiene datos, en este caso,

132
00:07:09,850 --> 00:07:14,450
nombre y grados, y tambin puede contener acciones para hacer con esos datos,

133
00:07:14,450 --> 00:07:16,900
en este caso, calcular el promedio.

134
00:07:20,440 --> 00:07:24,010
As que voy a mantener eso aqu mientras implementamos

135
00:07:24,010 --> 00:07:27,560
nuestra definicin de objeto, vamos a referirnos a ella.

136
00:07:29,220 --> 00:07:32,250
Entonces, qu voy a hacer ahora, ahora

137
00:07:32,250 --> 00:07:36,130
que sabemos que un objeto almacena datos y acciones relacionados

138
00:07:36,130 --> 00:07:41,130
con los datos, voy a definir ese objeto y va a ser

139
00:07:41,710 --> 00:07:46,500
bastante confuso para empezar, pero quiero que lo hagamos? apgate a ello.

140
00:07:46,500 --> 00:07:48,240
Vamos a definir los objetos, luego

141
00:07:48,240 --> 00:07:49,730
vamos a crear el objeto.

142
00:07:49,730 --> 00:07:51,760
Esos son dos pasos distintos.

143
00:07:51,760 --> 00:07:54,260
Y luego vamos a explicar exactamente qu est pasando.

144
00:07:54,260 --> 00:07:56,362
Lo que quiero que entiendas en

145
00:07:56,362 --> 00:08:00,790
trminos de estos objetos es que son solo cosas que almacenan datos.

146
00:08:00,790 --> 00:08:03,730
Los datos pueden ser un nombre y

147
00:08:03,730 --> 00:08:06,810
las calificaciones, y tambin pueden almacenar estas acciones.

148
00:08:06,810 --> 00:08:10,424
Comencemos por definir cmo se ve un objeto.

149
00:08:10,424 --> 00:08:13,220
Y lo hacemos con una clase.

150
00:08:14,420 --> 00:08:17,950
De acuerdo, la clase es algo que define cules son

151
00:08:17,950 --> 00:08:22,270
los objetos y, por lo tanto, tenemos la clase de palabras clave.

152
00:08:22,270 --> 00:08:23,920
Luego tenemos el nombre de la

153
00:08:23,920 --> 00:08:26,700
clase y normalmente en Python, comienzan con una letra mayscula

154
00:08:26,700 --> 00:08:28,160
y luego tenemos dos puntos.

155
00:08:28,160 --> 00:08:30,082
Ahora sabemos que despus de dos

156
00:08:30,082 --> 00:08:33,078
puntos, las cosas deben sangrarse ms y, como pueden

157
00:08:33,078 --> 00:08:36,540
ver, Ripple ya sugiere que pongamos cuatro espacios en el frente.

158
00:08:37,996 --> 00:08:42,710
Ahora dentro de esta clase, con sangra como cuatro espacios,

159
00:08:42,710 --> 00:08:45,340
vamos a definir dos funciones.

160
00:08:46,920 --> 00:08:49,360
Y esto es bastante extrao porque, hasta ahora, hemos estado

161
00:08:49,360 --> 00:08:51,720
definiendo funciones y en el nivel superior de sangrado.

162
00:08:51,720 --> 00:08:53,780
Eso est en la parte izquierda de la pgina.

163
00:08:53,780 --> 00:08:56,490
Ahora los vamos a definir dentro de la clase.

164
00:08:56,490 --> 00:08:58,290
Y eso significar que

165
00:08:58,290 --> 00:09:00,220
la clase contendr estas funciones.

166
00:09:01,170 --> 00:09:03,510
Comencemos definiendo una funcin, que es una

167
00:09:03,510 --> 00:09:06,070
funcin especial llamada guin bajo, guin bajo, que

168
00:09:06,070 --> 00:09:08,950
son dos guiones bajos, guion bajo inicial, guion bajo.

169
00:09:10,050 --> 00:09:13,300
En Python, estas funciones con dos guiones bajos en el frente y

170
00:09:13,300 --> 00:09:15,760
dos guiones bajos en la parte posterior, son funciones

171
00:09:15,760 --> 00:09:17,470
especiales y se llaman funciones dunder,

172
00:09:17,470 --> 00:09:19,320
por lo que esto sera un dunder init.

173
00:09:19,320 --> 00:09:20,830
Dunder para doble guin bajo.

174
00:09:22,280 --> 00:09:24,690
Esta funcin de inicio tomar tres parmetros.

175
00:09:24,690 --> 00:09:27,930
El primero es uno mismo, el siguiente ser un nuevo nombre y

176
00:09:27,930 --> 00:09:29,660
el prximo ser de nuevo grado.

177
00:09:29,660 --> 00:09:31,940
Estos parmetros se pueden llamar como quieras,

178
00:09:31,940 --> 00:09:35,000
pero me estoy eligiendo por una razn en particular y

179
00:09:35,000 --> 00:09:36,942
estos pueden ser cualquier cosa, pero

180
00:09:36,942 --> 00:09:40,660
estos sern el nombre y la calificacin que almacenaremos en nuestro objeto.

181
00:09:40,660 --> 00:09:44,190
Y dentro de eso, vamos a decir s mismo. nombre, woo, completamente

182
00:09:44,190 --> 00:09:47,450
equivocado all, yo. el nombre equivale a un nuevo

183
00:09:48,910 --> 00:09:51,742
nombre y a uno mismo. las calificaciones equivalen a las nuevas

184
00:09:51,742 --> 00:09:53,980
calificaciones y me asegurar de hacer nuevas calificaciones all.

185
00:09:55,660 --> 00:09:58,100
De acuerdo, pasar a la segunda funcin va

186
00:09:58,100 --> 00:10:00,390
a ser una funcin de calificacin promedio

187
00:10:00,390 --> 00:10:02,810
muy similar a la que tenemos aqu.

188
00:10:02,810 --> 00:10:04,840
Lo llamar promedio y tomar

189
00:10:04,840 --> 00:10:06,940
un nico parmetro llamado self.

190
00:10:07,960 --> 00:10:10,560
Entonces nuevamente el colon y luego lo que va a

191
00:10:10,560 --> 00:10:15,560
regresar es la suma del yo. grados divididos por la longitud de uno mismo. grados.

192
00:10:16,030 --> 00:10:19,699
As que aprecio que solo estoy escribiendo y mirando y

193
00:10:19,699 --> 00:10:24,510
ahora comencemos a explicar exactamente qu est pasando aqu, pero antes de que

194
00:10:24,510 --> 00:10:27,270
podamos hacer eso, antes de que podamos

195
00:10:27,270 --> 00:10:30,760
explicar la sintaxis aterradora aqu, tenemos que definir o

196
00:10:30,760 --> 00:10:33,230
ms bien tenemos que crear un objeto.

197
00:10:33,230 --> 00:10:34,960
Lo que hemos definido aqu

198
00:10:34,960 --> 00:10:37,640
es que hemos definido la estructura del objeto.

199
00:10:37,640 --> 00:10:40,782
Ahora vamos a crear un objeto, as que vamos a

200
00:10:40,782 --> 00:10:43,490
crear un objeto llamado estudiante uno y la forma

201
00:10:43,490 --> 00:10:48,490
en que creamos un nuevo objeto en Python es que llamamos a la clase como tal.

202
00:10:49,710 --> 00:10:51,630
Vea que tenemos un corchete de apertura

203
00:10:51,630 --> 00:10:55,330
y cierre all y que crea un nuevo objeto de tipo estudiante, por

204
00:10:56,620 --> 00:10:59,570
lo que ahora se llama a esta clase de estudiantes

205
00:10:59,570 --> 00:11:02,120
usando estos corchetes como si fuera una funcin y

206
00:11:02,120 --> 00:11:03,920
eso crea un objeto completamente nuevo.

207
00:11:04,880 --> 00:11:06,710
Entonces, qu es un objeto?

208
00:11:07,649 --> 00:11:11,370
Bueno, piense en un objeto solo como algo que

209
00:11:11,370 --> 00:11:15,637
pueda almacenar datos y le diremos qu datos almacenar, as

210
00:11:15,637 --> 00:11:20,637
que dentro de esta llamada de estudiante aqu, grito, disculpe por eso,

211
00:11:22,040 --> 00:11:23,840
vamos a poner dos cosas.

212
00:11:24,880 --> 00:11:27,650
Vamos a poner a Rolf Smith y luego

213
00:11:27,650 --> 00:11:30,390
tambin pondremos 70, 88, 90 y 99.

214
00:11:34,060 --> 00:11:36,240
Ahora lo que est pasando es

215
00:11:36,240 --> 00:11:39,430
Lo primero que suceder es que esta

216
00:11:39,430 --> 00:11:42,080
llamada crear un nuevo objeto.

217
00:11:42,080 --> 00:11:44,520
Un objeto es algo completamente vaco, o

218
00:11:44,520 --> 00:11:47,000
algo ms o menos vaco que nos

219
00:11:47,000 --> 00:11:50,300
permite almacenar datos y nos permite almacenar acciones.

220
00:11:52,240 --> 00:11:54,696
Cuando se crea el objeto, que

221
00:11:54,696 --> 00:11:59,130
se crea antes de llamar a cualquiera de estas funciones,

222
00:11:59,130 --> 00:12:02,510
inmediatamente llama a esta funcin de inicio dunder.

223
00:12:02,510 --> 00:12:04,380
Entonces el objeto se crea primero y

224
00:12:04,380 --> 00:12:06,580
luego llama inmediatamente a esta funcin de inicio dunder.

225
00:12:07,660 --> 00:12:12,532
El nuevo objeto vaco que se acaba de crear se transfiere a s

226
00:12:12,532 --> 00:12:17,532
mismo como el primer parmetro, por lo que el yo ahora es un objeto

227
00:12:19,020 --> 00:12:22,170
vaco y en blanco que esencialmente no tiene nada.

228
00:12:24,510 --> 00:12:27,180
Y la forma en que est estructurado

229
00:12:27,180 --> 00:12:30,167
Python, le da a Rolf Smith un nuevo

230
00:12:30,167 --> 00:12:34,580
nombre, el segundo parmetro y esta lista como nuevos grados, el tercer parmetro.

231
00:12:35,580 --> 00:12:36,850
Tercero, s, tercero.

232
00:12:38,400 --> 00:12:40,950
Estoy tan confundido pensando en ceros y unos aqu.

233
00:12:42,040 --> 00:12:44,250
Muy, muy importante.

234
00:12:44,250 --> 00:12:47,397
Self es un objeto en blanco que se

235
00:12:47,397 --> 00:12:50,890
cre antes de llamar a esta funcin dunder init.

236
00:12:50,890 --> 00:12:53,360
El nuevo nombre es el primer argumento aqu,

237
00:12:53,360 --> 00:12:55,310
nuevas calificaciones es el segundo argumento aqu.

238
00:12:56,500 --> 00:13:00,308
Ahora, sabemos que cuando entramos en la primera

239
00:13:00,308 --> 00:13:02,700
lnea, ahora tenemos estos valores.

240
00:13:02,700 --> 00:13:05,410
Self es un objeto en blanco y ahora lo

241
00:13:05,410 --> 00:13:08,680
que vamos a hacer es usar el punto para acceder a

242
00:13:08,680 --> 00:13:13,230
algo dentro de este objeto y lo que vamos a acceder es este nombre.

243
00:13:14,430 --> 00:13:16,533
Ahora djame decirte, porque

244
00:13:16,533 --> 00:13:21,060
es un objeto insulso, no tiene nada llamado nombre dentro.

245
00:13:21,060 --> 00:13:23,378
No tiene una variable llamada nombre dentro de ella.

246
00:13:23,378 --> 00:13:26,960
Entonces, lo que est haciendo es crear una nueva

247
00:13:26,960 --> 00:13:31,140
variable llamada nombre que vive dentro de este objeto en blanco

248
00:13:31,140 --> 00:13:32,450
que llamamos auto.

249
00:13:33,450 --> 00:13:36,000
Por supuesto, puedes llamarlo como quieras.

250
00:13:36,000 --> 00:13:39,150
Puedes llamar a esto mi boject si quieres o puedes

251
00:13:39,150 --> 00:13:42,870
deletrearlo correctamente y llamarlo mi objeto y eso est totalmente bien.

252
00:13:42,870 --> 00:13:43,910
S, eso est totalmente bien.

253
00:13:43,910 --> 00:13:46,180
Puede hacerlo si lo desea, pero

254
00:13:46,180 --> 00:13:49,595
la convencin es llamarse a s mismo y, en Python,

255
00:13:49,595 --> 00:13:52,700
siempre se llamar self aunque pueda llamarlo como quiera.

256
00:13:52,700 --> 00:13:56,840
As que tenemos este objeto vaco y dentro de este punto, estamos definiendo

257
00:13:56,840 --> 00:14:00,650
la variable de nombre y estamos dando a esa variable el valor

258
00:14:00,650 --> 00:14:03,266
del nuevo nombre, que es Rolf Smith.

259
00:14:03,266 --> 00:14:07,660
As que ahora lo que anteriormente era un objeto completamente vaco

260
00:14:07,660 --> 00:14:11,676
ahora ya no est en blanco, contiene esta variable de nombre.

261
00:14:11,676 --> 00:14:14,480
Y en la segunda lnea, estamos haciendo lo mismo.

262
00:14:14,480 --> 00:14:17,340
Estamos obteniendo nuestro objeto que ahora no est en blanco

263
00:14:17,340 --> 00:14:20,370
y estamos definiendo la variable de calificaciones dentro de l y

264
00:14:20,370 --> 00:14:23,820
el valor de eso es la nueva lista de calificaciones que pasamos aqu.

265
00:14:27,070 --> 00:14:29,540
Ahora, antes de pasar a la

266
00:14:29,540 --> 00:14:32,367
funcin promedio, quiero asegurarme de que esto

267
00:14:32,367 --> 00:14:37,367
est claro y si imprimimos uno, este es el objeto que hemos creado. nombre, lo conseguiremos

268
00:14:38,053 --> 00:14:41,570
Oh, hemos hecho algo incorrecto aqu.

269
00:14:42,940 --> 00:14:45,000
Oh, s, lo siento, nos hemos perdido algo aqu.

270
00:14:45,000 --> 00:14:48,740
No voy a poner ninguno all por el momento.

271
00:14:48,740 --> 00:14:51,410
Manera de matar el flujo, hombre.

272
00:14:52,380 --> 00:14:54,030
De todos modos, si imprimimos uno de los estudiantes. nombre, conseguimos a Rolf Smith.

273
00:14:54,030 --> 00:14:58,119
Eso es lo que definimos aqu.

274
00:14:58,119 --> 00:15:00,480
Todo lo que est pasando de nuevo, el estudiante

275
00:15:01,430 --> 00:15:03,780
est creando un objeto vaco y eso se est

276
00:15:03,780 --> 00:15:06,030
pasando a travs del mtodo dunder init como uno mismo.

277
00:15:06,030 --> 00:15:08,470
El nuevo nombre es Rolf Smith, las nuevas calificaciones estn

278
00:15:08,470 --> 00:15:11,416
aqu y luego todo lo que estamos haciendo es asignar nuevas variables

279
00:15:11,416 --> 00:15:12,320
dentro de nosotros mismos

280
00:15:12,320 --> 00:15:14,690
y les estamos dando los valores que pasamos.

281
00:15:14,690 --> 00:15:16,960
Entonces, el objeto del estudiante es una entidad

282
00:15:16,960 --> 00:15:21,325
que puede almacenar datos y la forma en que almacenamos los datos en l usando esto. nombre.

283
00:15:21,325 --> 00:15:25,380
Sin embargo, el estudiante uno sabe

284
00:15:27,110 --> 00:15:32,110
que es nuestro Estudiante con mayscula S y la forma en que podemos hacerlo es

285
00:15:32,348 --> 00:15:35,570
que podemos acceder a alguna propiedad especial del mismo

286
00:15:35,570 --> 00:15:37,910
que sea guin bajo, subrayado de clase.

287
00:15:37,910 --> 00:15:40,130
Podemos ejecutar eso y puedes ver que es clase 'Estudiante'.

288
00:15:42,362 --> 00:15:46,390
Ese es el tipo.

289
00:15:46,390 --> 00:15:47,900
Entonces el estudiante uno sabe que

290
00:15:50,410 --> 00:15:53,860
es algo de estudiante y ahora tiene un nombre y una calificacin definidos all.

291
00:15:53,860 --> 00:15:58,545
Si tuviramos que definir al estudiante dos, hgalo igual a

292
00:15:58,545 --> 00:16:03,010
otro estudiante, por ejemplo, Jos, y dle algunas calificaciones

293
00:16:03,010 --> 00:16:05,850
de 50, 60, 99 y 100.

294
00:16:05,850 --> 00:16:08,390
Me mejor hacia el final del trimestre.

295
00:16:08,390 --> 00:16:10,457
Entonces podemos imprimir el alumno dos. nombre.

296
00:16:10,457 --> 00:16:14,260
Podemos ejecutar eso y

297
00:16:16,070 --> 00:16:20,120
observar cmo dice Jos y podemos imprimir el alumno uno. nombre y observe ahora cmo dice Jos y Rolf

298
00:16:20,120 --> 00:16:25,120
Smith, entonces estas dos cosas son

299
00:16:27,080 --> 00:16:29,780
entidades completamente diferentes, cosas completamente diferentes.

300
00:16:29,780 --> 00:16:32,760
Ambos saben que son estudiantes y ambos tienen

301
00:16:32,760 --> 00:16:35,550
esta variable de nombre que hemos declarado aqu.

302
00:16:35,550 --> 00:16:38,120
Pero, por supuesto, si quisiramos, cada uno podra

303
00:16:39,090 --> 00:16:40,630
tener una propiedad diferente.

304
00:16:40,630 --> 00:16:42,480
Ya sabes, eso es algo

305
00:16:42,480 --> 00:16:44,850
que puedes hacer si estuvieras inclinado

306
00:16:44,850 --> 00:16:47,670
y no les importa exactamente lo que son.

307
00:16:47,670 --> 00:16:50,440
Todo lo que saben es que porque lo

308
00:16:50,440 --> 00:16:53,170
hemos definido aqu y hemos llamado a este

309
00:16:53,170 --> 00:16:56,037
mtodo dunder init, ellos tienen un nombre y el

310
00:16:56,037 --> 00:16:59,390
valor de ese nombre es lo que hemos pasado aqu.

311
00:16:59,390 --> 00:17:01,380
Nada mgico est pasando, solo se pasan

312
00:17:01,380 --> 00:17:03,700
datos de un lugar a otro y de

313
00:17:03,700 --> 00:17:05,300
eso se trata realmente la programacin.

314
00:17:05,300 --> 00:17:06,800
De acuerdo, ahora que

315
00:17:09,420 --> 00:17:12,580
hemos creado nuestro objeto y sabemos que podemos

316
00:17:12,580 --> 00:17:15,960
crear mltiples objetos y todos son solo elementos

317
00:17:15,960 --> 00:17:20,957
en blanco independientes a los que les hemos asignado estas variables, estamos

318
00:17:20,957 --> 00:17:25,957
listos para pasar al siguiente paso, que es mirando esta funcin promedio.

319
00:17:26,170 --> 00:17:28,282
Hagmoslo en el prximo video.

320
00:17:28,282 --> 00:17:30,750
Te ver all.

321
00:17:30,750 --> 00:17:31,700
&nbsp;

