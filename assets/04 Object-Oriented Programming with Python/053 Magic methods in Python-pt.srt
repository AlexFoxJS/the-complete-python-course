1
00:00:00,120 --> 00:00:01,430
Narrador: Ol e bem vindo de volta.

2
00:00:01,430 --> 00:00:05,130
Neste vdeo estamos falando de mtodos especiais.

3
00:00:05,130 --> 00:00:09,370
Em uma classe, como vimos, nem todos os mtodos so iguais.

4
00:00:09,370 --> 00:00:10,990
O Python s vezes faz

5
00:00:10,990 --> 00:00:13,400
uma distino dependendo do nome do mtodo.

6
00:00:13,400 --> 00:00:16,410
Aqui est um exemplo de um desses mtodos.

7
00:00:17,410 --> 00:00:19,930
Isso  um mtodo def dunder init.

8
00:00:26,590 --> 00:00:28,936
O mtodo dunder init  chamado por

9
00:00:28,936 --> 00:00:31,300
voc quando voc cria um novo objeto.

10
00:00:31,300 --> 00:00:34,660
O novo objeto em branco  analisado para si mesmo

11
00:00:34,660 --> 00:00:36,610
e o nome  o que

12
00:00:36,610 --> 00:00:38,810
voc coloca dentro dos argumentos dos construtores.

13
00:00:39,960 --> 00:00:42,400
E depois definimos uma nova propriedade como

14
00:00:42,400 --> 00:00:45,390
hight self e visualizamos o valor de nosso parmetro.

15
00:00:46,680 --> 00:00:50,900
Portanto, o mtodo dunder init  um mtodo especial, porque o Python

16
00:00:50,900 --> 00:00:53,840
o chama automaticamente quando voc cria um objeto,

17
00:00:54,760 --> 00:00:56,270
e voc no precisa

18
00:00:56,270 --> 00:00:57,380
cham-lo por conta prpria.

19
00:00:58,370 --> 00:01:01,930
Ento aqui esto alguns outros mtodos interessantes e especiais.

20
00:01:01,930 --> 00:01:05,530
Primeiro de tudo, vamos definir uma lista de filmes.

21
00:01:10,590 --> 00:01:12,310
O que voc acha que

22
00:01:12,310 --> 00:01:15,900
vai acontecer quando eu imprimir a aula de cinema?

23
00:01:16,890 --> 00:01:19,780
Agora, ns olhamos para imprimir a classe do aluno mais

24
00:01:19,780 --> 00:01:22,960
cedo e voc tem algum tipo de coisa de estudante impressa.

25
00:01:22,960 --> 00:01:25,480
Qual  a classe do filme?

26
00:01:27,440 --> 00:01:28,360
Isso  um erro?

27
00:01:31,650 --> 00:01:34,824
Bem, como voc pode ver, ns temos uma lista de classes.

28
00:01:34,824 --> 00:01:36,560
Isso  uma funcionalidade bem bizarra l.

29
00:01:36,560 --> 00:01:40,920
Isso significa que uma lista  de alguma forma um objeto?

30
00:01:42,340 --> 00:01:47,280
Sim, praticamente tudo em Python  um objeto.

31
00:01:47,280 --> 00:01:49,520
E essa lista no  diferente.

32
00:01:49,520 --> 00:01:52,270
S no tivemos que cri-lo usando esse

33
00:01:52,270 --> 00:01:54,730
construtor como os alunos digitam coisa.

34
00:01:55,590 --> 00:01:57,630
Em vez disso, o Python criou isso

35
00:01:57,630 --> 00:01:59,800
para ns automaticamente quando usamos essa sintaxe.

36
00:02:00,760 --> 00:02:05,760
Voc pode, no entanto, imprimir, por exemplo, uma classe de pontos, e

37
00:02:06,400 --> 00:02:10,140
isso lhe dar uma classe de strings, veja str.

38
00:02:11,920 --> 00:02:15,330
Ento tudo  um objeto em Python.

39
00:02:16,450 --> 00:02:20,510
O que significa para uma lista ser um objeto?

40
00:02:20,510 --> 00:02:22,530
Bem, isso significa que tudo o que

41
00:02:22,530 --> 00:02:26,070
podemos fazer com uma lista, podemos fazer com nossas prprias classes.

42
00:02:27,713 --> 00:02:28,680
Ento aqui est um exemplo.

43
00:02:28,680 --> 00:02:31,510
Ns podemos imprimir o len de filmes.

44
00:02:33,010 --> 00:02:36,630
Ok, agora sabemos que filmes so um objeto.

45
00:02:36,630 --> 00:02:38,400
Ento o que est acontecendo

46
00:02:38,400 --> 00:02:42,520
nos bastidores que est nos permitindo chamar essa funo len, d

47
00:02:42,520 --> 00:02:46,030
a ele o objeto movies e ele nos deu dois.

48
00:02:47,720 --> 00:02:49,350
Bem, vamos fazer isso.

49
00:02:50,345 --> 00:02:51,540
Vamos criar uma garagem de classe.

50
00:02:53,473 --> 00:02:56,500
E nele vamos definir um mtodo init.

51
00:02:56,500 --> 00:03:00,070
Isso vai definir carros auto-ponto para ser uma lista vazia.

52
00:03:03,904 --> 00:03:05,780
Agora, podemos criar nossa garagem, digamos que a

53
00:03:07,028 --> 00:03:08,350
Ford vai estar na garagem.

54
00:03:09,270 --> 00:03:13,720
E agora este Ford tem um Ford. carros tem essa propriedade de

55
00:03:13,720 --> 00:03:17,920
carros aqui, que vai imprimir uma lista vazia quando

56
00:03:17,920 --> 00:03:20,515
ns imprimirmos, porque  para isso

57
00:03:20,515 --> 00:03:22,320
que ns atribumos isso.

58
00:03:22,320 --> 00:03:27,320
No entanto, podemos acrescentar, podemos dizer Ford. carros. acrescentar fiesta.

59
00:03:28,280 --> 00:03:33,280
E a Ford. carros. adicione o foco por exemplo.

60
00:03:33,400 --> 00:03:34,940
Ento, quando executamos este programa

61
00:03:34,940 --> 00:03:38,360
novamente, agora temos uma lista de dois itens, fiesta e foco.

62
00:03:40,570 --> 00:03:45,570
Agora, se eu quisesse fazer len de Ford.

63
00:03:46,330 --> 00:03:47,960
Ford  a garagem, mas

64
00:03:47,960 --> 00:03:50,270
eu quero pegar o len da Ford, porque

65
00:03:50,270 --> 00:03:53,510
isso vai me dizer quantos carros existem dentro da minha garagem.

66
00:03:54,800 --> 00:03:59,470
Naturalmente, quando executamos isso, obtemos um erro de tipo.

67
00:03:59,470 --> 00:04:02,380
Objeto do tipo garagem no tem len.

68
00:04:02,380 --> 00:04:04,080
Ok, esse  um erro interessante.

69
00:04:05,440 --> 00:04:08,480
Ele nos diz que o Python no pode calcular o

70
00:04:08,480 --> 00:04:09,870
len desta garagem, porque no

71
00:04:09,870 --> 00:04:11,790
sabe o que o len da garagem

72
00:04:11,790 --> 00:04:13,990
deve ser, o que significa, at mesmo.

73
00:04:15,430 --> 00:04:18,720
Ento, para dizer ao Python que

74
00:04:18,720 --> 00:04:23,720
essa garagem tem comprimento, precisamos definir outro mtodo dunder.

75
00:04:24,050 --> 00:04:26,901
E isso  sublinhado underscore len underscore sublinhado.

76
00:04:26,901 --> 00:04:30,830
Mais uma vez, leva voc para si mesmo, como todos os mtodos fazem e, em seguida,

77
00:04:31,779 --> 00:04:33,900
ele tem que retornar o comprimento da garagem.

78
00:04:33,900 --> 00:04:36,860
Neste caso, quantos carros existem.

79
00:04:36,860 --> 00:04:39,450
Ento, vai retornar a durao do eu. carros.

80
00:04:40,760 --> 00:04:42,700
Agora, quando executarmos este programa novamente, veremos

81
00:04:42,700 --> 00:04:44,470
que dois so impressos, embora tenhamos

82
00:04:44,470 --> 00:04:46,880
chamado len da Ford de nosso objeto de garagem,

83
00:04:47,941 --> 00:04:51,210
em vez de len de Ford. carros.

84
00:04:52,540 --> 00:04:55,070
Isso porque, quando chamamos len, o ford

85
00:04:55,070 --> 00:04:58,280
vem at aqui, eu e depois retornamos o

86
00:04:58,280 --> 00:05:00,680
comprimento do eu. carros.

87
00:05:02,080 --> 00:05:06,320
A lista tambm tem esse mtodo dunder len

88
00:05:06,320 --> 00:05:10,970
que nos fornece o nmero de itens na lista.

89
00:05:10,970 --> 00:05:15,180
Essa  apenas uma definio um pouco mais complicada, mas,

90
00:05:15,180 --> 00:05:17,080
no entanto, o que temos

91
00:05:17,080 --> 00:05:19,980
de saber  que esse mtodo permite

92
00:05:19,980 --> 00:05:22,330
que faamos algo e retornemos um

93
00:05:22,330 --> 00:05:24,580
valor que nos  devolvido quando

94
00:05:24,580 --> 00:05:27,680
chamamos a funo len em nosso objeto.

95
00:05:31,550 --> 00:05:36,550
Vamos fazer algo como, por exemplo, ford zero.

96
00:05:38,580 --> 00:05:41,500
Ford zero deve nos dar o primeiro carro na

97
00:05:41,500 --> 00:05:43,230
fila de carros com os quais

98
00:05:43,230 --> 00:05:44,500
estamos trabalhando, por exemplo.

99
00:05:44,500 --> 00:05:45,770
Neste caso, deve ser

100
00:05:45,770 --> 00:05:48,180
fiesta porque  o primeiro carro que ns adicionamos.

101
00:05:48,180 --> 00:05:50,760
 claro que se executarmos isso, conseguiremos

102
00:05:50,760 --> 00:05:53,860
que o objeto de garagem no suporte a indexao.

103
00:05:53,860 --> 00:05:56,440
Lembre-se, isso est acessando algo por um ndice, o

104
00:05:56,440 --> 00:05:57,900
Python o chama de indexao.

105
00:05:58,970 --> 00:06:00,160
O que fazer?

106
00:06:00,160 --> 00:06:03,280
Bem, voc adivinhou, vamos definir outro mtodo dunder.

107
00:06:04,150 --> 00:06:06,100
Aqui est um desafio para voc.

108
00:06:06,100 --> 00:06:08,280
Pause o vdeo e

109
00:06:08,280 --> 00:06:12,510
descubra como voc pode indexar seu prprio objeto personalizado.

110
00:06:12,510 --> 00:06:14,720
Vai ser um pouco um desafio, um pouco complicado, mas tenho

111
00:06:14,720 --> 00:06:16,070
certeza que voc pode fazer isso.

112
00:06:19,090 --> 00:06:21,100
Ok, tenho certeza que voc entendeu isso.

113
00:06:21,100 --> 00:06:23,420
Temos que definir um novo mtodo dunder.

114
00:06:24,540 --> 00:06:26,540
E desta vez  chamado get item.

115
00:06:27,850 --> 00:06:30,170
E  claro, o objeto

116
00:06:30,170 --> 00:06:31,910
que estamos chamando isso.

117
00:06:31,910 --> 00:06:36,410
E tambm leva o ndice que estamos tentando acessar, i.

118
00:06:37,280 --> 00:06:39,280
Ento lembre-se, esta  apenas

119
00:06:39,280 --> 00:06:44,280
uma outra maneira de chamar o Ford. getitem, com ford,

120
00:06:44,560 --> 00:06:49,090
desculpe, garagem. getitem com ford e zero.

121
00:06:50,330 --> 00:06:54,240
Ok, isso  acar sinttico para isso.

122
00:06:55,867 --> 00:06:56,860
O que estamos fazendo

123
00:06:56,860 --> 00:06:59,230
 chamar o get i e a funo da

124
00:06:59,230 --> 00:07:00,820
classe garage e estamos analisando o

125
00:07:00,820 --> 00:07:02,770
objeto ford que criamos e o ndice

126
00:07:02,770 --> 00:07:04,730
que queremos acessar, que  zero.

127
00:07:04,730 --> 00:07:09,730
E tudo o que temos a fazer  retornar a si mesmo. carros. eu, ento o

128
00:07:10,000 --> 00:07:11,480
carro  eu.

129
00:07:12,320 --> 00:07:15,000
E isso vai nos dar o

130
00:07:15,000 --> 00:07:17,310
ndice do eu. lista de carros.

131
00:07:17,310 --> 00:07:18,143
Vamos correr.

132
00:07:19,877 --> 00:07:22,970
E a est, ns recuperamos a festa.

133
00:07:22,970 --> 00:07:26,270
Ento, esses so dois mtodos muito importantes

134
00:07:26,270 --> 00:07:29,820
que podem ser bastante teis em muitas circunstncias.

135
00:07:29,820 --> 00:07:33,734
Sempre que voc quiser um objeto que armazene

136
00:07:33,734 --> 00:07:37,550
coisas e possa acess-las, esses dois mtodos podem

137
00:07:37,550 --> 00:07:38,900
ser bastante teis.

138
00:07:38,900 --> 00:07:42,130
Agora, assim que voc implementar os mtodos

139
00:07:42,130 --> 00:07:46,340
len e get item, algumas novas funcionalidades sero desbloqueadas.

140
00:07:46,340 --> 00:07:50,380
E isto , que voc pode percorrer sua garagem.

141
00:07:51,880 --> 00:07:54,270
Voc pode usar um loop de quatro em sua garagem.

142
00:07:54,270 --> 00:07:57,850
Mas somente quando voc tem esses dois mtodos definidos.

143
00:07:57,850 --> 00:07:59,160
Porque o Python vai usar

144
00:07:59,160 --> 00:08:01,200
esses dois mtodos no fundo do loop

145
00:08:01,200 --> 00:08:03,070
do ford para iterar sobre ele.

146
00:08:04,420 --> 00:08:07,180
E l voc tem isso, voc fica fiesta e se concentra.

147
00:08:09,090 --> 00:08:10,790
Ento  uma coisa bem legal.

148
00:08:10,790 --> 00:08:12,500
A primeira vez

149
00:08:12,500 --> 00:08:16,710
que fiquei sabendo disso, perdi a expresso, espantada.

150
00:08:16,710 --> 00:08:19,776
Porque eu realmente no sabia muito sobre esses

151
00:08:19,776 --> 00:08:23,070
mtodos dunder, e  bem interessante, porque tudo

152
00:08:23,070 --> 00:08:25,110
que voc pode fazer em

153
00:08:25,110 --> 00:08:28,930
Python, todas as funes embutidas como len e algumas,

154
00:08:28,930 --> 00:08:31,460
e todas as construes como para,

155
00:08:31,460 --> 00:08:35,790
so todas construdas em objetos que possuem esses mtodos. mtodos especiais.

156
00:08:36,660 --> 00:08:39,440
E aprender sobre isso  realmente emocionante.

157
00:08:39,440 --> 00:08:43,160
E vamos aprender sobre eles ao longo do curso.

158
00:08:43,160 --> 00:08:47,130
Mas eu queria lhe dar outros dois mtodos

159
00:08:50,316 --> 00:08:53,620
especiais, de fato, que so o dunder

160
00:08:53,620 --> 00:08:55,520
repr e dunder string.

161
00:08:56,390 --> 00:08:58,870
Ento vamos implementar o repr.

162
00:08:58,870 --> 00:09:01,430
 assim que voc define a repr.

163
00:09:01,430 --> 00:09:04,080
E esta repr deve ser usada

164
00:09:04,080 --> 00:09:06,950
para imprimir uma string representando o objeto.

165
00:09:08,530 --> 00:09:11,770
Ento, mais uma vez, vamos nos colocar aqui.

166
00:09:11,770 --> 00:09:15,390
E podemos voltar, me desculpe, eu disse que isso deveria ser usado para

167
00:09:15,390 --> 00:09:17,240
imprimir uma corda, isso  uma mentira.

168
00:09:17,240 --> 00:09:18,850
Deve ser usado para retornar uma

169
00:09:18,850 --> 00:09:20,350
string, que representa o objeto.

170
00:09:22,357 --> 00:09:26,770
Ento podemos definir isso como sendo uma garagem.

171
00:09:26,770 --> 00:09:28,930
E dentro disso vamos nos colocar. carros.

172
00:09:30,180 --> 00:09:32,680
Isso realmente representa nossa garagem.

173
00:09:32,680 --> 00:09:34,680
 um objeto de garagem e tem

174
00:09:34,680 --> 00:09:36,230
essa lista de carros dentro dele.

175
00:09:39,740 --> 00:09:44,470
A string dunder deve ser usada para retornar uma

176
00:09:44,470 --> 00:09:49,130
string que informa ao usurio algumas informaes sobre essa

177
00:09:49,130 --> 00:09:50,810
garagem, de modo

178
00:09:50,810 --> 00:09:54,610
que, se voc imprimir o objeto, o

179
00:09:54,610 --> 00:09:57,850
usurio possa obter algumas informaes teis

180
00:09:57,850 --> 00:10:00,010
sobre a garagem que est imprimindo.

181
00:10:01,550 --> 00:10:04,034
Ento, neste caso, devemos retornar algo como f.

182
00:10:04,034 --> 00:10:09,034
E garagem com len auto carros.

183
00:10:12,320 --> 00:10:15,070
Observe como a repr, a dunder

184
00:10:15,070 --> 00:10:19,410
repr retorna uma espcie de verso codificada desta garagem.

185
00:10:19,410 --> 00:10:20,730
Inclui tudo o

186
00:10:20,730 --> 00:10:23,140
que precisamos, para representar esse objeto.

187
00:10:23,140 --> 00:10:26,880
E o mtodo str transforma algo que um usurio

188
00:10:26,880 --> 00:10:28,390
pode querer ler.

189
00:10:28,390 --> 00:10:30,740
Essa  realmente a diferena entre esses dois.

190
00:10:32,446 --> 00:10:34,260
Observe como aqui acessamos a len auto.

191
00:10:34,260 --> 00:10:36,690
Eu amo isso, auto  o objeto.

192
00:10:36,690 --> 00:10:38,390
Ento, quando voc chama len de self,

193
00:10:38,390 --> 00:10:41,330
voc est realmente chamando o mtodo len que voc definiu aqui.

194
00:10:42,670 --> 00:10:46,830
Agora, quando voc imprime ford aqui, voc v o

195
00:10:48,360 --> 00:10:52,020
str  usado, garagem com dois carros.

196
00:10:53,590 --> 00:10:57,010
Ento, quando o mtodo dunder repr  usado?

197
00:10:58,440 --> 00:11:00,482
O mtodo dunder repr

198
00:11:00,482 --> 00:11:04,770
 usado particularmente quando voc est codificando.

199
00:11:04,770 --> 00:11:06,640
Quando voc est usando um

200
00:11:06,640 --> 00:11:09,670
depurador, ns vamos aprender o que  em

201
00:11:09,670 --> 00:11:11,960
algumas sesses, pode ser muito til

202
00:11:11,960 --> 00:11:15,150
para voc olhar o objeto e entender exatamente

203
00:11:15,150 --> 00:11:18,340
do que  feito, neste caso carros.

204
00:11:18,340 --> 00:11:19,950
Quando olhamos para a depurao,

205
00:11:19,950 --> 00:11:23,780
vamos examinar mais a funo repr e por que ela pode ser til.

206
00:11:23,780 --> 00:11:25,720
Portanto, no se preocupe muito com isso

207
00:11:25,720 --> 00:11:27,080
por enquanto, apenas saiba que

208
00:11:27,080 --> 00:11:30,660
a funo str pode ser realmente til ao imprimir as coisas para um usurio.

209
00:11:30,660 --> 00:11:33,620
No entanto, se voc for implementar

210
00:11:33,620 --> 00:11:36,710
apenas um desses dois, escolha a repr.

211
00:11:38,080 --> 00:11:41,220
Voc pode simplesmente excluir a repr.

212
00:11:41,220 --> 00:11:46,220
Voc pode transformar o str em repr, deletar este repr aqui.

213
00:11:48,730 --> 00:11:51,310
E faa com que imprima algo que um usurio deseje ver.

214
00:11:51,310 --> 00:11:52,830
E esta  uma abordagem

215
00:11:52,830 --> 00:11:55,090
melhor, quando voc imprimir agora ford, vai

216
00:11:56,270 --> 00:11:59,024
chamar a funo repr em vez da funo str.

217
00:11:59,024 --> 00:12:00,450
Porque repr  um pouco mais importante.

218
00:12:00,450 --> 00:12:03,660
Ento, se voc s vai implementar um, implemente o repr.

219
00:12:03,660 --> 00:12:07,030
Mas  claro, se voc pode implementar tanto uma

220
00:12:07,030 --> 00:12:10,840
para uma descrio mais orientada ao cdigo quanto a outra

221
00:12:10,840 --> 00:12:13,570
para uma descrio mais orientada ao usurio,

222
00:12:13,570 --> 00:12:14,790
isso  muito melhor.

223
00:12:15,670 --> 00:12:18,310
Eu sou um forte proponente, que

224
00:12:18,310 --> 00:12:23,000
cada classe que voc cria deve ter um mtodo repr e str.

225
00:12:25,160 --> 00:12:27,290
Existem muitos mtodos mgicos

226
00:12:27,290 --> 00:12:32,020
que voc pode implementar, incluindo alguns para adicionar objetos juntos.

227
00:12:32,020 --> 00:12:34,660
Afinal de contas, inteiros tambm so objetos.

228
00:12:34,660 --> 00:12:37,420
Voc pode sobrecarregar o que os operadores booleanos fazem.

229
00:12:37,420 --> 00:12:39,700
Voc pode tornar seus objetos passveis de serem chamados.

230
00:12:39,700 --> 00:12:41,930
E voc pode fazer coisas como adicionar gerenciadores de contexto.

231
00:12:41,930 --> 00:12:44,330
Vamos ver o que so e muito mais.

232
00:12:44,330 --> 00:12:45,940
Estaremos aprendendo sobre muitos desses

233
00:12:45,940 --> 00:12:47,470
mtodos dunder ao longo do

234
00:12:47,470 --> 00:12:49,870
curso, porque isso  o curso de Python

235
00:12:49,870 --> 00:12:51,980
mais abrangente que voc pode fazer.

236
00:12:51,980 --> 00:12:54,890
Ento eu quero cobrir tudo sobre o Python.

237
00:12:55,810 --> 00:12:56,690
 isso para este vdeo.

238
00:12:56,690 --> 00:12:58,140
Eu sei que est ficando um

239
00:12:58,140 --> 00:13:00,020
pouco mais avanado, ento voc ainda est comigo.

240
00:13:00,020 --> 00:13:01,730
Quando comearmos a construir

241
00:13:01,730 --> 00:13:04,490
nosso prximo projeto, tudo ficar mais claro.

242
00:13:04,490 --> 00:13:05,690
Ento  isso para este vdeo.

243
00:13:05,690 --> 00:13:07,140
Eu vou te ver no prximo.

