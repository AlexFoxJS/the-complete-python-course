1
00:00:00,200 --> 00:00:01,140
<v Instructor>Hi, and welcome back.</v>

2
00:00:01,140 --> 00:00:04,290
In this video we are talking about inheritance.

3
00:00:04,290 --> 00:00:05,710
And if this scares you because it looks

4
00:00:05,710 --> 00:00:07,980
a bit advanced, don't worry.

5
00:00:07,980 --> 00:00:10,170
Inheritance is pretty easy to grasp,

6
00:00:10,170 --> 00:00:12,340
at least on some level, and we're gonna

7
00:00:12,340 --> 00:00:13,960
be talking about more advanced stuff

8
00:00:13,960 --> 00:00:15,770
as we move on through the course.

9
00:00:15,770 --> 00:00:18,420
Imagine you've got this student class.

10
00:00:18,420 --> 00:00:20,640
Something very similar to what we've defined before.

11
00:00:20,640 --> 00:00:23,290
It's got an init method that takes in a name

12
00:00:23,290 --> 00:00:25,600
and a school and assigns them to two properties,

13
00:00:25,600 --> 00:00:27,870
and it also creates a marks property,

14
00:00:27,870 --> 00:00:29,160
which is an empty list.

15
00:00:30,410 --> 00:00:33,240
And it also has an average method;

16
00:00:33,240 --> 00:00:35,410
I always want to call them functions, an average

17
00:00:35,410 --> 00:00:38,800
method that returns the average of self dot marks.

18
00:00:40,460 --> 00:00:43,870
Now, imagine you want to sort of add some

19
00:00:43,870 --> 00:00:46,030
more functionality to another class

20
00:00:46,030 --> 00:00:48,440
which may be a working student class.

21
00:00:48,440 --> 00:00:50,250
A working student is exactly the same as

22
00:00:50,250 --> 00:00:53,430
a student, but it has a salary as well.

23
00:00:53,430 --> 00:00:54,263
Let's do that.

24
00:00:57,204 --> 00:00:58,620
Here's our working student's class,

25
00:00:58,620 --> 00:01:00,410
and it has an init method too.

26
00:01:01,810 --> 00:01:04,560
Whereas it takes a name, a school, and a salary.

27
00:01:08,080 --> 00:01:11,060
Now, same as above, we're gonna have self dot name

28
00:01:11,060 --> 00:01:14,085
equal name, self dot school equals school,

29
00:01:14,085 --> 00:01:16,840
self dot marks equals empty list, and now

30
00:01:16,840 --> 00:01:19,470
a new line self dot salary equals salary.

31
00:01:20,580 --> 00:01:23,903
Whenever you are trying stuff like this

32
00:01:23,903 --> 00:01:27,583
that is exact copy of something you have above,

33
00:01:27,583 --> 00:01:31,230
you must know that something is wrong.

34
00:01:31,230 --> 00:01:33,530
Something can be made better, particularly

35
00:01:33,530 --> 00:01:35,963
in Python, where duplication is

36
00:01:35,963 --> 00:01:39,620
not really that common.

37
00:01:39,620 --> 00:01:42,650
There are always ways to make your code less duplicate.

38
00:01:44,381 --> 00:01:47,540
We also have to define, of course, this average

39
00:01:48,798 --> 00:01:52,320
method, where it's gonna return everything

40
00:01:52,320 --> 00:01:55,720
as we know it, like so.

41
00:01:57,130 --> 00:02:02,130
Now if we create a working student Rolf,

42
00:02:02,770 --> 00:02:06,860
that goes to MIT and has a salary of 15 point 50,

43
00:02:06,860 --> 00:02:09,780
we can of course print out Rolf dot salary,

44
00:02:10,990 --> 00:02:14,470
and that's gonna give the salary property 15.5.

45
00:02:14,470 --> 00:02:16,550
Notice how Python drops the last zero

46
00:02:16,550 --> 00:02:18,650
because it's a zero, and that's fine.

47
00:02:19,570 --> 00:02:21,560
So again, nothing new's going on here

48
00:02:21,560 --> 00:02:22,790
working student has created the new

49
00:02:22,790 --> 00:02:25,120
blank object, has put it into self.

50
00:02:25,120 --> 00:02:26,930
Rolf, MIT and 15.50 have been gone

51
00:02:26,930 --> 00:02:29,540
into name, school, and salary respectively.

52
00:02:29,540 --> 00:02:32,430
And we've created four properties: self dot name,

53
00:02:32,430 --> 00:02:34,660
self dot school, self dot marks, and self dot salary.

54
00:02:34,660 --> 00:02:37,840
And we've given it some values: name, school, and salary.

55
00:02:37,840 --> 00:02:39,430
These are the parameters.

56
00:02:39,430 --> 00:02:42,790
And then the list for marks, to be initialised with.

57
00:02:42,790 --> 00:02:44,930
If we wanted to add some marks, we would have to

58
00:02:44,930 --> 00:02:48,075
do Rolf dot marks dot append

59
00:02:48,075 --> 00:02:49,720
56, for example.

60
00:02:51,530 --> 00:02:54,280
And then we could calculate the average of those marks.

61
00:02:55,570 --> 00:02:57,200
So you can see there's a lot of duplication

62
00:02:57,200 --> 00:02:59,810
between our students, which has name, school,

63
00:02:59,810 --> 00:03:02,370
and marks, and an average function, and our

64
00:03:02,370 --> 00:03:04,530
working student, which is exactly the same.

65
00:03:04,530 --> 00:03:06,650
The only thing we've added is the salary.

66
00:03:09,560 --> 00:03:13,700
So, we could use inheritance in order

67
00:03:13,700 --> 00:03:15,440
to remove duplication.

68
00:03:16,570 --> 00:03:17,850
Here's how it's gonna go.

69
00:03:17,850 --> 00:03:20,350
I'm going to reimplement the working student

70
00:03:20,350 --> 00:03:23,100
class using inheritance to reduce duplication,

71
00:03:24,137 --> 00:03:25,950
then we're gonna talk about what's going on.

72
00:03:25,950 --> 00:03:28,050
So, we've got our class working students,

73
00:03:28,050 --> 00:03:32,160
and we want to make it extend to student class.

74
00:03:32,160 --> 00:03:34,700
What that's gonna mean is the working student's class

75
00:03:34,700 --> 00:03:38,120
is going to become an exact copy of student,

76
00:03:38,120 --> 00:03:40,290
but we're going to be able to modify

77
00:03:40,290 --> 00:03:43,290
particular methods if we want.

78
00:03:43,290 --> 00:03:44,930
The way you do that is you add some brackets

79
00:03:44,930 --> 00:03:48,910
at the end, and you type in student.

80
00:03:48,910 --> 00:03:51,140
Now working student is a class that is

81
00:03:51,140 --> 00:03:53,290
a child of student.

82
00:03:53,290 --> 00:03:55,180
It extends student.

83
00:03:57,130 --> 00:04:01,061
So, we can delete the average method.

84
00:04:01,061 --> 00:04:01,894
(whistle)

85
00:04:01,894 --> 00:04:02,727
Completely gone.

86
00:04:02,727 --> 00:04:05,610
But, working student still has an average

87
00:04:05,610 --> 00:04:08,660
method only it's not there.

88
00:04:08,660 --> 00:04:12,200
It is now directly inherited from student.

89
00:04:12,200 --> 00:04:13,240
Exactly the same.

90
00:04:13,240 --> 00:04:14,480
Imagine it's a copy of this.

91
00:04:14,480 --> 00:04:15,410
Nothing's changed.

92
00:04:16,770 --> 00:04:18,832
So what about the init method, then?

93
00:04:18,832 --> 00:04:20,840
We've got name and school, which are

94
00:04:20,840 --> 00:04:23,610
just copies of them, can't we just delete them?

95
00:04:23,610 --> 00:04:25,230
And just keep the salary?

96
00:04:26,530 --> 00:04:28,200
This would be great.

97
00:04:28,200 --> 00:04:29,510
I'll be honest.

98
00:04:29,510 --> 00:04:31,040
It would be great if we could do this,

99
00:04:31,040 --> 00:04:32,910
but sadly no.

100
00:04:32,910 --> 00:04:35,800
Because when working student is now called,

101
00:04:35,800 --> 00:04:37,840
the same thing happens as before.

102
00:04:37,840 --> 00:04:40,440
And empty, blank object is created,

103
00:04:40,440 --> 00:04:45,440
given to self, and now salary is Rolf.

104
00:04:46,290 --> 00:04:49,074
MIT and 15.50 don't have any matching

105
00:04:49,074 --> 00:04:51,810
arguments, so we we get an error:

106
00:04:51,810 --> 00:04:52,920
Too may positional arguments

107
00:04:52,920 --> 00:04:54,190
for constructor call.

108
00:04:55,090 --> 00:04:57,640
So no, you can not do that unfortunately.

109
00:04:58,710 --> 00:05:01,040
But what you can do is now that you have

110
00:05:01,040 --> 00:05:04,050
this empty object here, you can call

111
00:05:04,050 --> 00:05:06,580
the student's init method and make it

112
00:05:06,580 --> 00:05:09,470
go through this initialization of self

113
00:05:09,470 --> 00:05:12,140
dot name, self dot school, and self dot marks.

114
00:05:12,140 --> 00:05:15,380
The way you do that is a mildly confusing way.

115
00:05:15,380 --> 00:05:16,390
You say super.

116
00:05:17,420 --> 00:05:20,140
Super is the parent class.

117
00:05:20,140 --> 00:05:21,780
In this case, student.

118
00:05:22,640 --> 00:05:25,130
And you can then, this is the only time

119
00:05:25,130 --> 00:05:26,970
when you are going to call the init method

120
00:05:26,970 --> 00:05:29,990
manually, giving us a super, which is the

121
00:05:29,990 --> 00:05:32,569
parent class student, dot dunder init,

122
00:05:32,569 --> 00:05:34,460
open and close brackets, and in here you're

123
00:05:34,460 --> 00:05:36,520
gonna put the name and the school.

124
00:05:39,630 --> 00:05:42,400
So what is happening then is you are

125
00:05:42,400 --> 00:05:45,310
just jumping over to this init method.

126
00:05:45,310 --> 00:05:48,030
And self is still the current object

127
00:05:48,030 --> 00:05:48,870
that you're dealing with.

128
00:05:48,870 --> 00:05:51,310
That's Rolf, this working student.

129
00:05:52,860 --> 00:05:56,940
So now here you call the parent's class' init method.

130
00:05:56,940 --> 00:05:59,870
That initialises name, school, and marks.

131
00:05:59,870 --> 00:06:01,040
Then you come back down here,

132
00:06:01,040 --> 00:06:02,340
and you initialise salary.

133
00:06:03,480 --> 00:06:05,740
And this is a much more concise way

134
00:06:05,740 --> 00:06:07,700
of writing your working student class,

135
00:06:07,700 --> 00:06:10,580
that is just an extension of the student class.

136
00:06:10,580 --> 00:06:12,900
It just adds a new property to it.

137
00:06:15,400 --> 00:06:17,950
Notice how you can print Rolf's salary,

138
00:06:17,950 --> 00:06:20,250
but you can also do Rolf dot marks

139
00:06:20,250 --> 00:06:25,250
dot append 57, Rolf dot marks dot append 99,

140
00:06:27,280 --> 00:06:31,320
and you can print the average there.

141
00:06:31,320 --> 00:06:32,390
Ah, I pressed save.

142
00:06:32,390 --> 00:06:33,223
I always do this.

143
00:06:33,223 --> 00:06:34,320
Sorry about that.

144
00:06:34,320 --> 00:06:35,330
Then you can run it.

145
00:06:35,330 --> 00:06:37,370
And 78 point zero comes out.

146
00:06:37,370 --> 00:06:39,460
That's totally good because that

147
00:06:39,460 --> 00:06:41,554
means that our working student has this

148
00:06:41,554 --> 00:06:46,554
average method defined in here,

149
00:06:46,930 --> 00:06:48,500
and that's all good.

150
00:06:48,500 --> 00:06:50,670
It's just inherited from the student class,

151
00:06:50,670 --> 00:06:52,370
as opposed to having to define it.

152
00:06:54,470 --> 00:06:57,480
That's the basis of inheritance.

153
00:06:58,910 --> 00:07:03,910
And the way to extend the class is that

154
00:07:04,280 --> 00:07:08,459
now you can define something else,

155
00:07:08,459 --> 00:07:10,400
like weekly salary.

156
00:07:13,480 --> 00:07:16,090
And this is going to return self dot salary

157
00:07:16,090 --> 00:07:20,110
times 37 point five.

158
00:07:20,110 --> 00:07:22,170
Thus, the normal working hours in the UK,

159
00:07:22,170 --> 00:07:23,970
37 point five hours.

160
00:07:23,970 --> 00:07:27,600
So now you can print Rolf dot weekly salary,

161
00:07:27,600 --> 00:07:30,220
and that's gonna give you Rolf's salary

162
00:07:30,220 --> 00:07:31,540
times 37.5.

163
00:07:34,010 --> 00:07:36,360
Important, if you create,

164
00:07:37,200 --> 00:07:39,510
I'm gonna add a few lines there

165
00:07:39,510 --> 00:07:40,360
so it's a bit easier to read,

166
00:07:40,360 --> 00:07:43,680
if you create Anna, being a normal student,

167
00:07:45,010 --> 00:07:47,890
at Oxford, notice how she doesn't take

168
00:07:47,890 --> 00:07:49,960
a salary because the student constructor

169
00:07:49,960 --> 00:07:50,793
is still up here.

170
00:07:50,793 --> 00:07:52,180
This class is still totally valid.

171
00:07:52,180 --> 00:07:54,390
It doesn't stop being useful.

172
00:07:54,390 --> 00:07:55,760
Doesn't take a salary,

173
00:07:55,760 --> 00:07:58,030
doesn't have a salary property.

174
00:07:58,030 --> 00:08:03,030
So now if you do Anna dot weekly salary,

175
00:08:03,590 --> 00:08:05,490
this is gonna give you an error.

176
00:08:05,490 --> 00:08:07,670
And it's gonna say the student object

177
00:08:07,670 --> 00:08:09,400
has no attribute weekly salary.

178
00:08:09,400 --> 00:08:13,560
This function, here, is not defined for student.

179
00:08:13,560 --> 00:08:15,650
It is only defined in working student.

180
00:08:16,510 --> 00:08:18,430
This goes from top to bottom.

181
00:08:18,430 --> 00:08:21,690
Working student gets stuff from student,

182
00:08:21,690 --> 00:08:22,840
but not the other way around.

183
00:08:22,840 --> 00:08:25,840
Student does not get anything from working student.

184
00:08:25,840 --> 00:08:27,540
Okay, important thing to remember.

185
00:08:29,150 --> 00:08:30,440
That's it for this video.

186
00:08:30,440 --> 00:08:32,100
Now in the next video we're going

187
00:08:32,100 --> 00:08:35,770
to look at the property decorator.

188
00:08:35,770 --> 00:08:38,140
We're not gonna talk about what decorators are,

189
00:08:38,140 --> 00:08:39,800
but what we're gonna talk about is the fact

190
00:08:39,800 --> 00:08:42,800
that we've got this weekly salary thing here,

191
00:08:42,800 --> 00:08:44,890
and it's a function that takes no arguments

192
00:08:44,890 --> 00:08:45,960
other than self.

193
00:08:46,890 --> 00:08:50,510
So there's some simplification we can do here.

194
00:08:50,510 --> 00:08:52,660
Let's talk about it in the very next video.

