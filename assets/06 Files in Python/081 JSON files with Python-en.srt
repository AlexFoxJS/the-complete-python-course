1
00:00:00,183 --> 00:00:01,359
<v Narrator>Hi and welcome back.</v>

2
00:00:01,359 --> 00:00:04,816
In this video, we're talking about JSON files.

3
00:00:04,816 --> 00:00:07,207
JSON is probably one of the most, if not, the most

4
00:00:07,207 --> 00:00:10,290
popular format for data in the world.

5
00:00:11,137 --> 00:00:14,150
Especially extremely popular for web applications

6
00:00:14,150 --> 00:00:16,095
and that's because JSON comes from

7
00:00:16,095 --> 00:00:19,975
the most popular web language, JavaScript.

8
00:00:19,975 --> 00:00:24,225
Indeed, JSON stands for JavaScript object notation.

9
00:00:26,148 --> 00:00:28,658
Here's what some JSON could look like.

10
00:00:28,658 --> 00:00:31,462
You've got some fort of curly braces

11
00:00:31,462 --> 00:00:33,875
at the start and at the end, then you've got

12
00:00:33,875 --> 00:00:38,208
a key around it that are double quotation marks

13
00:00:38,208 --> 00:00:40,214
that's important, and then you've got a colon

14
00:00:40,214 --> 00:00:43,478
and you can have a value associated with that key.

15
00:00:43,478 --> 00:00:46,895
Does it remind you of anything in Python?

16
00:00:48,595 --> 00:00:50,635
I hope that it reminds you of a dictionary

17
00:00:50,635 --> 00:00:52,864
because it looks pretty similar to a dictionary

18
00:00:52,864 --> 00:00:55,234
in fact, it looks the same as a dictionary.

19
00:00:55,234 --> 00:00:57,317
There are just a couple of differences

20
00:00:57,317 --> 00:01:00,113
between JSON, that is this thing here,

21
00:01:00,113 --> 00:01:02,818
and a Python dictionary.

22
00:01:02,818 --> 00:01:05,921
The first and most important difference

23
00:01:05,921 --> 00:01:07,408
is something you have to remember

24
00:01:07,408 --> 00:01:09,780
whenever you deal with JSON and that is

25
00:01:09,780 --> 00:01:12,275
that JSON is a string.

26
00:01:12,275 --> 00:01:14,453
Notice how this piece of JSON here is inside

27
00:01:14,453 --> 00:01:19,453
a text file, and what are the contents of text files?

28
00:01:19,665 --> 00:01:22,172
That's correct, all the contents of text files

29
00:01:22,172 --> 00:01:25,924
are strings, as we saw when we read our CSV file

30
00:01:25,924 --> 00:01:30,444
and as we saw when we read our plain old data file.

31
00:01:30,444 --> 00:01:33,948
Files, text files always contain strings only.

32
00:01:33,948 --> 00:01:36,632
When we read this, it will be a string

33
00:01:36,632 --> 00:01:40,571
and we will convert it into a Python dictionary.

34
00:01:40,571 --> 00:01:44,116
The second difference is that JSON must always use

35
00:01:44,116 --> 00:01:47,921
double quotation marks, and not single quotation marks.

36
00:01:47,921 --> 00:01:52,007
So if you do this, which is perfectly valid in Python

37
00:01:52,007 --> 00:01:55,899
it will not be valid in JSON so don't do that.

38
00:01:55,899 --> 00:01:59,009
And some programmes that read and write JSON

39
00:01:59,009 --> 00:02:02,598
require that the outermost element here

40
00:02:02,598 --> 00:02:04,943
the outermost construct, the outermost structure

41
00:02:04,943 --> 00:02:06,026
be an object.

42
00:02:07,485 --> 00:02:10,389
This thing here that we call a dictionary in Python

43
00:02:10,389 --> 00:02:14,778
is an object in JavaScript, they're very similar.

44
00:02:14,778 --> 00:02:16,533
When talking about JSON, the structure with these

45
00:02:16,533 --> 00:02:18,854
curly braces, we call it an object

46
00:02:18,854 --> 00:02:20,712
because that's what it's called in JavaScript

47
00:02:20,712 --> 00:02:23,322
I know that in Python they're called dictionaries.

48
00:02:23,322 --> 00:02:26,240
Some programmes, however, and that's important

49
00:02:26,240 --> 00:02:28,201
don't have this requirement.

50
00:02:28,201 --> 00:02:30,412
So in some programmes, you could have a file

51
00:02:30,412 --> 00:02:33,745
called friendsjson.txt that is just this

52
00:02:34,864 --> 00:02:38,082
and this would be okay for some programmes.

53
00:02:38,082 --> 00:02:40,693
And notice how the indentation here is slightly off

54
00:02:40,693 --> 00:02:43,110
and let me fix it real quick.

55
00:02:44,631 --> 00:02:47,522
This would be okay for some programmes but not others

56
00:02:47,522 --> 00:02:48,707
some have their own requirement

57
00:02:48,707 --> 00:02:51,594
that the outermost structure be an object,

58
00:02:51,594 --> 00:02:53,470
that's a dictionary, some do not have

59
00:02:53,470 --> 00:02:56,573
this requirement, and this would be fine.

60
00:02:56,573 --> 00:02:59,398
For our example, we are going to stick with

61
00:02:59,398 --> 00:03:02,565
our object as the outermost structure.

62
00:03:04,125 --> 00:03:07,015
So let's read some JSON using Python.

63
00:03:07,015 --> 00:03:09,432
Python comes with a built-in module

64
00:03:09,432 --> 00:03:13,580
that you can import and use called the JSON module.

65
00:03:13,580 --> 00:03:15,590
We're going to talk a lot more about importing

66
00:03:15,590 --> 00:03:19,354
as we move on in this section, we're going to be importing

67
00:03:19,354 --> 00:03:23,442
our own files and modules as well as system modules

68
00:03:23,442 --> 00:03:26,983
so let's start with importing that JSON module.

69
00:03:26,983 --> 00:03:29,486
But, before we import the JSON itself,

70
00:03:29,486 --> 00:03:32,713
let's talk a little bit about importing.

71
00:03:32,713 --> 00:03:34,833
The first thing I'm going to do is

72
00:03:34,833 --> 00:03:37,264
create a new file that I'm going to call

73
00:03:37,264 --> 00:03:39,597
something like json_imports.

74
00:03:41,582 --> 00:03:44,811
Important, do not call this file JSON

75
00:03:44,811 --> 00:03:47,973
because the JSON module already exists in Python.

76
00:03:47,973 --> 00:03:50,084
We're going to import it like so.

77
00:03:50,084 --> 00:03:51,782
So if you call your file JSON,

78
00:03:51,782 --> 00:03:54,512
that's going to confuse Python.

79
00:03:54,512 --> 00:03:57,372
Try to not have your files or any of your

80
00:03:57,372 --> 00:04:00,390
packages named after something that already exists

81
00:04:00,390 --> 00:04:03,279
in Python, or indeed try not to have duplicate

82
00:04:03,279 --> 00:04:05,158
names for files and things like that

83
00:04:05,158 --> 00:04:07,770
just a general piece of advice there.

84
00:04:07,770 --> 00:04:09,679
So, in Python, as we've done a couple of

85
00:04:09,679 --> 00:04:12,062
times before in the course, sort of glanced

86
00:04:12,062 --> 00:04:15,193
over it, we can import things and these things

87
00:04:15,193 --> 00:04:18,241
are code that other developers have written

88
00:04:18,241 --> 00:04:21,402
so that we don't have to write it ourselves.

89
00:04:21,402 --> 00:04:23,589
And now we're importing the JSON module

90
00:04:23,589 --> 00:04:25,780
which contains some functions that allow us

91
00:04:25,780 --> 00:04:28,821
to import the JSON file and convert it

92
00:04:28,821 --> 00:04:31,048
into a dictionary and also to go the

93
00:04:31,048 --> 00:04:34,342
other way round- turn a dictionary into JSON data.

94
00:04:34,342 --> 00:04:36,222
Remember, JSON data is very much like

95
00:04:36,222 --> 00:04:38,889
a dictionary but it is a string.

96
00:04:40,481 --> 00:04:44,320
And remember that someone did write this JSON module

97
00:04:44,320 --> 00:04:46,261
in the same way that we are writing this file

98
00:04:46,261 --> 00:04:48,093
and somebody wrote all the other built-in

99
00:04:48,093 --> 00:04:51,061
functions in Python like len or sum

100
00:04:51,061 --> 00:04:53,978
or even like, um, things like print

101
00:04:56,743 --> 00:05:00,900
all of these have been written by someone.

102
00:05:00,900 --> 00:05:02,562
And they are made available to us

103
00:05:02,562 --> 00:05:06,602
to use globally in all our Python files.

104
00:05:06,602 --> 00:05:08,561
The only difference is that this JSON module

105
00:05:08,561 --> 00:05:11,723
is not included by default on all your files

106
00:05:11,723 --> 00:05:14,331
because whoever created Python thought

107
00:05:14,331 --> 00:05:17,880
that it may not be necessary in all cases.

108
00:05:17,880 --> 00:05:21,370
So the JSON module is a module that comes with Python

109
00:05:21,370 --> 00:05:24,171
but it is not a global module.

110
00:05:24,171 --> 00:05:25,971
We must make it explicit that we want to use it

111
00:05:25,971 --> 00:05:30,549
by importing it at the top of the file like so.

112
00:05:30,549 --> 00:05:32,320
So, we've created a file that contains

113
00:05:32,320 --> 00:05:34,540
our friends as JSON and notice how

114
00:05:34,540 --> 00:05:37,298
this is a friends key and that is associated

115
00:05:37,298 --> 00:05:39,212
with a list and that contains

116
00:05:39,212 --> 00:05:41,949
three objects inside of it.

117
00:05:41,949 --> 00:05:43,311
I'm going to try really hard to call

118
00:05:43,311 --> 00:05:45,481
these objects when I'm talking about JSON

119
00:05:45,481 --> 00:05:47,660
and dictionaries when I'm talking about Python

120
00:05:47,660 --> 00:05:49,611
but please bear with me if I do make any mistakes

121
00:05:49,611 --> 00:05:51,919
and these are objects in JSON and

122
00:05:51,919 --> 00:05:53,929
dictionaries in Python but only when

123
00:05:53,929 --> 00:05:57,550
we import them using this JSON module.

124
00:05:57,550 --> 00:06:01,161
Then, we've got the JSON file, uh sorry

125
00:06:01,161 --> 00:06:03,391
the JSON module imported, and now,

126
00:06:03,391 --> 00:06:07,474
we have the ability to do things like json.access

127
00:06:08,362 --> 00:06:10,480
as long as you're using PyCharm or something

128
00:06:10,480 --> 00:06:12,641
else that will recommend functions

129
00:06:12,641 --> 00:06:15,480
we can access the functions in that module.

130
00:06:15,480 --> 00:06:18,191
Notice how this JSON module is not an object.

131
00:06:18,191 --> 00:06:20,109
It is not a class because we didn't have to

132
00:06:20,109 --> 00:06:24,359
create a new JSON object in order to access things.

133
00:06:25,660 --> 00:06:28,149
This module here allows us to use some functions

134
00:06:28,149 --> 00:06:31,509
but they are not inside a class.

135
00:06:31,509 --> 00:06:34,011
And, indeed, in PyCharm, you can go into

136
00:06:34,011 --> 00:06:37,428
the JSON module by clicking command click

137
00:06:39,074 --> 00:06:42,328
or control click if you are on Windows.

138
00:06:42,328 --> 00:06:47,008
And you can see the source code of the module here

139
00:06:47,008 --> 00:06:50,841
you can see that a lot of it is these comments

140
00:06:51,832 --> 00:06:53,551
that tell you how to use the functions

141
00:06:53,551 --> 00:06:56,301
but primarily there are some functions definitions

142
00:06:56,301 --> 00:06:58,942
like dump, and you can see the source code

143
00:06:58,942 --> 00:07:01,093
and what it does, you've got dump-s

144
00:07:01,093 --> 00:07:04,452
and you can see the arguments and the source code

145
00:07:04,452 --> 00:07:06,612
and all the comments and everything there.

146
00:07:06,612 --> 00:07:08,458
So as you can see this is just code

147
00:07:08,458 --> 00:07:10,649
like the one we write, except we didn't write it

148
00:07:10,649 --> 00:07:12,659
but we can still import it

149
00:07:12,659 --> 00:07:14,248
and notice how as we go through the file

150
00:07:14,248 --> 00:07:16,692
these functions are at the lowest level of indentation

151
00:07:16,692 --> 00:07:18,181
they are at the very left,

152
00:07:18,181 --> 00:07:20,771
which means they are not inside a class.

153
00:07:20,771 --> 00:07:23,500
So as we import the module, we'll have access

154
00:07:23,500 --> 00:07:25,833
to those functions directly.

155
00:07:26,728 --> 00:07:28,757
Okay, feel free to read through that module

156
00:07:28,757 --> 00:07:30,487
if you want, if you want to have a wee look

157
00:07:30,487 --> 00:07:32,686
at what is in there, but we are going to be using

158
00:07:32,686 --> 00:07:36,137
only a couple of functions in this video.

159
00:07:36,137 --> 00:07:40,138
The first thing you need is a file pointer.

160
00:07:40,138 --> 00:07:42,277
For that, we are going to use the open function

161
00:07:42,277 --> 00:07:45,310
of course, and we have to use an equals sign

162
00:07:45,310 --> 00:07:48,774
and we're going to open the friends_json.txt

163
00:07:48,774 --> 00:07:51,175
for reading, so you know how to do that,

164
00:07:51,175 --> 00:07:53,925
friends_json.txt in reading mode.

165
00:07:55,195 --> 00:07:57,945
Then we are going to load the contents.

166
00:07:57,945 --> 00:08:01,238
The way to do that is to do file_contents for example

167
00:08:01,238 --> 00:08:03,988
is JSON.load of the file pointer.

168
00:08:05,367 --> 00:08:08,008
So, the load function inside the JSON module

169
00:08:08,008 --> 00:08:10,636
takes in a file pointer that it is

170
00:08:10,636 --> 00:08:13,168
going to load the JSON from.

171
00:08:13,168 --> 00:08:15,476
As part of reading the file, by the way this

172
00:08:15,476 --> 00:08:17,617
reads the entire file, it also turns it into

173
00:08:17,617 --> 00:08:22,029
a dictionary, so now, file_contents is a dictionary.

174
00:08:22,029 --> 00:08:25,196
Reads file and turns it to dictionary.

175
00:08:26,615 --> 00:08:29,347
Then, of course, we can close the file

176
00:08:29,347 --> 00:08:33,065
and now, we can use the file contents for whatever we want

177
00:08:33,065 --> 00:08:37,565
for example, we can print file contents 'friends' zero

178
00:08:39,048 --> 00:08:42,631
and that should print this dictionary here.

179
00:08:46,462 --> 00:08:49,414
Okay, remember, if you are using PyCharm,

180
00:08:49,414 --> 00:08:52,554
you may be tempted to press the top right play button

181
00:08:52,554 --> 00:08:55,242
but, it's likely that that's going to play the wrong file

182
00:08:55,242 --> 00:08:57,904
CSV_read in this case, so if that's the case

183
00:08:57,904 --> 00:09:02,571
just right-click the json_imports file and run it.

184
00:09:02,571 --> 00:09:04,551
And there you have it, we print out

185
00:09:04,551 --> 00:09:08,445
the dictionary with name Jose and degree applied computing

186
00:09:08,445 --> 00:09:11,857
that's what I studied at university.

187
00:09:11,857 --> 00:09:14,294
This is how you load a JSON file

188
00:09:14,294 --> 00:09:18,063
into a dictionary that you can then use as normal.

189
00:09:18,063 --> 00:09:19,833
So here, we're accessing the friends key

190
00:09:19,833 --> 00:09:24,833
and then we're accessing the 0th element of the friends key.

191
00:09:25,900 --> 00:09:27,390
If you want to do the opposite,

192
00:09:27,390 --> 00:09:28,791
and you want to write the Python dictionary

193
00:09:28,791 --> 00:09:32,550
as a JSON file, that's also something you can do.

194
00:09:32,550 --> 00:09:34,531
For example, we are going to write into

195
00:09:34,531 --> 00:09:38,192
a file called cars_json so we're going to do

196
00:09:38,192 --> 00:09:41,692
cars equal this list here of dictionaries.

197
00:09:49,015 --> 00:09:51,114
And by the way, something I tend to do

198
00:09:51,114 --> 00:09:53,734
just because I programme a lot in JavaScript

199
00:09:53,734 --> 00:09:55,896
is have this space after the dictionary

200
00:09:55,896 --> 00:09:58,974
and Python doesn't really like that

201
00:09:58,974 --> 00:10:01,093
so if I do that, I apologise, I just find it

202
00:10:01,093 --> 00:10:03,876
a bit more readable, um but that's

203
00:10:03,876 --> 00:10:05,461
just because I do a lot of JavaScript

204
00:10:05,461 --> 00:10:09,294
and that's a convention in JavaScript as well.

205
00:10:11,444 --> 00:10:15,054
So now we have two dictionaries inside our list

206
00:10:15,054 --> 00:10:17,064
and, of course, as I said earlier,

207
00:10:17,064 --> 00:10:19,485
we can totally save this as JSON

208
00:10:19,485 --> 00:10:21,474
it doesn't need to have a dictionary in closing it

209
00:10:21,474 --> 00:10:26,004
although some programmes may request that you have that.

210
00:10:26,004 --> 00:10:28,346
So again, if you want to save this to a dictionary

211
00:10:28,346 --> 00:10:30,094
you know exactly what to do.

212
00:10:30,094 --> 00:10:33,775
Open the file, save the contents into the file

213
00:10:33,775 --> 00:10:35,814
and then close it.

214
00:10:35,814 --> 00:10:37,592
How are you going to save the contents?

215
00:10:37,592 --> 00:10:42,374
Instead of JSON.load, you're going to use JSON.dump.

216
00:10:42,374 --> 00:10:44,565
So here's what you have to do.

217
00:10:44,565 --> 00:10:47,898
Go and investigate how to use JSON.dump.

218
00:10:49,702 --> 00:10:52,386
Or, optionally, just wait until after I ask

219
00:10:52,386 --> 00:10:54,571
you pause the video and you try this yourself,

220
00:10:54,571 --> 00:10:57,213
and I will implement this for you.

221
00:10:57,213 --> 00:10:59,252
If you are so inclined, pause the video now

222
00:10:59,252 --> 00:11:02,595
and give this a go, investigate how to use JSON.dump

223
00:11:02,595 --> 00:11:06,355
and then save this list into a new file

224
00:11:06,355 --> 00:11:09,773
that you can call cars_json.txt.

225
00:11:09,773 --> 00:11:12,273
I'll see you in a few seconds.

226
00:11:15,075 --> 00:11:16,455
I hope you got that.

227
00:11:16,455 --> 00:11:18,401
If you did, go on investigate JSON.dump

228
00:11:18,401 --> 00:11:21,314
congratulations, well done, by investigating

229
00:11:21,314 --> 00:11:23,242
you're going to learn faster.

230
00:11:23,242 --> 00:11:25,571
There are multiple ways you could have investigated

231
00:11:25,571 --> 00:11:28,412
you could have Googled JSON.dump Python

232
00:11:28,412 --> 00:11:30,524
and one of those first few links would be

233
00:11:30,524 --> 00:11:33,430
the official Python documentation.

234
00:11:33,430 --> 00:11:35,150
Another option, you could've gone into

235
00:11:35,150 --> 00:11:37,812
the JSON module, with command click if you're on Mac

236
00:11:37,812 --> 00:11:40,452
or control click if you're on Windows.

237
00:11:40,452 --> 00:11:42,134
And there you could have found

238
00:11:42,134 --> 00:11:45,884
this documentation here for the dump function

239
00:11:48,334 --> 00:11:50,443
and it tells you what it does

240
00:11:50,443 --> 00:11:53,791
it serialises the obj parameter as

241
00:11:53,791 --> 00:11:56,860
a JSON formatted stream to fp.

242
00:11:56,860 --> 00:12:00,342
A .write supporting file-like object.

243
00:12:00,342 --> 00:12:03,563
Now, I appreciate this is some lingo that we've got here.

244
00:12:03,563 --> 00:12:06,482
Serialising means turning to a string.

245
00:12:06,482 --> 00:12:08,982
Fp is normally a file pointer.

246
00:12:09,972 --> 00:12:11,522
And it tells you here that it has to be

247
00:12:11,522 --> 00:12:15,632
a file-like object that allows you to do .write.

248
00:12:15,632 --> 00:12:16,914
That's what we've been doing with our

249
00:12:16,914 --> 00:12:19,222
text files when we've been writing to them.

250
00:12:19,222 --> 00:12:23,302
So, this dump takes in a object and that's going

251
00:12:23,302 --> 00:12:27,300
to get turned into a string and saved into fp.

252
00:12:27,300 --> 00:12:29,483
Therefore, if we go back to our JSON import

253
00:12:29,483 --> 00:12:32,400
what we have to do is open the file

254
00:12:34,320 --> 00:12:36,514
in write mode this time, and then

255
00:12:36,514 --> 00:12:39,014
say JSON.dump, cars, and file.

256
00:12:42,291 --> 00:12:44,562
And then of course, file.close.

257
00:12:44,562 --> 00:12:47,173
Let's run that, notice how it runs

258
00:12:47,173 --> 00:12:51,840
care_json gets created, and it contains our dumped JSON.

259
00:12:53,254 --> 00:12:57,805
Notice, though, it's not nicely formatted and that's fine.

260
00:12:57,805 --> 00:12:59,968
JSON doesn't need any new lines or spaces

261
00:12:59,968 --> 00:13:01,587
or anything like that, all of these are

262
00:13:01,587 --> 00:13:04,205
completely optional, just notice how

263
00:13:04,205 --> 00:13:06,413
it's used double quotation marks

264
00:13:06,413 --> 00:13:08,923
as that is important, even though we used

265
00:13:08,923 --> 00:13:11,122
single quotation marks in our dictionaries.

266
00:13:11,122 --> 00:13:13,515
Python does not care for our strings

267
00:13:13,515 --> 00:13:15,886
whether we use double or single quotation marks

268
00:13:15,886 --> 00:13:18,469
but JSON does, so it uses that.

269
00:13:20,929 --> 00:13:24,688
If you had a string variable that you wanted

270
00:13:24,688 --> 00:13:28,017
to turn into a dictionary, you can do that for example

271
00:13:28,017 --> 00:13:32,017
let's say my JSON string is something like this.

272
00:13:44,239 --> 00:13:45,406
This is completely wrong by the way

273
00:13:45,406 --> 00:13:47,241
I know very little about cars.

274
00:13:47,241 --> 00:13:49,684
Let's say you've got this JSON string

275
00:13:49,684 --> 00:13:52,695
of this Alfa Romeo car that was released in 1950

276
00:13:52,695 --> 00:13:54,395
probably pretty wrong, I'm guessing it's

277
00:13:54,395 --> 00:13:56,887
more like, uh, much later.

278
00:13:56,887 --> 00:13:58,131
But, nonetheless, let's say you have

279
00:13:58,131 --> 00:13:59,503
this JSON string here and you want to

280
00:13:59,503 --> 00:14:03,475
turn it into a dictionary, you can do that.

281
00:14:03,475 --> 00:14:05,797
But this time, instead of using load,

282
00:14:05,797 --> 00:14:09,112
that turns a JSON file into a dictionary,

283
00:14:09,112 --> 00:14:12,529
we're going to use loads for load string.

284
00:14:14,168 --> 00:14:18,085
So, um, incorrect_car is going to be JSON.loads

285
00:14:19,081 --> 00:14:23,045
and notice how the first argument is a string

286
00:14:23,045 --> 00:14:25,011
or, rather, s, which stands for string

287
00:14:25,011 --> 00:14:27,041
and that's going to be my_json_string

288
00:14:27,041 --> 00:14:29,847
and then you can print incorrect_car

289
00:14:29,847 --> 00:14:33,930
name, bane? Going batman here. Name, there we go.

290
00:14:35,148 --> 00:14:37,601
Then you can print that

291
00:14:37,601 --> 00:14:40,302
um, oh, sorry, it's in a, it's in a list so

292
00:14:40,302 --> 00:14:42,319
of course you have to access element zero first.

293
00:14:42,319 --> 00:14:44,599
My bad, if you noticed that, well done.

294
00:14:44,599 --> 00:14:48,099
And there you have Alfa Romeo printed out.

295
00:14:49,027 --> 00:14:51,919
So loads allows you to turn a JSON string

296
00:14:51,919 --> 00:14:55,788
into a dictionary and, of course, dumps allows you

297
00:14:55,788 --> 00:14:58,658
to turn a dictionary into a string

298
00:14:58,658 --> 00:14:59,785
pretty straight-forward to use

299
00:14:59,785 --> 00:15:01,134
I won't give you an example of that

300
00:15:01,134 --> 00:15:03,405
because you know if you have a dictionary

301
00:15:03,405 --> 00:15:07,072
or JSON thing, like this one, like this list

302
00:15:08,105 --> 00:15:10,190
or a dictionary, you can use dumps

303
00:15:10,190 --> 00:15:12,932
to turn whatever construct you've got

304
00:15:12,932 --> 00:15:15,015
into JSON, a JSON string.

305
00:15:17,088 --> 00:15:21,410
So JSON allows you to use lists and dictionaries,

306
00:15:21,410 --> 00:15:24,410
it does not allow you to use tuples.

307
00:15:25,277 --> 00:15:26,798
So that's important, just make sure to use

308
00:15:26,798 --> 00:15:28,937
lists and dictionaries, don't use tuples

309
00:15:28,937 --> 00:15:30,802
you can use pretty much anything else

310
00:15:30,802 --> 00:15:33,443
like strings, numbers, floats

311
00:15:33,443 --> 00:15:36,427
and the JSON module will automatically

312
00:15:36,427 --> 00:15:39,932
call the repr function a dunder repr function

313
00:15:39,932 --> 00:15:41,531
of your object if you choose to include

314
00:15:41,531 --> 00:15:43,842
any object in here, generally, though,

315
00:15:43,842 --> 00:15:46,574
try to avoid objects in a JSON

316
00:15:46,574 --> 00:15:49,828
just because when you load them up

317
00:15:49,828 --> 00:15:51,491
it's just going to be a string and it's going to be

318
00:15:51,491 --> 00:15:53,678
really difficult to understand what's going on.

319
00:15:53,678 --> 00:15:57,408
So if you want to turn your objects into JSON

320
00:15:57,408 --> 00:15:59,858
which we will do shortly, make sure

321
00:15:59,858 --> 00:16:03,692
that you describe your objects using a dictionary.

322
00:16:03,692 --> 00:16:05,441
For example you can make a dictionary out of

323
00:16:05,441 --> 00:16:09,273
the object's variable properties and their values.

324
00:16:09,273 --> 00:16:10,903
That way, you can then export your objects

325
00:16:10,903 --> 00:16:13,873
as JSON string if you want to.

326
00:16:13,873 --> 00:16:15,143
If you don't know what I'm talking about

327
00:16:15,143 --> 00:16:17,031
that's fine, we're going to be doing

328
00:16:17,031 --> 00:16:19,296
just that, exporting our objects as JSON

329
00:16:19,296 --> 00:16:21,608
later on in the course and yet in some other

330
00:16:21,608 --> 00:16:24,750
courses I've got we use things like that as well.

331
00:16:24,750 --> 00:16:27,462
So it's a pretty popular approach to turn

332
00:16:27,462 --> 00:16:30,205
objects and to turn your variables into JSON

333
00:16:30,205 --> 00:16:33,057
so that you can save them into files, read them nicely,

334
00:16:33,057 --> 00:16:35,368
and also so you can sand them over the internet

335
00:16:35,368 --> 00:16:38,598
because that's a popular thing to do with JSON.

336
00:16:38,598 --> 00:16:40,150
Alright, so that's enough of that.

337
00:16:40,150 --> 00:16:42,540
We've looked at CSV's and JSON

338
00:16:42,540 --> 00:16:45,304
they are two very popular ways of storing data

339
00:16:45,304 --> 00:16:48,361
JSON much more popular for sending data over the internet

340
00:16:48,361 --> 00:16:49,873
and now that we are able to read and write

341
00:16:49,873 --> 00:16:51,317
data in this variety of formats,

342
00:16:51,317 --> 00:16:53,298
we are good to start creating apps

343
00:16:53,298 --> 00:16:56,850
that persist data into a disc or save data into a disc

344
00:16:56,850 --> 00:17:00,850
and allows it to store it between its run times.

345
00:17:02,077 --> 00:17:03,988
In the next section, we are going to be creating

346
00:17:03,988 --> 00:17:07,738
a nice project, but now I wanted to move onto

347
00:17:09,519 --> 00:17:13,547
a couple other things like importing our own files

348
00:17:13,547 --> 00:17:15,564
and our own modules, just so you can start

349
00:17:15,564 --> 00:17:17,899
dividing your programme into parts

350
00:17:17,899 --> 00:17:20,923
as opposed to having everything in a single file.

351
00:17:20,923 --> 00:17:22,553
This is pretty important whenever you are

352
00:17:22,553 --> 00:17:24,607
creating a larger app, you are going to

353
00:17:24,607 --> 00:17:26,614
be dividing it into multiple files.

354
00:17:26,614 --> 00:17:28,706
So knowing how to interact between those two

355
00:17:28,706 --> 00:17:31,949
and how the imports work on a lower level

356
00:17:31,949 --> 00:17:34,142
is going to be really important.

357
00:17:34,142 --> 00:17:36,367
With that said, let's move onto the next video.

358
00:17:36,367 --> 00:17:37,502
I'll see you later.

