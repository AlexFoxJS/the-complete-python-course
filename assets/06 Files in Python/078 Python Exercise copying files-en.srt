1
00:00:00,210 --> 00:00:01,610
<v Jose>Hi, and welcome back.</v>

2
00:00:01,610 --> 00:00:05,450
In this video we're going to talk about copying a file,

3
00:00:05,450 --> 00:00:09,030
and we're gonna do so with a small exercise.

4
00:00:09,030 --> 00:00:11,070
What I've done is, instead of my project,

5
00:00:11,070 --> 00:00:13,890
just to keep things simple, I've created a new Python file

6
00:00:13,890 --> 00:00:14,980
called friends.py.

7
00:00:15,903 --> 00:00:19,490
Throughout this project we're going to be running this file.

8
00:00:19,490 --> 00:00:21,050
I've also created two text files:

9
00:00:21,050 --> 00:00:25,130
nearby_friends.txt and people.txt.

10
00:00:26,520 --> 00:00:30,300
Inside people.txt you can write a bunch of names.

11
00:00:32,720 --> 00:00:35,360
I'm going to go with the staples

12
00:00:40,180 --> 00:00:42,410
of declado.

13
00:00:42,410 --> 00:00:43,820
Starting with Rolf, of course.

14
00:00:43,820 --> 00:00:46,470
Got some Charlies in there.

15
00:00:46,470 --> 00:00:48,970
These people are just people that are

16
00:00:49,910 --> 00:00:51,870
somewhere near you, let's say.

17
00:00:53,460 --> 00:00:56,730
Inside our friends.py file now we're gonna write

18
00:00:56,730 --> 00:01:00,180
a short programme that is going to, first,

19
00:01:00,180 --> 00:01:03,960
ask the user for a list of three friends.

20
00:01:05,490 --> 00:01:09,510
Then, for each friend we're going to tell the user

21
00:01:09,510 --> 00:01:11,180
whether they're in the same city.

22
00:01:16,468 --> 00:01:19,620
Finally, for each friend that is in the same city,

23
00:01:19,620 --> 00:01:22,950
we're going to save them to the nearby_friends file.

24
00:01:30,710 --> 00:01:31,543
OK?

25
00:01:33,290 --> 00:01:34,180
It has to do three things;

26
00:01:34,180 --> 00:01:36,360
first, ask the user for three friends.

27
00:01:36,360 --> 00:01:40,800
You can do this either using the split method of string,

28
00:01:40,800 --> 00:01:43,400
or you can ask for three distinct friends.

29
00:01:43,400 --> 00:01:45,450
That's fine, three inputs.

30
00:01:45,450 --> 00:01:48,580
Then you'll have to open the people.txt file,

31
00:01:48,580 --> 00:01:51,030
and read all of the lines.

32
00:01:51,030 --> 00:01:53,860
You may hint: readlines.

33
00:01:55,350 --> 00:01:59,520
Readlines could be interesting for this exercise.

34
00:01:59,520 --> 00:02:02,280
I'd recommend that you Google it, and see what you can find.

35
00:02:02,280 --> 00:02:04,100
But, of course, we're gonna implement this

36
00:02:04,100 --> 00:02:05,600
in a project in just a moment.

37
00:02:06,630 --> 00:02:09,910
You wanna read all of the lines in people,

38
00:02:09,910 --> 00:02:12,670
and that's going to give you a list of strings,

39
00:02:12,670 --> 00:02:13,800
a string per line.

40
00:02:13,800 --> 00:02:17,290
That's the friends, or, rather, that's the people nearby.

41
00:02:17,290 --> 00:02:20,490
Then, we're going to compare the people in that file

42
00:02:20,490 --> 00:02:23,210
with the friends that the user entered.

43
00:02:23,210 --> 00:02:25,870
If the friend is amongst those people,

44
00:02:25,870 --> 00:02:29,480
we're gonna tell the user and also put them into this file.

45
00:02:29,480 --> 00:02:32,360
We're effectively copying the people file

46
00:02:32,360 --> 00:02:35,230
into the nearby_friends file, selectively,

47
00:02:35,230 --> 00:02:38,230
allowing the user to choose which friends they want to copy.

48
00:02:39,800 --> 00:02:44,620
So, I'd advise now, I know this is a larger undertaking

49
00:02:44,620 --> 00:02:47,440
than we've done previously, and I don't necessarily

50
00:02:47,440 --> 00:02:50,360
expect you to do this right off the bat.

51
00:02:50,360 --> 00:02:54,030
However, by building projects and by struggling a little bit

52
00:02:54,030 --> 00:02:58,610
that is the best way to learn and to really get familiar

53
00:02:58,610 --> 00:03:00,200
with the research that you have to do

54
00:03:00,200 --> 00:03:02,920
in order to become proficient at programming.

55
00:03:02,920 --> 00:03:05,370
I'd encourage you to pause the video,

56
00:03:05,370 --> 00:03:08,640
give it a go for maybe 20 or 30 minutes,

57
00:03:08,640 --> 00:03:11,560
and then come back, and we will continue implementing

58
00:03:11,560 --> 00:03:14,540
this project here, and I'll explain all the choices

59
00:03:14,540 --> 00:03:16,980
that I'm making in order to get it to work.

60
00:03:16,980 --> 00:03:17,813
Let's go for it.

61
00:03:23,150 --> 00:03:28,020
I'm sure that you at least got someplace with this project.

62
00:03:28,020 --> 00:03:30,810
I am confident that you've managed

63
00:03:30,810 --> 00:03:33,280
to do some of the things here if not all of them.

64
00:03:34,520 --> 00:03:36,250
Now, if you do have any trouble

65
00:03:36,250 --> 00:03:38,550
and things that you're not really sure of,

66
00:03:38,550 --> 00:03:41,980
feel free to ask in the course Q&amp;A before watching this,

67
00:03:41,980 --> 00:03:44,040
and I'll be glad to help you

68
00:03:44,040 --> 00:03:49,040
in order to solve any doubts you have, as your own research.

69
00:03:49,070 --> 00:03:51,300
But once you're ready we can continue,

70
00:03:51,300 --> 00:03:53,480
and complete this project here.

71
00:03:53,480 --> 00:03:55,310
The first thing to do is to ask the user

72
00:03:55,310 --> 00:03:56,940
for a list of three friends.

73
00:03:58,060 --> 00:04:01,260
For this I'm going to use the input function, of course.

74
00:04:01,260 --> 00:04:04,010
I'm going to say: "Enter three friend names,

75
00:04:04,010 --> 00:04:06,620
"separated by commas (no spaces, please):"

76
00:04:14,120 --> 00:04:16,970
These friend names are going to be something like Rolf,

77
00:04:16,970 --> 00:04:18,870
Jose, Charlie.

78
00:04:18,870 --> 00:04:22,210
Something like this is what the user's gonna enter.

79
00:04:22,210 --> 00:04:24,900
So, this is going to be a string

80
00:04:24,900 --> 00:04:27,809
that has three friend names separated by commas.

81
00:04:27,809 --> 00:04:31,940
Whenever you have a string that has a separator in it,

82
00:04:31,940 --> 00:04:35,100
like the comma in this case, you can do .split.

83
00:04:37,430 --> 00:04:38,660
What this does is,

84
00:04:38,660 --> 00:04:42,510
instead of a string with two commas and three names,

85
00:04:42,510 --> 00:04:45,220
it's going to give you something that looks like this.

86
00:04:49,040 --> 00:04:51,260
That's a list of three elements.

87
00:04:51,260 --> 00:04:52,750
Notice how the commas are now gone,

88
00:04:52,750 --> 00:04:55,130
they are part of the list, and instead,

89
00:04:55,130 --> 00:04:59,840
the elements are made up into a list of individual names.

90
00:05:01,480 --> 00:05:03,040
That's what this split method does.

91
00:05:03,040 --> 00:05:05,110
I'm not sure if we've looked at that one before.

92
00:05:05,110 --> 00:05:07,150
But, nonetheless, that's how you can split

93
00:05:07,150 --> 00:05:10,610
a string into multiple constituent parts.

94
00:05:10,610 --> 00:05:13,400
Of course, if you had asked friend one,

95
00:05:13,400 --> 00:05:15,200
and said: "input('Enter your first friend:')",

96
00:05:16,316 --> 00:05:18,530
that's totally cool.

97
00:05:18,530 --> 00:05:20,440
That is the way that I would expect you to do it

98
00:05:20,440 --> 00:05:22,940
if you didn't know about this split method.

99
00:05:22,940 --> 00:05:23,773
That's OK.

100
00:05:25,550 --> 00:05:27,630
Now that we've got a list of friends.

101
00:05:27,630 --> 00:05:30,030
Of course, if you did ask for friend one,

102
00:05:30,030 --> 00:05:32,210
friend two, friend three, then I would expect you,

103
00:05:32,210 --> 00:05:34,780
at some point, to have created a list

104
00:05:34,780 --> 00:05:38,370
of friend one, friend two, and friend three.

105
00:05:38,370 --> 00:05:40,170
That way, you would have a list of friends

106
00:05:40,170 --> 00:05:42,530
as opposed to three independent variables.

107
00:05:42,530 --> 00:05:44,960
This would be a great way to do it

108
00:05:44,960 --> 00:05:47,680
without the split function, the split method, sorry.

109
00:05:48,830 --> 00:05:50,370
Now that we've got a list of friends, though,

110
00:05:50,370 --> 00:05:53,480
we can open people.txt, and read it

111
00:05:53,480 --> 00:05:55,890
so that we know the people that are nearby.

112
00:05:56,780 --> 00:06:00,790
Again, we're gonna open people.txt in read mode, of course,

113
00:06:00,790 --> 00:06:02,760
because we are just reading it.

114
00:06:02,760 --> 00:06:04,110
We're not gonna write it to this file;

115
00:06:04,110 --> 00:06:06,370
we're gonna write to the other file.

116
00:06:06,370 --> 00:06:07,920
And then we're gonna look for the people

117
00:06:07,920 --> 00:06:10,343
who are in the same city or people that are nearby.

118
00:06:10,343 --> 00:06:14,380
people_nearby is gonna be file, or people.readlines.

119
00:06:18,562 --> 00:06:22,500
The readlines method that I suggested as a hint earlier on,

120
00:06:23,430 --> 00:06:25,260
essentially just going to read the file,

121
00:06:25,260 --> 00:06:28,890
but giving you a list of line1, line2, line3, line4,

122
00:06:31,520 --> 00:06:34,500
which is a pretty handy way of reading a file,

123
00:06:34,500 --> 00:06:37,690
especially because we've got one friend per file,

124
00:06:37,690 --> 00:06:40,300
one friend per line in our data file.

125
00:06:41,290 --> 00:06:42,830
That's a good way to go about it.

126
00:06:42,830 --> 00:06:46,200
If, through your research you didn't quite find this method,

127
00:06:46,200 --> 00:06:47,410
that's totally fine.

128
00:06:47,410 --> 00:06:49,110
I'm sure that, at that point,

129
00:06:49,110 --> 00:06:50,710
if you couldn't find that method,

130
00:06:50,710 --> 00:06:52,920
that was the point where you thought:

131
00:06:52,920 --> 00:06:55,470
"I need to keep watching this", and that's totally fine.

132
00:06:55,470 --> 00:06:58,140
Of course I don't expect you to know everything

133
00:06:58,140 --> 00:07:01,200
about files when we haven't even covered it yet.

134
00:07:01,200 --> 00:07:04,010
Nonetheless, it's always good to do some research.

135
00:07:04,940 --> 00:07:05,990
Even if you don't find anything,

136
00:07:05,990 --> 00:07:08,100
it's good to train yourself to do that.

137
00:07:08,100 --> 00:07:10,160
At the end, of course, we're going to close the file.

138
00:07:10,160 --> 00:07:12,320
Now that we've read it and we've got our contents

139
00:07:12,320 --> 00:07:14,910
in this variable, we no longer need the file for anything,

140
00:07:14,910 --> 00:07:17,710
'cause we can still access the variable with the values.

141
00:07:19,780 --> 00:07:23,500
Next, we're going to find out which people

142
00:07:23,500 --> 00:07:26,740
are friends who are also nearby.

143
00:07:29,530 --> 00:07:32,140
The best way to do that would be with a set.

144
00:07:33,670 --> 00:07:35,350
We've looked at sets before.

145
00:07:35,350 --> 00:07:38,050
What I'll do now is say something like friends_set

146
00:07:38,050 --> 00:07:40,380
is a set of friends.

147
00:07:41,800 --> 00:07:44,310
This turns the friends list up here into a set,

148
00:07:44,310 --> 00:07:48,740
removing duplicates, and also making it unordered,

149
00:07:48,740 --> 00:07:50,690
and it allows us to do things like intersection,

150
00:07:50,690 --> 00:07:52,440
which are going to be pretty handy.

151
00:07:53,320 --> 00:07:56,700
Then we'd turn the people_nearby into a set.

152
00:08:01,890 --> 00:08:03,070
Now we have two sets,

153
00:08:03,070 --> 00:08:05,270
one of friends and one of people nearby.

154
00:08:05,270 --> 00:08:07,830
So, we know, of course, that to get the ones that match,

155
00:08:07,830 --> 00:08:10,830
the friends that are nearby, we just need to intersect them.

156
00:08:14,530 --> 00:08:17,100
We'll do friends_set.intersection(people_nearby_set),

157
00:08:19,680 --> 00:08:21,720
and that gives you the friends that are nearby,

158
00:08:21,720 --> 00:08:23,530
because it gives you the elements that match

159
00:08:23,530 --> 00:08:27,170
on both friends_set and people_nearby_set.

160
00:08:28,780 --> 00:08:30,820
Now that we've got our friends that're nearby,

161
00:08:30,820 --> 00:08:34,830
we can open the nearby_friends.txt file.

162
00:08:34,830 --> 00:08:37,960
Let's say, nearby_friends_file

163
00:08:37,960 --> 00:08:42,960
is gonna be open('nearby_friends.txt',

164
00:08:43,040 --> 00:08:44,700
and this time it's gonna be in write mode

165
00:08:44,700 --> 00:08:47,631
because we're gonna be writing some data to it.

166
00:08:47,631 --> 00:08:49,930
Then we can iterate over our nearby friends

167
00:08:49,930 --> 00:08:54,780
for friend in nearby...

168
00:08:54,780 --> 00:08:57,820
Sorry, it's friends_nearby_set.

169
00:08:57,820 --> 00:08:59,270
I'm gonna call it friends_nearby_set,

170
00:08:59,270 --> 00:09:02,960
just for consistency since these are all called set.

171
00:09:05,290 --> 00:09:07,990
We're just going to say: "Hey, this friend is nearby."

172
00:09:10,100 --> 00:09:12,190
We're gonna say '(friend) is nearby!

173
00:09:12,190 --> 00:09:14,630
'Meet up with them.'

174
00:09:15,610 --> 00:09:17,940
We're also going to save them to the file.

175
00:09:17,940 --> 00:09:22,940
That would be nearby_friends_file.write, and then friend.

176
00:09:26,380 --> 00:09:30,640
Now, there are a couple of problems with this code here.

177
00:09:30,640 --> 00:09:32,470
So, the first thing we have to do, of course,

178
00:09:32,470 --> 00:09:34,750
before we run it is...

179
00:09:34,750 --> 00:09:36,960
Sorry, I just pressed the Siri button there by accident.

180
00:09:36,960 --> 00:09:40,020
It's a touchscreen, this touch file thing.

181
00:09:40,020 --> 00:09:43,190
We have to close the file.

182
00:09:45,450 --> 00:09:48,210
Remember to close it, otherwise, it will keep open

183
00:09:48,210 --> 00:09:50,610
between executions, even after you've closed the programme.

184
00:09:50,610 --> 00:09:51,460
Not a good thing.

185
00:09:53,260 --> 00:09:54,093
Let's run it.

186
00:09:55,600 --> 00:09:58,110
We can see that it asks us to enter three friend names

187
00:09:58,110 --> 00:09:59,220
separated by commas.

188
00:09:59,220 --> 00:10:03,420
We can enter Rolf, Charlie, and Rudolph, for example.

189
00:10:03,420 --> 00:10:06,270
That one doesn't exist, but we should get to, right?

190
00:10:09,160 --> 00:10:10,800
Hmm.

191
00:10:10,800 --> 00:10:11,750
We get nothing.

192
00:10:12,890 --> 00:10:14,690
Let's check the nearby_friends file.

193
00:10:16,600 --> 00:10:17,450
It's got nothing.

194
00:10:19,932 --> 00:10:21,380
I wonder why that is.

195
00:10:22,820 --> 00:10:26,520
Well, what happens when we encounter a bug?

196
00:10:26,520 --> 00:10:30,090
Of course, we must look at the checklist

197
00:10:30,090 --> 00:10:32,610
that I provided earlier, in the last section,

198
00:10:32,610 --> 00:10:34,410
of looking at our code first of all.

199
00:10:34,410 --> 00:10:36,310
Gonna minimise this thing here.

200
00:10:36,310 --> 00:10:37,143
We're gonna, once again,

201
00:10:37,143 --> 00:10:39,470
go through this code and what it's doing.

202
00:10:41,480 --> 00:10:43,370
We ask the user for some input;

203
00:10:43,370 --> 00:10:45,550
that gets split on the comma.

204
00:10:45,550 --> 00:10:47,500
Now, I have quite a bit of experience,

205
00:10:47,500 --> 00:10:51,050
and I know that this split seems reasonable,

206
00:10:51,050 --> 00:10:53,450
and I know that this is going to provide a list.

207
00:10:54,490 --> 00:10:56,200
This looks good so far.

208
00:10:56,200 --> 00:10:57,660
We're opening a file for reading.

209
00:10:57,660 --> 00:10:59,650
We did this earlier on, and it worked fine.

210
00:10:59,650 --> 00:11:00,690
Use the same syntax.

211
00:11:00,690 --> 00:11:02,590
This is OK.

212
00:11:02,590 --> 00:11:04,080
Then we're reading the lines.

213
00:11:04,080 --> 00:11:06,470
We didn't read lines earlier on,

214
00:11:06,470 --> 00:11:09,730
so we're not really sure what this is doing.

215
00:11:10,930 --> 00:11:13,630
Then we're closing the file; this seems legitimate.

216
00:11:13,630 --> 00:11:16,230
Then we created a set of our friends.

217
00:11:16,230 --> 00:11:17,970
We've looked at sets earlier on,

218
00:11:17,970 --> 00:11:21,300
but I'm not sure if we actually converted a list to a set.

219
00:11:22,170 --> 00:11:23,400
Maybe this is something that we have

220
00:11:23,400 --> 00:11:26,220
to look into before we continue.

221
00:11:26,220 --> 00:11:27,100
As you can see, there's a couple

222
00:11:27,100 --> 00:11:29,350
of unknowns in this programme.

223
00:11:29,350 --> 00:11:32,060
What exactly is readlines doing?

224
00:11:32,060 --> 00:11:34,914
What exactly is set doing?

225
00:11:34,914 --> 00:11:36,960
We're calling it again.

226
00:11:36,960 --> 00:11:38,700
I'm telling you these are giving you sets,

227
00:11:38,700 --> 00:11:40,670
and this is the intersection of the two,

228
00:11:40,670 --> 00:11:43,260
so these should be the friends that match.

229
00:11:43,260 --> 00:11:45,680
But then, all we're doing is opening the file for writing,

230
00:11:45,680 --> 00:11:48,580
and iterating over the friends, and printing them out.

231
00:11:48,580 --> 00:11:51,130
There's really nothing that could go wrong in here.

232
00:11:52,000 --> 00:11:53,920
The only things that could go wrong is either readlines

233
00:11:53,920 --> 00:11:56,870
'cause we are not really sure what it's doing.

234
00:11:56,870 --> 00:12:00,170
We've used it, and I've told you what it does,

235
00:12:00,170 --> 00:12:02,130
but maybe there's some small nuance there

236
00:12:02,130 --> 00:12:03,550
that we're not sure about.

237
00:12:03,550 --> 00:12:04,880
And, of course, a set.

238
00:12:06,430 --> 00:12:07,960
We didn't get an error.

239
00:12:07,960 --> 00:12:10,640
The checklist for error-handling said that you should copy

240
00:12:10,640 --> 00:12:12,680
the error, and into Google, past it in.

241
00:12:12,680 --> 00:12:13,780
There's no error here.

242
00:12:13,780 --> 00:12:16,130
So, maybe we don't wanna go to Google just yet.

243
00:12:17,200 --> 00:12:20,070
We could go through our programme as the computer,

244
00:12:20,070 --> 00:12:22,100
checking exactly what we've entered,

245
00:12:22,100 --> 00:12:25,920
exactly what it turns out, and exactly what everything does,

246
00:12:25,920 --> 00:12:27,880
but, it's more difficult to do that because

247
00:12:27,880 --> 00:12:30,290
we're not 100% confident on everything

248
00:12:30,290 --> 00:12:32,650
that every single line of code is doing.

249
00:12:33,660 --> 00:12:37,540
If you're ever at that stage where you're not 100% confident

250
00:12:37,540 --> 00:12:40,330
that something is doing what you expect,

251
00:12:41,400 --> 00:12:44,190
you have to really be honest with yourself, and say:

252
00:12:44,190 --> 00:12:46,210
"I've never actually ran this before.

253
00:12:47,390 --> 00:12:49,560
"Maybe it's doing something unexpected."

254
00:12:49,560 --> 00:12:52,870
I've run this before, so I know exactly what the problem is,

255
00:12:52,870 --> 00:12:54,380
but you don't know this.

256
00:12:54,380 --> 00:12:57,930
So, the first thing to do is to set a breakpoint

257
00:12:57,930 --> 00:13:00,660
where you are least comfortable,

258
00:13:00,660 --> 00:13:05,660
or rather, where your discomfort begins.

259
00:13:05,670 --> 00:13:08,800
Set a breakpoint, and then just run the programme

260
00:13:08,800 --> 00:13:09,990
using the debugger.

261
00:13:10,870 --> 00:13:12,960
Debugger is extremely useful.

262
00:13:12,960 --> 00:13:15,050
As you can see, the first thing that we get is the console,

263
00:13:15,050 --> 00:13:17,200
and it asks us to enter three friend names.

264
00:13:18,510 --> 00:13:19,610
Let's enter the same thing as before:

265
00:13:19,610 --> 00:13:21,750
Rolf, Charlie, Rudolph.

266
00:13:24,450 --> 00:13:27,830
So, we have our friends list.

267
00:13:27,830 --> 00:13:28,830
You can see it down here.

268
00:13:28,830 --> 00:13:30,910
It's a list of three elements.

269
00:13:30,910 --> 00:13:33,090
We're pretty confident on the split method,

270
00:13:33,090 --> 00:13:35,720
and, indeed, it seems to be giving us what we wanted,

271
00:13:35,720 --> 00:13:37,220
a list of three elements:

272
00:13:37,220 --> 00:13:39,210
Rolf, Charlie, and Rudolph down there.

273
00:13:40,860 --> 00:13:43,390
We've then opened the file, and we know what this does.

274
00:13:43,390 --> 00:13:45,750
Just gives us a TextIOWrapper.

275
00:13:45,750 --> 00:13:47,650
That's just a class that allows us

276
00:13:47,650 --> 00:13:48,950
to interact with the file.

277
00:13:50,310 --> 00:13:52,320
And then we've got people.readlines.

278
00:13:53,880 --> 00:13:56,780
Let's press step to the next line.

279
00:13:58,090 --> 00:14:00,610
Now notice how people_nearby has acquired a value

280
00:14:00,610 --> 00:14:02,682
after we read the lines,

281
00:14:02,682 --> 00:14:05,050
and the value is a rather bizarre value.

282
00:14:06,010 --> 00:14:11,010
We've got Rolf\n, Jose\n, Chris\n, and so forth,

283
00:14:13,530 --> 00:14:16,500
until Steve, which does not have a \n.

284
00:14:17,410 --> 00:14:21,930
Now, I mentioned earlier on, I believe, what the \n means:

285
00:14:22,770 --> 00:14:23,990
when we were working on a menu

286
00:14:23,990 --> 00:14:27,080
for the mouse-down project one, and it's a new line.

287
00:14:28,160 --> 00:14:30,530
If we open up people.txt, you can see

288
00:14:30,530 --> 00:14:34,140
that each line has something at the end

289
00:14:34,140 --> 00:14:37,150
that tells the editor to go on to the next line.

290
00:14:37,150 --> 00:14:39,940
Otherwise, everything will continue on the same line.

291
00:14:40,870 --> 00:14:43,670
That character is the \n character.

292
00:14:43,670 --> 00:14:45,370
It means new line.

293
00:14:45,370 --> 00:14:47,970
So we go on to the next line, and then new line at the end,

294
00:14:47,970 --> 00:14:49,470
next line, and so forth.

295
00:14:49,470 --> 00:14:53,160
You cannot see that character, but it exists, it is there.

296
00:14:53,160 --> 00:14:56,406
That's how the text file knows to split this into lines.

297
00:14:56,406 --> 00:14:57,780
It's not magic.

298
00:14:57,780 --> 00:14:59,360
There is something there telling it:

299
00:14:59,360 --> 00:15:02,310
"Go to the next line", and that's this \n character.

300
00:15:04,010 --> 00:15:07,560
OK, so, now we probably know what the problem is,

301
00:15:07,560 --> 00:15:09,470
but let's continue into the sets

302
00:15:09,470 --> 00:15:11,290
just to analyse exactly what's going on.

303
00:15:11,290 --> 00:15:13,730
We've got a set now of three elements.

304
00:15:13,730 --> 00:15:15,040
Notice how they are not in order,

305
00:15:15,040 --> 00:15:17,380
or not in the same order as before.

306
00:15:17,380 --> 00:15:20,340
We have a set of the people nearby.

307
00:15:20,340 --> 00:15:23,210
Notice how we do have the set converted here,

308
00:15:23,210 --> 00:15:26,970
but again, each element has this \n.

309
00:15:26,970 --> 00:15:31,970
Of course, when we do the intersection, it's an empty set.

310
00:15:32,410 --> 00:15:36,590
Because Charlie is not equal to Charlie\n,

311
00:15:36,590 --> 00:15:39,860
and Rolf is not equal to Rolf\n.

312
00:15:40,750 --> 00:15:41,920
This is not gonna work.

313
00:15:43,110 --> 00:15:46,150
And, at the end, of course, we iterate over an empty set,

314
00:15:46,150 --> 00:15:48,270
nothing happens, and we close the file.

315
00:15:50,760 --> 00:15:52,100
What can we do?

316
00:15:53,770 --> 00:15:56,180
Well, the first thing that I would do

317
00:15:56,180 --> 00:15:59,190
is a list comprehension, and in that list comprehension

318
00:15:59,190 --> 00:16:04,190
I would turn the lines into lines with no \n at the end.

319
00:16:05,320 --> 00:16:06,170
So let's do that.

320
00:16:07,740 --> 00:16:10,740
List comprehension, we're gonna say line,

321
00:16:10,740 --> 00:16:15,060
strip for line in people.readlines.

322
00:16:16,150 --> 00:16:18,030
Then I'm gonna set the breakpoint over here,

323
00:16:18,030 --> 00:16:19,430
and we're gonna debug again.

324
00:16:21,370 --> 00:16:22,530
Enter our three names.

325
00:16:26,990 --> 00:16:31,370
Now notice how the people nearby no longer have the \n.

326
00:16:31,370 --> 00:16:34,330
This is what the strip method does.

327
00:16:34,330 --> 00:16:38,540
Any white space, like normal spaces,

328
00:16:38,540 --> 00:16:41,020
tabs, or newline characters,

329
00:16:41,020 --> 00:16:46,020
get removed from the start and the end of the string.

330
00:16:46,312 --> 00:16:50,360
In this case the \ns got removed from the end of the strings

331
00:16:50,360 --> 00:16:53,840
so that we ended up just with a string with no white space.

332
00:16:53,840 --> 00:16:56,220
That's what this strip method does.

333
00:16:56,220 --> 00:16:58,140
Pretty useful method there.

334
00:16:58,140 --> 00:17:01,250
Now we've got the list of people nearby,

335
00:17:02,170 --> 00:17:03,980
the sets are going to match.

336
00:17:03,980 --> 00:17:06,340
You've got Charlie and Charlie, Rudolph and nothing,

337
00:17:06,340 --> 00:17:07,780
and Rolf and Rolf.

338
00:17:07,780 --> 00:17:09,980
So let's have a look, see if the friends_nearby set

339
00:17:09,980 --> 00:17:13,400
does have the values we want, and indeed it does.

340
00:17:13,400 --> 00:17:15,650
We have Rolf and Charlie, our two friends.

341
00:17:16,720 --> 00:17:19,330
And, to be honest, the first few times you run your programmes

342
00:17:19,330 --> 00:17:21,730
it may be beneficial to run through them using the debugger

343
00:17:21,730 --> 00:17:23,370
because it just lets you go line by line,

344
00:17:23,370 --> 00:17:25,730
examining exactly what's going on.

345
00:17:25,730 --> 00:17:27,210
We've opened the file here.

346
00:17:27,210 --> 00:17:28,540
We're gonna iterate over our friends.

347
00:17:28,540 --> 00:17:30,110
The first one we get is Rolf.

348
00:17:30,110 --> 00:17:32,910
Remember, the set is not ordered, so it could be either.

349
00:17:34,120 --> 00:17:35,080
Then we're printing something out.

350
00:17:35,080 --> 00:17:36,830
Let's go and check the console.

351
00:17:36,830 --> 00:17:38,340
We can see that Rolf is nearby.

352
00:17:38,340 --> 00:17:40,030
We should meet up with him.

353
00:17:40,030 --> 00:17:42,300
Then we're gonna write to the friends file.

354
00:17:42,300 --> 00:17:45,010
That has happened, but I don't think that the file

355
00:17:45,010 --> 00:17:46,830
yet contains anything; it does not,

356
00:17:46,830 --> 00:17:49,260
because it won't be saved, actually, to the disc

357
00:17:49,260 --> 00:17:53,720
until we close the file or until we overrun the buffer,

358
00:17:53,720 --> 00:17:55,480
which is not something we're gonna talk about in this video,

359
00:17:55,480 --> 00:17:57,170
but, nonetheless.

360
00:17:57,170 --> 00:17:58,390
Those are the only two moments

361
00:17:58,390 --> 00:18:00,040
when the file actually gets saved to the disc.

362
00:18:00,040 --> 00:18:01,540
It doesn't get saved instantly,

363
00:18:01,540 --> 00:18:04,230
in order to improve performance.

364
00:18:04,230 --> 00:18:06,430
So again, Charlie, same things happens.

365
00:18:06,430 --> 00:18:09,610
Then we move over to closing the file, and we close it.

366
00:18:09,610 --> 00:18:11,280
We've seen that Rolf is nearby

367
00:18:11,280 --> 00:18:13,440
and Charlie's nearby in the console,

368
00:18:13,440 --> 00:18:16,140
and our file should now have our friends.

369
00:18:16,140 --> 00:18:19,810
But, of course, we didn't include a \n character,

370
00:18:19,810 --> 00:18:21,660
so these friends are all in one line.

371
00:18:23,380 --> 00:18:25,140
If we go back to our friends.py,

372
00:18:25,140 --> 00:18:29,300
and we put a \n after friend,

373
00:18:29,300 --> 00:18:30,800
that means that when we write to the file

374
00:18:30,800 --> 00:18:33,250
we'll write the friend name, and then we will also write

375
00:18:33,250 --> 00:18:35,280
this invisible newline character

376
00:18:35,280 --> 00:18:37,120
that will move us into the next line,

377
00:18:37,120 --> 00:18:40,350
then we will write the next friend there, as well.

378
00:18:40,350 --> 00:18:42,260
Also, the reason I'm adding a newline at the end

379
00:18:42,260 --> 00:18:44,290
is because peppy asks me to.

380
00:18:44,290 --> 00:18:46,370
It's got this grey squiggly line there.

381
00:18:47,450 --> 00:18:48,930
So yeah.

382
00:18:48,930 --> 00:18:49,763
OK.

383
00:18:49,763 --> 00:18:51,650
Now we are happy with the way our programme runs,

384
00:18:51,650 --> 00:18:53,660
we can remove the breakpoint,

385
00:18:53,660 --> 00:18:56,350
and just play it in normal mode.

386
00:18:56,350 --> 00:19:00,210
Then we can enter three friends.

387
00:19:03,560 --> 00:19:06,190
You can see that we get Rolf is nearby, Jose is nearby.

388
00:19:06,190 --> 00:19:07,210
Meet up with them.

389
00:19:07,210 --> 00:19:09,920
I thought we had that Ann in people, but I guess it's Anna.

390
00:19:09,920 --> 00:19:10,810
Yep.

391
00:19:10,810 --> 00:19:12,890
And then we can go and check our nearby friends,

392
00:19:12,890 --> 00:19:16,280
and we see that they are in now two lines.

393
00:19:16,280 --> 00:19:20,020
Also notice, though, that we have line number three,

394
00:19:20,020 --> 00:19:21,400
which is an empty line.

395
00:19:21,400 --> 00:19:23,190
We didn't have that in people.

396
00:19:24,400 --> 00:19:26,980
And, to be honest, I think we should have an empty line

397
00:19:26,980 --> 00:19:29,650
at the end, just so every line is the same.

398
00:19:29,650 --> 00:19:31,890
Every line has the newline character, as opposed

399
00:19:31,890 --> 00:19:34,150
to the last line not having the newline character.

400
00:19:34,150 --> 00:19:37,420
So I'm OK with this; of course, if you are not,

401
00:19:37,420 --> 00:19:39,910
you can try to experiment with your code,

402
00:19:39,910 --> 00:19:42,010
make it only print the newline character

403
00:19:42,010 --> 00:19:46,080
when you are not printing the last element of the set.

404
00:19:46,080 --> 00:19:48,350
You can use the enumerate function for that.

405
00:19:48,350 --> 00:19:50,600
I won't go into it in this video

406
00:19:50,600 --> 00:19:52,400
since we're getting pretty long now.

407
00:19:53,260 --> 00:19:54,170
That's it for this video.

408
00:19:54,170 --> 00:19:59,170
We have created a small app that copies a file selectively.

409
00:19:59,690 --> 00:20:02,130
We've learned about a bunch of stuff,

410
00:20:02,130 --> 00:20:04,060
first, about the newline characters;

411
00:20:04,060 --> 00:20:06,660
they're everywhere, and we need to strip them out

412
00:20:06,660 --> 00:20:09,330
if we want to have no white space.

413
00:20:09,330 --> 00:20:10,410
That includes spaces, tabs,

414
00:20:10,410 --> 00:20:12,340
and newline characters in a string.

415
00:20:13,350 --> 00:20:16,100
We've learned about the readlines method of the file

416
00:20:16,100 --> 00:20:18,350
that lets us read each line of the file

417
00:20:18,350 --> 00:20:20,390
as a separate element in a list.

418
00:20:21,280 --> 00:20:23,370
I don't know if we've looked at the split method before,

419
00:20:23,370 --> 00:20:25,170
but if we didn't, then we've learned about that;

420
00:20:25,170 --> 00:20:26,940
if we did, we've reviewed it.

421
00:20:26,940 --> 00:20:30,460
It allows us to split a string into constituent parts

422
00:20:30,460 --> 00:20:33,530
according to a particular character in that string.

423
00:20:34,870 --> 00:20:37,520
Then we've also reviewed sets and using intersection

424
00:20:37,520 --> 00:20:39,410
to calculate matching elements.

425
00:20:39,410 --> 00:20:40,870
Remember I told you when we looked at sets

426
00:20:40,870 --> 00:20:42,660
that they would be pretty useful?

427
00:20:42,660 --> 00:20:44,420
They are pretty useful.

428
00:20:44,420 --> 00:20:46,970
Finally, we've also reviewed writing to a file,

429
00:20:46,970 --> 00:20:48,370
something a bit more useful.

430
00:20:49,890 --> 00:20:51,950
So, that's it for this video.

431
00:20:51,950 --> 00:20:53,640
Thanks for staying with me,

432
00:20:53,640 --> 00:20:54,850
and I'll see you on the next one.

433
00:20:54,850 --> 00:20:55,690
Great job today.

