1
00:00:00,270 --> 00:00:01,530
<v Instructor>Hi there, and welcome back.</v>

2
00:00:01,530 --> 00:00:04,990
In this video we're looking at CSV files.

3
00:00:04,990 --> 00:00:06,790
Sometimes we need to store more complex

4
00:00:06,790 --> 00:00:09,370
data in a file, rather than just single

5
00:00:09,370 --> 00:00:11,670
strings, as we've been seeing.

6
00:00:11,670 --> 00:00:13,930
And a CSV file is just the way to do that.

7
00:00:13,930 --> 00:00:16,100
When you need to store slightly more complex

8
00:00:16,100 --> 00:00:19,550
data, but maybe not necessarily too complex.

9
00:00:19,550 --> 00:00:21,530
Instead of storing one thing per line,

10
00:00:21,530 --> 00:00:24,120
now ... we're still storing one thing per line,

11
00:00:24,120 --> 00:00:27,690
really, but now the thing has commas in there.

12
00:00:27,690 --> 00:00:29,320
And then what we're gonna do is we're gonna

13
00:00:29,320 --> 00:00:31,663
split the line by the comma, and that's gonna

14
00:00:31,663 --> 00:00:33,340
give us multiple pieces of data.

15
00:00:34,350 --> 00:00:38,170
So here for example we've got a name, an age,

16
00:00:38,170 --> 00:00:41,190
a university, and a degree that somebody's doing.

17
00:00:41,190 --> 00:00:43,590
This gives us information about a single person.

18
00:00:44,570 --> 00:00:48,440
The first row tells us the headings of the data,

19
00:00:48,440 --> 00:00:52,120
so that when we look at the file we can tell what it means.

20
00:00:52,120 --> 00:00:53,940
The first column is the name.

21
00:00:53,940 --> 00:00:55,270
The second one is the age.

22
00:00:55,270 --> 00:00:56,600
Third one is the university.

23
00:00:56,600 --> 00:00:58,200
Last one is the degree.

24
00:00:58,200 --> 00:00:59,660
So what we're gonna do is we're gonna

25
00:00:59,660 --> 00:01:01,358
write a programme that is going to read these

26
00:01:01,358 --> 00:01:04,480
three lines, not the first one.

27
00:01:04,480 --> 00:01:06,540
And it's going to print out the information

28
00:01:06,540 --> 00:01:09,090
about this person in a slightly nicer way.

29
00:01:09,090 --> 00:01:11,940
Just to experiment with reading CSV files.

30
00:01:14,040 --> 00:01:16,810
Let's go over to CSV and let's go read dot py,

31
00:01:16,810 --> 00:01:18,580
a file that I've just created,

32
00:01:18,580 --> 00:01:20,700
and we're going to begin.

33
00:01:20,700 --> 00:01:22,560
The first thing to do is of course,

34
00:01:22,560 --> 00:01:24,610
read the lines in the file.

35
00:01:24,610 --> 00:01:25,900
I'm sure you can do that.

36
00:01:29,790 --> 00:01:30,870
Hopefully you got that.

37
00:01:30,870 --> 00:01:34,480
What to do is of course open the CSV and

38
00:01:34,480 --> 00:01:37,440
let's go data dot t-x-t in read mode,

39
00:01:37,440 --> 00:01:39,510
and then we can look at the lines,

40
00:01:39,510 --> 00:01:41,650
and that's gonna be file dot readlines.

41
00:01:43,590 --> 00:01:45,140
And then we can close the file.

42
00:01:46,350 --> 00:01:48,380
Now we've got all the lines.

43
00:01:48,380 --> 00:01:51,880
That's from line number one, two, three and four,

44
00:01:51,880 --> 00:01:54,020
including the new line characters at the end

45
00:01:54,020 --> 00:01:55,770
and all the connectors in the line.

46
00:01:56,860 --> 00:02:00,790
Now what we're going to do is ignore the first line.

47
00:02:02,660 --> 00:02:07,660
So, what do is say lines equals lines one colon.

48
00:02:09,230 --> 00:02:11,830
If you remember from when we looked at lists,

49
00:02:11,830 --> 00:02:15,320
this is called slicing a list, and it let's us

50
00:02:15,320 --> 00:02:17,970
essentially get only a part of the list.

51
00:02:17,970 --> 00:02:21,150
We're going to change this lines variable

52
00:02:21,150 --> 00:02:24,070
to now be what The lines variable was

53
00:02:24,070 --> 00:02:27,020
but only from index one onwards.

54
00:02:27,020 --> 00:02:30,260
So we're going to get index one onwards.

55
00:02:30,260 --> 00:02:32,670
That's one, two and three here.

56
00:02:32,670 --> 00:02:34,520
We're going to ignore the first line.

57
00:02:36,240 --> 00:02:38,840
Of course we also want to remove any white space,

58
00:02:38,840 --> 00:02:40,980
like new line characters so we can put this

59
00:02:40,980 --> 00:02:43,810
inside a list comprehension that says

60
00:02:43,810 --> 00:02:46,900
line dot strip for line in that,

61
00:02:47,940 --> 00:02:49,290
in the slice.

62
00:02:50,170 --> 00:02:52,020
The reason why I do this here instead

63
00:02:52,020 --> 00:02:54,300
of up here, is so that we are only

64
00:02:54,300 --> 00:02:56,570
stripping the lines that we want to strip,

65
00:02:56,570 --> 00:02:58,010
and not the first line because we don't

66
00:02:58,010 --> 00:02:59,160
actually care about it.

67
00:03:00,940 --> 00:03:02,710
Now that we've got these lines,

68
00:03:02,710 --> 00:03:04,470
we can iterate over them.

69
00:03:07,200 --> 00:03:09,340
And we can say that the person that

70
00:03:09,340 --> 00:03:11,800
we're gonna analyse is the entire line,

71
00:03:11,800 --> 00:03:13,990
but we want to get the data in it,

72
00:03:13,990 --> 00:03:16,470
which is separated by commas.

73
00:03:16,470 --> 00:03:17,320
So what do we do?

74
00:03:19,014 --> 00:03:22,020
Well, as we did in the last video,

75
00:03:22,020 --> 00:03:24,010
we are gonna split the line by the comma.

76
00:03:24,010 --> 00:03:26,010
So we're gonna say person data equals

77
00:03:26,010 --> 00:03:29,500
line dot split on the comma.

78
00:03:29,500 --> 00:03:31,320
That's going to give us a list

79
00:03:31,320 --> 00:03:32,920
of various elements.

80
00:03:32,920 --> 00:03:34,120
The first one is gonna be rolf.

81
00:03:34,120 --> 00:03:35,710
The second one is gonna be 25.

82
00:03:35,710 --> 00:03:37,670
The third one is gonna be MIT.

83
00:03:37,670 --> 00:03:39,590
And the fourth one is gonna be computer science.

84
00:03:39,590 --> 00:03:41,910
So the list is gonna have four elements.

85
00:03:43,520 --> 00:03:45,340
In order to make it easier for us to work

86
00:03:45,340 --> 00:03:47,130
with this programme, I'm gonna create

87
00:03:47,130 --> 00:03:48,580
the variable per element.

88
00:03:48,580 --> 00:03:50,130
It's not something you have to do,

89
00:03:50,130 --> 00:03:52,120
but I like doing that.

90
00:03:52,120 --> 00:03:56,890
So name equals person data zero.

91
00:03:56,890 --> 00:03:59,820
Age equals person data one.

92
00:03:59,820 --> 00:04:04,820
University equals person data two.

93
00:04:05,150 --> 00:04:08,610
And the degree is person data three.

94
00:04:10,160 --> 00:04:12,580
Now, of course, you'll get an index error

95
00:04:12,580 --> 00:04:15,230
if your file does not have the right format,

96
00:04:15,230 --> 00:04:19,010
but that's a problem in any case.

97
00:04:19,880 --> 00:04:21,350
Whenever you're interacting with files

98
00:04:21,350 --> 00:04:23,210
or with databases or anything else your program's

99
00:04:23,210 --> 00:04:25,670
going to be reasonably coupled to the data

100
00:04:25,670 --> 00:04:27,880
that you're interacting with so you know

101
00:04:27,880 --> 00:04:31,500
that's a problem that we have to deal with if it happens.

102
00:04:31,500 --> 00:04:33,280
Now that we've got the name, age, university

103
00:04:33,280 --> 00:04:36,470
and degree, we can print out a line saying,

104
00:04:36,470 --> 00:04:40,070
this person is 25 years old and is studying

105
00:04:40,070 --> 00:04:41,690
computer science at MIT.

106
00:04:43,220 --> 00:04:44,470
So we can print

107
00:04:48,130 --> 00:04:49,060
something like

108
00:04:50,920 --> 00:04:52,990
name is age,

109
00:04:54,720 --> 00:04:58,590
studying degree

110
00:04:58,590 --> 00:04:59,960
at university.

111
00:05:02,610 --> 00:05:03,443
There.

112
00:05:06,450 --> 00:05:09,090
Now the problem when we do this,

113
00:05:09,090 --> 00:05:10,340
let's run the file,

114
00:05:12,120 --> 00:05:14,080
is that it doesn't look so fantastic.

115
00:05:14,080 --> 00:05:16,010
You know there's no uppercase letters.

116
00:05:16,010 --> 00:05:17,990
No capitals anywhere.

117
00:05:17,990 --> 00:05:19,660
Let's make it a bit nicer.

118
00:05:19,660 --> 00:05:20,990
And the way we're gonna do that

119
00:05:20,990 --> 00:05:24,080
is by using some built-in methods

120
00:05:24,080 --> 00:05:26,830
of the string class allows us to add

121
00:05:26,830 --> 00:05:29,360
capital letters, and so forth, in various places.

122
00:05:30,400 --> 00:05:32,900
For the name, we're gonna use dot title.

123
00:05:34,610 --> 00:05:38,690
And that just turns into title case,

124
00:05:38,690 --> 00:05:41,670
so the first letter of every word

125
00:05:41,670 --> 00:05:43,420
is going to be uppercase.

126
00:05:44,450 --> 00:05:48,300
For degree, we are going to use

127
00:05:50,700 --> 00:05:54,810
capitalise because that turns the first

128
00:05:54,810 --> 00:05:57,540
letter only into upper case.

129
00:05:57,540 --> 00:05:59,730
And for university we're gonna use title

130
00:05:59,730 --> 00:06:02,440
as well, for that turns the first letter

131
00:06:02,440 --> 00:06:04,250
of every word uppercase.

132
00:06:05,620 --> 00:06:07,170
Okay, let's run the file again.

133
00:06:08,113 --> 00:06:09,860
And now we can see that it looks a bit nicer.

134
00:06:09,860 --> 00:06:11,670
We've got Rolf, who is 25, studying computer

135
00:06:11,670 --> 00:06:14,020
science at MIT.

136
00:06:14,020 --> 00:06:16,260
This doesn't look so fantastic, but I think

137
00:06:16,260 --> 00:06:17,630
this is a data problem.

138
00:06:17,630 --> 00:06:19,280
There's no way for us to know that the

139
00:06:19,280 --> 00:06:24,280
university is an acronym,

140
00:06:24,600 --> 00:06:26,620
so in that case I think that the data should be

141
00:06:26,620 --> 00:06:29,200
all uppercase if we wanted it to be like that.

142
00:06:30,110 --> 00:06:31,820
I think that's a small side problem.

143
00:06:31,820 --> 00:06:34,050
We don't have to worry too much about it.

144
00:06:34,050 --> 00:06:36,680
Of course, instead of applying Python code

145
00:06:36,680 --> 00:06:39,270
in here, I've told you how I don't really

146
00:06:39,270 --> 00:06:41,120
like that, putting Python code inside the string.

147
00:06:41,120 --> 00:06:42,750
It looks a bit ugly.

148
00:06:42,750 --> 00:06:45,230
I think that we should instead put these

149
00:06:45,230 --> 00:06:48,271
title and capitalise functions

150
00:06:48,271 --> 00:06:51,450
in the appropriate places here.

151
00:06:52,560 --> 00:06:53,760
That way it just makes it a bit nicer,

152
00:06:53,760 --> 00:06:54,810
a bit easier to read.

153
00:06:57,550 --> 00:06:59,990
Of course, this is allowing us to read

154
00:06:59,990 --> 00:07:02,690
the CSV file, extract the data from it,

155
00:07:02,690 --> 00:07:04,030
and then potentially print it out.

156
00:07:04,030 --> 00:07:05,000
We could multiply things.

157
00:07:05,000 --> 00:07:07,060
We could calculate new datas.

158
00:07:07,060 --> 00:07:07,893
We could analyse it.

159
00:07:07,893 --> 00:07:10,670
Whatever you want to do with Python code.

160
00:07:10,670 --> 00:07:13,210
If you wanted to write to the file

161
00:07:13,210 --> 00:07:15,540
it's exactly the same as writing any other file

162
00:07:15,540 --> 00:07:18,060
except you'd be writing a big string

163
00:07:18,060 --> 00:07:20,510
with various things separated by commas,

164
00:07:20,510 --> 00:07:23,860
like you could write rolf, 25,

165
00:07:26,278 --> 00:07:29,790
MIT, computer science.

166
00:07:29,790 --> 00:07:32,120
If you write that into the file

167
00:07:32,120 --> 00:07:33,290
that's all you need.

168
00:07:33,290 --> 00:07:35,250
That is going to mimic exactly

169
00:07:35,250 --> 00:07:36,670
what we've got in here.

170
00:07:36,670 --> 00:07:38,835
So writing a CSV just means

171
00:07:38,835 --> 00:07:40,990
joining the constituent values

172
00:07:40,990 --> 00:07:42,750
you want to write with a comma.

173
00:07:43,590 --> 00:07:45,730
And that's pretty straightforward.

174
00:07:45,730 --> 00:07:47,380
And by the way just for context,

175
00:07:47,380 --> 00:07:49,080
the way you do that,

176
00:07:49,080 --> 00:07:51,880
here's a sample csv value,

177
00:07:51,880 --> 00:07:54,950
is you do comma dot join

178
00:07:55,810 --> 00:07:57,620
and in here you put a list of values

179
00:07:57,620 --> 00:08:02,620
you wanna join like rolf, w5, MIT, computer science.

180
00:08:05,720 --> 00:08:08,260
And this is how you would join a list

181
00:08:08,260 --> 00:08:10,320
of values into a CSV.

182
00:08:12,250 --> 00:08:13,750
Down here, see.

183
00:08:13,750 --> 00:08:15,540
This is what this prints out.

184
00:08:15,540 --> 00:08:16,620
I just wanted to give you this info

185
00:08:16,620 --> 00:08:18,500
just in case you want to store some

186
00:08:18,500 --> 00:08:21,166
values in a CSV using the syntax

187
00:08:21,166 --> 00:08:23,930
string dot join is gonna join every

188
00:08:23,930 --> 00:08:26,150
element of this list to each other

189
00:08:26,150 --> 00:08:31,150
using this character here as the joining character.

190
00:08:31,640 --> 00:08:33,980
If you want to use a colon instead

191
00:08:33,980 --> 00:08:35,230
you can do that of course.

192
00:08:35,230 --> 00:08:37,914
Then your string would just look like this.

193
00:08:37,914 --> 00:08:38,950
It would look like the various constituent

194
00:08:38,950 --> 00:08:41,030
values but joined by colons.

195
00:08:41,030 --> 00:08:42,600
You can use any character you want

196
00:08:42,600 --> 00:08:43,880
as long as it's not a character that's

197
00:08:43,880 --> 00:08:46,250
gonna appear inside the data.

198
00:08:46,250 --> 00:08:47,980
For example, if you use the space

199
00:08:47,980 --> 00:08:49,270
to join it, you'd have a problem

200
00:08:49,270 --> 00:08:51,350
because one of your values has a space,

201
00:08:51,350 --> 00:08:55,210
and then of course you're gonna have multiple

202
00:08:55,210 --> 00:08:56,700
values, you're gonna have five values

203
00:08:56,700 --> 00:09:00,160
instead of four when push comes to shove.

204
00:09:00,160 --> 00:09:00,993
See.

205
00:09:00,993 --> 00:09:02,240
Now you've got a space here, space here,

206
00:09:02,240 --> 00:09:04,430
space here, and a space here,

207
00:09:04,430 --> 00:09:06,980
even though this should be one single value.

208
00:09:06,980 --> 00:09:08,820
That's why you have to use a value here

209
00:09:08,820 --> 00:09:12,060
that won't appear in any of the strings.

210
00:09:12,060 --> 00:09:14,670
A comma is normally a good choice, so is a colon,

211
00:09:14,670 --> 00:09:16,020
so is a hash symbol.

212
00:09:16,020 --> 00:09:17,980
These things normally don't appear.

213
00:09:17,980 --> 00:09:19,770
When you are then reading the data,

214
00:09:19,770 --> 00:09:21,150
instead of splitting by the comma,

215
00:09:21,150 --> 00:09:23,800
you can just split by the hash symbol,

216
00:09:23,800 --> 00:09:24,960
and that's the same thing.

217
00:09:24,960 --> 00:09:26,540
It stops being a CSV file.

218
00:09:26,540 --> 00:09:28,920
Now it's, instead of a comma-separated value file,

219
00:09:28,920 --> 00:09:30,950
now it's a hash-separated value file.

220
00:09:30,950 --> 00:09:31,783
Doesn't matter.

221
00:09:31,783 --> 00:09:32,780
Same sort of thing.

222
00:09:34,000 --> 00:09:36,670
Okay, that is all I wanted to say in this video.

223
00:09:36,670 --> 00:09:39,080
Thanks for watching, and I'll see you on the next one.

