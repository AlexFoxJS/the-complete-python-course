1
00:00:00,090 --> 00:00:01,450
Jose: Ol e bem vindo de volta.

2
00:00:01,450 --> 00:00:04,340
Neste vdeo, vamos falar sobre o yapf.

3
00:00:04,340 --> 00:00:07,910
O Yapf  um formatador Python,

4
00:00:07,910 --> 00:00:12,910
na verdade significa Yet Another Python Formatter e 

5
00:00:13,410 --> 00:00:16,310
usado para coisas que um

6
00:00:16,310 --> 00:00:20,490
linter no detecta, mas que ainda so importantes.

7
00:00:20,490 --> 00:00:24,140
Por exemplo, voc tem aqui alguns cdigos que eu escrevi.

8
00:00:24,140 --> 00:00:27,710
E se voc estiver desenvolvendo em Python por um tempo, voc

9
00:00:27,710 --> 00:00:30,483
pode ver algumas coisas que so um pouco estranhas.

10
00:00:31,320 --> 00:00:34,200
Por exemplo, voc tem uma lista aqui, isso  bom, voc

11
00:00:34,200 --> 00:00:36,550
tem dois elementos e, em seguida, voc tem outro

12
00:00:36,550 --> 00:00:39,110
elemento e uma nova linha que talvez esteja bem.

13
00:00:39,110 --> 00:00:40,510
Ento voc tem um

14
00:00:40,510 --> 00:00:45,260
elemento em uma nova linha, mas  menos recuado que o elemento anterior.

15
00:00:45,260 --> 00:00:48,530
Voc tem quatro voltas aqui que tem dois pontos neste

16
00:00:48,530 --> 00:00:51,620
momento, mas ento o corpo est na mesma linha.

17
00:00:51,620 --> 00:00:54,653
Est tudo bem em Python,  um pouco estranho.

18
00:00:55,540 --> 00:00:58,503
Ento voc tem uma declarao impressa, isto , terminamos aqui.

19
00:00:58,503 --> 00:01:03,120
Mas, ele est usando aspas simples e est escapando de outra

20
00:01:03,120 --> 00:01:04,960
aspa simples dentro dela.

21
00:01:04,960 --> 00:01:06,670
Provavelmente seria

22
00:01:06,670 --> 00:01:09,953
melhor usar aspas duplas aqui.

23
00:01:11,090 --> 00:01:15,100
Mas, ei, est tudo bem, este  o cdigo Python que realmente funciona,

24
00:01:15,100 --> 00:01:16,723
voc sabe, ns podemos rod-lo.

25
00:01:17,660 --> 00:01:20,790
Executar app py, voc pode ver que as coisas foram impressas.

26
00:01:20,790 --> 00:01:24,660
Ento, tudo bem, o linter no se queixaria necessariamente, apesar de

27
00:01:24,660 --> 00:01:27,350
reclamar sobre a seqncia de documentos perdidos.

28
00:01:27,350 --> 00:01:29,600
Eles sempre reclamam disso.

29
00:01:29,600 --> 00:01:32,113
Mas e o formato, certo?

30
00:01:33,150 --> 00:01:35,990
Bem, o formato tambm  importante.

31
00:01:35,990 --> 00:01:38,930
Voc quer que todo o cdigo dentro de

32
00:01:38,930 --> 00:01:41,110
um projeto tenha um formato consistente.

33
00:01:41,110 --> 00:01:44,040
A razo para isso  que,  medida que voc vai de

34
00:01:44,040 --> 00:01:45,610
um arquivo para outro, parece o mesmo.

35
00:01:45,610 --> 00:01:49,210
Voc no est encontrando nenhuma experincia chocante que seja um

36
00:01:49,210 --> 00:01:53,520
pouco estranha, e tambm para que todos que trabalham no projeto,

37
00:01:53,520 --> 00:01:56,780
se voc estiver trabalhando com mais pessoas, tenham os

38
00:01:56,780 --> 00:02:00,610
mesmos padres de como um bom estilo  ou qual

39
00:02:00,610 --> 00:02:02,660
 o projeto de estilo.

40
00:02:02,660 --> 00:02:06,410
Dessa forma, voc no vai, de certa forma, ir de um

41
00:02:06,410 --> 00:02:08,930
arquivo para outro e saber quem o

42
00:02:08,930 --> 00:02:10,990
escreveu, apenas pelo aspecto do cdigo.

43
00:02:10,990 --> 00:02:13,260
Todos devem ter um estilo consistente

44
00:02:13,260 --> 00:02:16,360
para que a base de cdigo seja a

45
00:02:16,360 --> 00:02:18,240
mesma para todos e no

46
00:02:18,240 --> 00:02:21,400
parea, alguns arquivos no parecem errados para algumas pessoas.

47
00:02:21,400 --> 00:02:23,340
Para isso, voc tem os formatadores.

48
00:02:23,340 --> 00:02:26,290
Os formatadores que voc pode, tipo, personaliz-los e dizer-lhes

49
00:02:26,290 --> 00:02:29,580
que estilo voc quer e, em seguida, tudo o que

50
00:02:29,580 --> 00:02:33,570
voc faz  executar seus arquivos atravs do formatador e ele ir

51
00:02:33,570 --> 00:02:36,790
alterar os arquivos de modo que eles ainda so cdigo

52
00:02:36,790 --> 00:02:40,970
Python vlido, mas reorganizar o elementos ao redor para combinar com um estilo

53
00:02:40,970 --> 00:02:42,943
que todos da sua equipe gostem.

54
00:02:44,290 --> 00:02:47,180
Ento, se voltarmos ao terminal, o que

55
00:02:47,180 --> 00:02:48,760
voc vai fazer ,

56
00:02:48,760 --> 00:02:53,340
mais uma vez, fazer o ptp3. 6 ou ptp3 dependendo de

57
00:02:53,340 --> 00:02:55,700
quantas verses do Python voc instalou.

58
00:02:55,700 --> 00:02:59,420
Instal yapf, ainda outro formatador python.

59
00:02:59,420 --> 00:03:01,450
Voc vai instalar isso e no meu

60
00:03:01,450 --> 00:03:03,960
caso, ele j est instalado, possivelmente foi instalado em

61
00:03:03,960 --> 00:03:06,730
uma verso diferente do Python e ento tudo que

62
00:03:06,730 --> 00:03:10,270
voc precisa fazer  executar o yapf e ver se algo acontece.

63
00:03:10,270 --> 00:03:13,080
O que vai acontecer normalmente com o yapf  que ele simplesmente ir travar.

64
00:03:13,080 --> 00:03:18,020
O que no  uma maneira muito legal de executar um programa,

65
00:03:18,020 --> 00:03:22,510
mas porque o yapf precisa de um arquivo para formatar.

66
00:03:22,510 --> 00:03:25,230
Se voc no der, eu no tenho muita certeza

67
00:03:25,230 --> 00:03:28,050
do que est fazendo, mas parece que est desligado.

68
00:03:28,050 --> 00:03:31,010
Ento, se isso acontecer, basta pressionar control e C

69
00:03:31,010 --> 00:03:33,090
e isso terminar o programa e,

70
00:03:33,090 --> 00:03:35,010
em seguida, voc poder execut-lo novamente

71
00:03:35,010 --> 00:03:40,010
e fornecer o arquivo que deseja formatar e, quando executado, ele fornecer o novo arquivo.

72
00:03:41,060 --> 00:03:45,100
Ento  assim que o arquivo deve ficar de acordo com o yapf.

73
00:03:46,168 --> 00:03:48,660
Como voc pode ver, todos os elementos esto em uma linha e

74
00:03:48,660 --> 00:03:50,630
voc tem uma nova linha aps o loop de quatro.

75
00:03:50,630 --> 00:03:54,040
Observe que o yapf no alterou as aspas simples

76
00:03:54,040 --> 00:03:56,740
para aspas duplas, apenas porque ele possui

77
00:03:56,740 --> 00:03:58,560
aspas internas de escape.

78
00:03:58,560 --> 00:04:00,830
Ento yapf no se importou com isso, e voc sabe

79
00:04:00,830 --> 00:04:02,270
que eu posso ficar atrs disso.

80
00:04:02,270 --> 00:04:06,120
Eu acho que est tudo bem, mas existem outros formatadores

81
00:04:06,120 --> 00:04:07,313
que mudariam isso.

82
00:04:08,560 --> 00:04:13,560
Ento, se voc gosta disso, ento voc pode apenas fazer yapf - help e ele

83
00:04:13,590 --> 00:04:15,520
ir dizer-lhe as diferentes opes que

84
00:04:15,520 --> 00:04:17,020
voc pode dar yapf.

85
00:04:17,020 --> 00:04:22,020
Ento voc pode usar -h ou --help para trazer esta mensagem de ajuda para cima.

86
00:04:23,330 --> 00:04:26,960
-: v ou --version para ver qual verso do yapf voc tem.

87
00:04:26,960 --> 00:04:30,280
Ento voc tem -d ou --dif, qualquer uma dessas duas

88
00:04:30,280 --> 00:04:33,210
opes  vlida para imprimir a diferena entre o

89
00:04:33,210 --> 00:04:36,320
arquivo local e o arquivo que o yapf est criando

90
00:04:36,320 --> 00:04:40,370
e voc tem outro recursivo no lugar e assim por diante .

91
00:04:40,370 --> 00:04:43,480
Realmente o que nos interessa  o lugar.

92
00:04:43,480 --> 00:04:46,000
Isso vai fazer alteraes no arquivo.

93
00:04:46,000 --> 00:04:51,000
Ento, se fizermos app yapf-I. py, nada parece acontecer.

94
00:04:51,350 --> 00:04:53,490
Quando voltamos ao pycharm, voc pode

95
00:04:53,490 --> 00:04:56,000
ver que o arquivo foi alterado.

96
00:04:56,000 --> 00:04:59,743
Agora temos tudo em uma linha e isso  em duas linhas.

97
00:05:00,680 --> 00:05:03,330
Se voc decidir usar o pycharm, o pycharm vem

98
00:05:03,330 --> 00:05:05,483
com o seu prprio formatador, ento se

99
00:05:06,430 --> 00:05:09,380
fizermos isso, voc ver que o pycharm realmente nos diz

100
00:05:09,380 --> 00:05:12,120
que voc est fazendo algo um pouco estranho aqui.

101
00:05:12,120 --> 00:05:15,483
Linha de continuao PEP 8 sob recuo para recuo visual.

102
00:05:16,317 --> 00:05:20,130
Voc acha que recuo visual significa que este no  um recuo

103
00:05:20,130 --> 00:05:23,110
necessrio em Python, apenas uma coisa visual e diz a

104
00:05:23,110 --> 00:05:26,630
voc de acordo com o PEP 8, que  o tipo

105
00:05:26,630 --> 00:05:30,720
de guia de estilo para Python, isso  uma coisa estranha de se fazer.

106
00:05:30,720 --> 00:05:32,420
Ele tambm informa aqui vrias

107
00:05:32,420 --> 00:05:34,310
instrues PEP 8 em uma linha.

108
00:05:34,310 --> 00:05:36,410
Portanto, os quatro so uma declarao que imprime outra

109
00:05:36,410 --> 00:05:38,680
declarao que diz que voc no deve fazer isso.

110
00:05:38,680 --> 00:05:40,840
E tambm, a propsito, voc pode colocar um

111
00:05:40,840 --> 00:05:43,760
ponto e vrgula e colocar mais declaraes l se voc

112
00:05:43,760 --> 00:05:45,592
quiser, ele vai dizer-lhe novamente isso no

113
00:05:45,592 --> 00:05:47,383
 algo que voc quer fazer.

114
00:05:47,383 --> 00:05:49,550
Isso no  algo que todas as pessoas sabem sobre

115
00:05:49,550 --> 00:05:51,330
o Python, voc pode usar ponto e vrgula

116
00:05:51,330 --> 00:05:52,410
no Python, assim como voc

117
00:05:52,410 --> 00:05:55,320
pode em Java e JavaScript para separar vrias instrues em uma linha, mas

118
00:05:55,320 --> 00:05:56,500
 um pouco estranho.

119
00:05:56,500 --> 00:05:59,060
O que voc pode fazer no pycharm

120
00:05:59,060 --> 00:06:00,610
 que voc pode

121
00:06:00,610 --> 00:06:04,580
selecionar tudo e ento voc pode ir para o cdigo e

122
00:06:04,580 --> 00:06:07,330
voc pode reformatar o cdigo e format-lo se puder.

123
00:06:07,330 --> 00:06:11,700
Ento, mais uma vez, isso reformata o cdigo e

124
00:06:11,700 --> 00:06:14,650
isso far o que for possvel.

125
00:06:14,650 --> 00:06:15,880
No tenho certeza do que

126
00:06:15,880 --> 00:06:17,330
as linhas lquidas alteradas faro, nada.

127
00:06:17,330 --> 00:06:21,160
Ento voc pode ver que isso no resolveu bem

128
00:06:21,160 --> 00:06:23,050
esse problema e isso

129
00:06:23,050 --> 00:06:27,610
porque, dependendo do formatador, algumas coisas podem ser consertadas, caso

130
00:06:27,610 --> 00:06:31,130
voc faa isso praticamente qualquer formatador lhe dir.

131
00:06:31,130 --> 00:06:32,120
Voc est definitivamente fazendo

132
00:06:32,120 --> 00:06:33,750
algo que no quer fazer l.

133
00:06:33,750 --> 00:06:37,380
Mas se voc fizer isso, em alguns casos, voc pode querer fazer isso.

134
00:06:37,380 --> 00:06:39,780
Neste caso, o formatador do

135
00:06:39,780 --> 00:06:43,360
pycharm no muda para voc, yapf faz.

136
00:06:43,360 --> 00:06:46,430
Ento, isso  apenas uma diferena entre os formatadores

137
00:06:46,430 --> 00:06:48,840
e existem maneiras de personalizar os formatadores.

138
00:06:48,840 --> 00:06:52,130
Yapf pode ser personalizado, no tenho certeza se o pycharm

139
00:06:52,130 --> 00:06:54,030
pode ser personalizado tambm, na verdade.

140
00:06:54,030 --> 00:06:56,610
Para fazer isso, se voc quiser.

141
00:06:56,610 --> 00:06:58,810
Ns no vamos entrar nisso nesse curso, no

142
00:06:58,810 --> 00:07:01,780
entanto, isso  algo para voc investigar se voc quiser

143
00:07:01,780 --> 00:07:05,520
personaliz-lo mais de acordo com suas necessidades, mas  claro, as pequenas linhas

144
00:07:05,520 --> 00:07:08,080
cinzas no pycharm ainda lhe dizem onde voc est

145
00:07:08,080 --> 00:07:10,020
fazendo algo um pouco estranho e nesse

146
00:07:10,020 --> 00:07:12,203
caso voc pode apenas corrigi-lo manualmente, se quiser.

147
00:07:13,070 --> 00:07:15,120
Ento  isso,  assim que voc

148
00:07:15,120 --> 00:07:17,890
usa o formatador de pycharm e tambm o yapf.

149
00:07:17,890 --> 00:07:19,970
Vou colocar outro link para

150
00:07:19,970 --> 00:07:22,570
outro formatador que est chegando e

151
00:07:22,570 --> 00:07:27,360
vindo chamado preto, que  mais rigoroso, se voc quiser.

152
00:07:27,360 --> 00:07:28,840
Vai mudar mais coisas,

153
00:07:28,840 --> 00:07:31,760
mas supostamente para uma experincia final mais agradvel.

154
00:07:31,760 --> 00:07:33,850
Ento eu vou colocar um link sobre isso na palestra

155
00:07:33,850 --> 00:07:35,933
para que voc possa dar uma chance se quiser.

156
00:07:36,770 --> 00:07:37,880
 isso para este vdeo, no entanto.

157
00:07:37,880 --> 00:07:40,523
Espero que voc tenha gostado, e eu vou te ver no prximo.

