1
00:00:00,090 --> 00:00:01,450
Jos: Hola y bienvenido de nuevo.

2
00:00:01,450 --> 00:00:04,340
En este video, vamos a hablar sobre yapf.

3
00:00:04,340 --> 00:00:07,910
Yapf es un formateador de Python, de

4
00:00:07,910 --> 00:00:12,910
hecho representa Yet Another Another Python Formatter y se usa

5
00:00:13,410 --> 00:00:16,310
para cosas que un linter no

6
00:00:16,310 --> 00:00:20,490
captara realmente, pero que an son importantes.

7
00:00:20,490 --> 00:00:24,140
Por ejemplo, aqu tienes un cdigo que he escrito.

8
00:00:24,140 --> 00:00:27,710
Y si has estado desarrollando en Python por un tiempo, es

9
00:00:27,710 --> 00:00:30,483
posible que veas cosas que son un poco raras.

10
00:00:31,320 --> 00:00:34,200
Por ejemplo, tienes una lista aqu, est bien, tienes

11
00:00:34,200 --> 00:00:36,550
dos elementos y luego, tienes otro elemento

12
00:00:36,550 --> 00:00:39,110
y una nueva lnea que quizs est bien.

13
00:00:39,110 --> 00:00:40,510
Luego tienes un elemento

14
00:00:40,510 --> 00:00:45,260
en una nueva lnea pero est menos sangrado que el elemento anterior.

15
00:00:45,260 --> 00:00:48,530
Aqu tienes cuatro bucles que tienen dos puntos, pero

16
00:00:48,530 --> 00:00:51,620
luego el cuerpo est en la misma lnea.

17
00:00:51,620 --> 00:00:54,653
Esto est bien en Python, es un poco extrao.

18
00:00:55,540 --> 00:00:58,503
Entonces tienes una declaracin impresa, esto es, hemos terminado aqu.

19
00:00:58,503 --> 00:01:03,120
Pero, est usando comillas simples y est escapando otra

20
00:01:03,120 --> 00:01:04,960
comilla dentro de ella.

21
00:01:04,960 --> 00:01:06,670
Probablemente sea

22
00:01:06,670 --> 00:01:09,953
mejor usar aqu comillas dobles.

23
00:01:11,090 --> 00:01:15,100
Pero, oye, esto est bien, este es el cdigo de Python que realmente

24
00:01:15,100 --> 00:01:16,723
funciona, ya sabes, podemos ejecutarlo.

25
00:01:17,660 --> 00:01:20,790
Ejecute la aplicacin py, puede ver que las cosas se han impreso.

26
00:01:20,790 --> 00:01:24,660
As que todo est bien, el linter no necesariamente se quejara, aunque,

27
00:01:24,660 --> 00:01:27,350
se quejara de la cadena de documentacin faltante.

28
00:01:27,350 --> 00:01:29,600
Ellos siempre se quejan de eso.

29
00:01:29,600 --> 00:01:32,113
Pero, qu pasa con el formato, verdad?

30
00:01:33,150 --> 00:01:35,990
Bueno, el formato tambin es importante.

31
00:01:35,990 --> 00:01:38,930
Desea que todo el cdigo dentro de

32
00:01:38,930 --> 00:01:41,110
un proyecto tenga un formato coherente.

33
00:01:41,110 --> 00:01:44,040
El motivo es que, al pasar de un archivo a

34
00:01:44,040 --> 00:01:45,610
otro, tiene el mismo aspecto.

35
00:01:45,610 --> 00:01:49,210
No encontrars experiencias discordantes que sean un tanto extraas,

36
00:01:49,210 --> 00:01:53,520
y tambin para que todos los que trabajen en el

37
00:01:53,520 --> 00:01:56,780
proyecto, si trabajas con ms personas, tengan los

38
00:01:56,780 --> 00:02:00,610
mismos estndares de lo que es un buen estilo

39
00:02:00,610 --> 00:02:02,660
o el proyecto de estilo.

40
00:02:02,660 --> 00:02:06,410
De esa forma no vas a ir, de alguna manera, de un archivo

41
00:02:06,410 --> 00:02:08,930
a otro y ser capaz de saber quin lo

42
00:02:08,930 --> 00:02:10,990
escribi, solo por el aspecto del cdigo.

43
00:02:10,990 --> 00:02:13,260
Todos deberan tener un estilo consistente para

44
00:02:13,260 --> 00:02:16,360
que la base de cdigos sea la misma para

45
00:02:16,360 --> 00:02:18,240
todos y no se siente,

46
00:02:18,240 --> 00:02:21,400
algunos archivos no se sienten mal para algunas personas.

47
00:02:21,400 --> 00:02:23,340
Para eso, tienes los formateadores.

48
00:02:23,340 --> 00:02:26,290
Los formateadores pueden, ms o menos, personalizarlos y decirles

49
00:02:26,290 --> 00:02:29,580
qu estilo desea y luego todo lo que hacen es

50
00:02:29,580 --> 00:02:33,570
ejecutar sus archivos a travs del formateador y cambiar los archivos de

51
00:02:33,570 --> 00:02:36,790
manera que sigan siendo cdigos Python vlidos, pero ms o

52
00:02:36,790 --> 00:02:40,970
menos, reorganice el elementos alrededor para que coincida con un estilo que le

53
00:02:40,970 --> 00:02:42,943
gusta a todos en su equipo.

54
00:02:44,290 --> 00:02:47,180
Entonces, si volvemos a la terminal, lo que vas

55
00:02:47,180 --> 00:02:48,760
a hacer es, una vez

56
00:02:48,760 --> 00:02:53,340
ms, que vas a hacer ptp3. 6 o ptp3 dependiendo de

57
00:02:53,340 --> 00:02:55,700
cuntas versiones de Python hayas instalado.

58
00:02:55,700 --> 00:02:59,420
Instal yapf, otro formateador de python.

59
00:02:59,420 --> 00:03:01,450
Vas a instalar eso y en mi

60
00:03:01,450 --> 00:03:03,960
caso, ya est instalado, posiblemente se instal en

61
00:03:03,960 --> 00:03:06,730
una versin de Python diferente y luego todo lo

62
00:03:06,730 --> 00:03:10,270
que tienes que hacer es ejecutar yapf y ver si sucede algo.

63
00:03:10,270 --> 00:03:13,080
Lo que suceder normalmente con yapf es que simplemente se bloquear.

64
00:03:13,080 --> 00:03:18,020
Lo cual no es una forma muy agradable de ejecutar

65
00:03:18,020 --> 00:03:22,510
un programa, sino porque yapf necesita un archivo para formatear.

66
00:03:22,510 --> 00:03:25,230
Si no lo das, no estoy seguro

67
00:03:25,230 --> 00:03:28,050
de qu est haciendo, pero parece que cuelga.

68
00:03:28,050 --> 00:03:31,010
Entonces, si eso sucede, simplemente presione el control

69
00:03:31,010 --> 00:03:33,090
y C terminar el programa y

70
00:03:33,090 --> 00:03:35,010
luego podr ejecutarlo nuevamente y

71
00:03:35,010 --> 00:03:40,010
darle el archivo que desea formatear y cuando lo ejecute, le dar el nuevo archivo.

72
00:03:41,060 --> 00:03:45,100
As que este es el aspecto que debera tener el archivo segn yapf.

73
00:03:46,168 --> 00:03:48,660
Como puede ver, todos los elementos estn en una lnea y usted

74
00:03:48,660 --> 00:03:50,630
tiene una nueva lnea despus de los cuatro ciclos.

75
00:03:50,630 --> 00:03:54,040
Tenga en cuenta que yapf no ha cambiado las

76
00:03:54,040 --> 00:03:56,740
comillas simples para comillas dobles, simplemente porque

77
00:03:56,740 --> 00:03:58,560
tiene unas comillas internas escapadas.

78
00:03:58,560 --> 00:04:00,830
As que yapf realmente no se preocup por eso, y

79
00:04:00,830 --> 00:04:02,270
sabes que puedo ir detrs de eso.

80
00:04:02,270 --> 00:04:06,120
Creo que esto est bien, pero hay otros formateadores

81
00:04:06,120 --> 00:04:07,313
que cambiaran eso.

82
00:04:08,560 --> 00:04:13,560
Entonces, si te gusta esto, entonces puedes hacer yapf - help y te

83
00:04:13,590 --> 00:04:15,520
dir las diferentes opciones que

84
00:04:15,520 --> 00:04:17,020
puedes dar a yapf.

85
00:04:17,020 --> 00:04:22,020
Entonces puede usar -h o --ayudar para traer este mensaje de ayuda.

86
00:04:23,330 --> 00:04:26,960
-: v o --version para ver qu versin de yapf tienes.

87
00:04:26,960 --> 00:04:30,280
Luego tienes -d o --dif, cualquiera de estas dos

88
00:04:30,280 --> 00:04:33,210
opciones es vlida para imprimir la diferencia entre

89
00:04:33,210 --> 00:04:36,320
tu archivo local y el archivo que crea el

90
00:04:36,320 --> 00:04:40,370
yapf y tienes otro recursivo en su lugar y dems .

91
00:04:40,370 --> 00:04:43,480
Realmente, el que nos interesa est en el lugar.

92
00:04:43,480 --> 00:04:46,000
Esto va a hacer cambios en el archivo.

93
00:04:46,000 --> 00:04:51,000
Entonces, si hacemos la aplicacin yapf-I Py, nada parece suceder.

94
00:04:51,350 --> 00:04:53,490
Cuando regresemos a pycharm, puede

95
00:04:53,490 --> 00:04:56,000
ver que el archivo ha cambiado.

96
00:04:56,000 --> 00:04:59,743
Ahora tenemos todo en una lnea y esto est en dos lneas.

97
00:05:00,680 --> 00:05:03,330
Si decides utilizar pycharm, pycharm viene con su

98
00:05:03,330 --> 00:05:05,483
propio formateador, por lo que si

99
00:05:06,430 --> 00:05:09,380
lo hacemos, vers que pycharm en realidad nos dice

100
00:05:09,380 --> 00:05:12,120
que ests haciendo algo un poco raro aqu.

101
00:05:12,120 --> 00:05:15,483
Lnea de continuacin PEP 8 en sangrado para sangrado visual.

102
00:05:16,317 --> 00:05:20,130
Encuentra que la sangra visual significa que no es una sangra

103
00:05:20,130 --> 00:05:23,110
requerida en Python, solo una cosa visual y le

104
00:05:23,110 --> 00:05:26,630
dice de acuerdo con PEP 8, que es la especie

105
00:05:26,630 --> 00:05:30,720
de gua de estilo para Python, esto es algo extrao de hacer.

106
00:05:30,720 --> 00:05:32,420
Tambin le dice aqu PEP

107
00:05:32,420 --> 00:05:34,310
8 declaraciones mltiples en una lnea.

108
00:05:34,310 --> 00:05:36,410
Entonces, el cuatro es una declaracin que imprime otra

109
00:05:36,410 --> 00:05:38,680
declaracin que le dice que no debe hacer esto.

110
00:05:38,680 --> 00:05:40,840
Y tambin, por cierto, puede poner un

111
00:05:40,840 --> 00:05:43,760
punto y coma y poner ms enunciados all si quiere,

112
00:05:43,760 --> 00:05:45,592
de nuevo le dir que esto

113
00:05:45,592 --> 00:05:47,383
no es algo que quiera hacer.

114
00:05:47,383 --> 00:05:49,550
Esto no es algo que todos conozcan sobre Python,

115
00:05:49,550 --> 00:05:51,330
tambin puedes usar puntos y comas en

116
00:05:51,330 --> 00:05:52,410
Python, al igual que

117
00:05:52,410 --> 00:05:55,320
en Java y JavaScript para separar varias declaraciones en una lnea,

118
00:05:55,320 --> 00:05:56,500
pero es un poco extrao.

119
00:05:56,500 --> 00:05:59,060
Lo que puedes hacer en pycharm, sin

120
00:05:59,060 --> 00:06:00,610
embargo, es que puedes

121
00:06:00,610 --> 00:06:04,580
seleccionar todo y luego puedes ir al cdigo y puedes ir

122
00:06:04,580 --> 00:06:07,330
a reformatear el cdigo y lo formatear si puede.

123
00:06:07,330 --> 00:06:11,700
Entonces, una vez ms ese cdigo de formateo

124
00:06:11,700 --> 00:06:14,650
y eso har lo que pueda.

125
00:06:14,650 --> 00:06:15,880
No estoy seguro de qu va a

126
00:06:15,880 --> 00:06:17,330
hacer la alteracin de las lneas de red, nada.

127
00:06:17,330 --> 00:06:21,160
As que puede ver que no solucion completamente este problema y

128
00:06:21,160 --> 00:06:23,050
eso se debe a que,

129
00:06:23,050 --> 00:06:27,610
dependiendo del formateador, se considerarn algunas cosas que se pueden reparar, ms o

130
00:06:27,610 --> 00:06:31,130
menos, si hace esto, casi cualquier formateador se lo dir.

131
00:06:31,130 --> 00:06:32,120
Definitivamente ests haciendo

132
00:06:32,120 --> 00:06:33,750
algo que no quieres hacer all.

133
00:06:33,750 --> 00:06:37,380
Pero si lo hace, en algunos casos es posible que desee hacer esto.

134
00:06:37,380 --> 00:06:39,780
En este caso, el formateador de

135
00:06:39,780 --> 00:06:43,360
pycharm no lo cambia por ti, yaff lo hace.

136
00:06:43,360 --> 00:06:46,430
Entonces esa es solo una diferencia entre formateadores

137
00:06:46,430 --> 00:06:48,840
y hay formas de personalizar los formateadores.

138
00:06:48,840 --> 00:06:52,130
Yapf se puede personalizar, no estoy seguro si pycharm se

139
00:06:52,130 --> 00:06:54,030
puede personalizar tambin, en realidad.

140
00:06:54,030 --> 00:06:56,610
Para hacer que lo cambie si lo desea.

141
00:06:56,610 --> 00:06:58,810
No vamos a entrar en eso en

142
00:06:58,810 --> 00:07:01,780
este curso, sin embargo, eso es algo que debes investigar

143
00:07:01,780 --> 00:07:05,520
si quieres personalizarlo ms a tus necesidades, pero por supuesto, las pequeas lneas

144
00:07:05,520 --> 00:07:08,080
grises en pycharm todava te dicen dnde ests haciendo

145
00:07:08,080 --> 00:07:10,020
algo un poco extrao y en ese

146
00:07:10,020 --> 00:07:12,203
caso solo puedes arreglarlo manualmente, si quieres.

147
00:07:13,070 --> 00:07:15,120
Entonces eso es todo, as es

148
00:07:15,120 --> 00:07:17,890
como usas el formateador pycharm y tambin yapf.

149
00:07:17,890 --> 00:07:19,970
Voy a poner otro

150
00:07:19,970 --> 00:07:22,570
enlace a otro formateador que

151
00:07:22,570 --> 00:07:27,360
est llamado "negro", que es ms estricto, si lo desea.

152
00:07:27,360 --> 00:07:28,840
Cambiar ms cosas,

153
00:07:28,840 --> 00:07:31,760
pero supuestamente para una mejor experiencia final.

154
00:07:31,760 --> 00:07:33,850
As que pondr un enlace sobre eso en la

155
00:07:33,850 --> 00:07:35,933
conferencia para que pueda probarlo si lo desea.

156
00:07:36,770 --> 00:07:37,880
Eso es todo por este video, sin embargo.

157
00:07:37,880 --> 00:07:40,523
Espero que lo hayas disfrutado, y te ver en el prximo.

