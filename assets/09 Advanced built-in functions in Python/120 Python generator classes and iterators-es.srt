1
00:00:00,000 --> 00:00:01,400
Instructor: Hola, y bienvenido de nuevo.

2
00:00:01,400 --> 00:00:02,770
En este video estamos

3
00:00:02,770 --> 00:00:05,450
hablando de clases de generador e iteradores.

4
00:00:06,960 --> 00:00:09,830
Aqu les mostrar una clase que implementa el

5
00:00:09,830 --> 00:00:13,446
generador de 100 nmeros que hicimos en el ltimo video.

6
00:00:13,446 --> 00:00:17,170
As que lo llamar FirstHundredGenerator.

7
00:00:18,513 --> 00:00:22,340
Como tal, y luego vamos a definir un mtodo init.

8
00:00:23,610 --> 00:00:26,450
Que simplemente va a comenzar el nmero como

9
00:00:27,547 --> 00:00:30,378
cero, y luego vamos a definir un prximo

10
00:00:30,378 --> 00:00:32,770
guin bajo, guin bajo, el siguiente mtodo.

11
00:00:32,770 --> 00:00:36,030
Cuando defines un prximo mtodo en una

12
00:00:36,030 --> 00:00:41,030
clase, cualquier objeto que puedas llamar luego de mi objeto, como ese.

13
00:00:41,320 --> 00:00:43,260
As que esto es otra vez, un

14
00:00:43,260 --> 00:00:45,380
mtodo dunder que te permite llamar a continuacin.

15
00:00:45,380 --> 00:00:47,320
Tambin le dice a Python algo bastante importante.

16
00:00:47,320 --> 00:00:49,800
Vamos a ver eso en solo un momento.

17
00:00:49,800 --> 00:00:53,270
Entonces, si quisiramos generar 100 nmeros, todo lo que tenemos

18
00:00:54,610 --> 00:00:58,770
que hacer es obtener uno mismo. nmero, devulvalo

19
00:00:58,770 --> 00:01:02,110
e incremntelo en uno.

20
00:01:02,110 --> 00:01:04,880
Entonces, si yo mismo. el nmero es inferior a 100,

21
00:01:04,880 --> 00:01:06,930
no vamos a usar la palabra clave yield

22
00:01:06,930 --> 00:01:09,880
aqu, por cierto, porque no es necesario en un generador de clases.

23
00:01:11,120 --> 00:01:14,280
Lo siento, en una de estas cosas. (Risas) No voy

24
00:01:14,280 --> 00:01:16,970
a decir nada que pueda

25
00:01:16,970 --> 00:01:19,100
malinterpretarse como incorrecto.

26
00:01:20,237 --> 00:01:22,910
Solo para no confundirte.

27
00:01:22,910 --> 00:01:25,540
Lo que hay que hacer es, si el

28
00:01:25,540 --> 00:01:27,110
nmero es inferior a 100,

29
00:01:28,010 --> 00:01:31,980
lo ponemos en una variable, luego incrementamos el nmero en uno, y

30
00:01:33,150 --> 00:01:35,640
luego devolvemos el nmero actual, que era

31
00:01:35,640 --> 00:01:37,410
el valor anterior, por lo

32
00:01:37,410 --> 00:01:38,520
que es cero.

33
00:01:38,520 --> 00:01:42,010
Nos incrementamos a nosotros mismos. nmero por uno, devolvemos cero.

34
00:01:42,010 --> 00:01:42,843
Bueno.

35
00:01:44,340 --> 00:01:46,130
Ahora es importante en

36
00:01:46,130 --> 00:01:47,980
la clase, si queremos

37
00:01:47,980 --> 00:01:49,220
dejar de devolver

38
00:01:50,200 --> 00:01:53,800
nmeros, as, no estamos usando un bucle

39
00:01:53,800 --> 00:01:57,560
aqu para detenernos cuando lleguemos a 100.

40
00:01:57,560 --> 00:02:00,950
Entonces, cuando lleguemos a 100 tenemos que generar

41
00:02:00,950 --> 00:02:04,400
un error especial que se llama Stop Iteration.

42
00:02:04,400 --> 00:02:06,720
El error Stop Iteration le dice

43
00:02:06,720 --> 00:02:10,130
a Python que hemos llegado al final de este generador.

44
00:02:11,540 --> 00:02:15,610
Estoy diciendo generador y estoy temblando levemente, um aqu.

45
00:02:15,610 --> 00:02:19,690
Como esto es esencialmente un generador, empiezas en

46
00:02:19,690 --> 00:02:21,020
cero, luego decides

47
00:02:22,500 --> 00:02:27,080
si quieres devolver un nmero nuevo, obtienes ese nmero y

48
00:02:28,620 --> 00:02:31,060
luego lo devuelves, y luego

49
00:02:31,060 --> 00:02:33,070
el programa se detiene.

50
00:02:33,070 --> 00:02:37,080
Pero tu objeto permanece y se recuerda a ti mismo. nmero.

51
00:02:37,080 --> 00:02:41,120
Entonces, si tenemos mi gen, y ese es nuestro primer

52
00:02:41,120 --> 00:02:42,610
generador de cien all.

53
00:02:42,610 --> 00:02:45,477
Mi gen. el nmero es

54
00:02:45,477 --> 00:02:47,590
por supuesto cero al comienzo.

55
00:02:48,450 --> 00:02:49,283
Derecha?

56
00:02:50,559 --> 00:02:52,230
Vamos a mostrarte eso.

57
00:02:52,230 --> 00:02:54,760
Mi gen el nmero cero al comienzo.

58
00:02:54,760 --> 00:02:58,430
Si haces mi gen. siguiente como tal,

59
00:02:58,430 --> 00:02:59,650
y luego

60
00:02:59,650 --> 00:03:02,120
imprimir mi gen. nmero de nuevo,

61
00:03:04,260 --> 00:03:05,190
obtienes uno.

62
00:03:05,190 --> 00:03:06,220
Eso tiene sentido, verdad?

63
00:03:06,220 --> 00:03:09,010
Porque el siguiente mtodo aqu es verificar si el nmero

64
00:03:09,010 --> 00:03:10,240
es menor que 100,

65
00:03:10,240 --> 00:03:11,640
y luego incrementarlo en uno.

66
00:03:13,530 --> 00:03:15,150
Entonces todos estos tienen sentido.

67
00:03:15,150 --> 00:03:17,810
Ahora, para hacer que se comporte como

68
00:03:18,880 --> 00:03:22,410
un generador, simplemente decimos el prximo de mi generacin,

69
00:03:22,410 --> 00:03:23,243
como tal.

70
00:03:24,270 --> 00:03:27,120
Entonces podemos ejecutar esto de nuevo, y lo mismo sale a la luz.

71
00:03:28,560 --> 00:03:30,770
Por supuesto, el siguiente de mi

72
00:03:30,770 --> 00:03:35,740
generacin est devolviendo el nmero que tena antes de que lo incrementemos.

73
00:03:35,740 --> 00:03:38,980
Entonces, en lugar de imprimir mi gen. nmero aqu, podemos imprimir al

74
00:03:40,060 --> 00:03:43,150
lado de mi gen, y aqu tambin podemos imprimir

75
00:03:43,150 --> 00:03:45,630
al lado de mi gen, y obtendremos

76
00:03:45,630 --> 00:03:47,660
el mismo resultado, cero y uno.

77
00:03:47,660 --> 00:03:49,970
La primera vez que llamamos a continuacin, obtenemos el valor

78
00:03:49,970 --> 00:03:53,740
actual, que es cero, pero nos hemos incrementado. nmero por uno.

79
00:03:53,740 --> 00:03:55,340
La prxima vez que llamemos

80
00:03:55,340 --> 00:03:57,830
a continuacin, de nuevo, incrementos de ese nmero

81
00:03:57,830 --> 00:04:00,500
en uno, pero devolveramos el valor anterior, que es uno.

82
00:04:01,470 --> 00:04:03,730
Entonces ahora esto se comporta exactamente como un

83
00:04:03,730 --> 00:04:06,100
generador, y de hecho, este es un generador.

84
00:04:06,100 --> 00:04:09,320
No est almacenando todos los valores hasta 100 en una lista.

85
00:04:09,320 --> 00:04:10,990
Te los est dando uno por uno.

86
00:04:10,990 --> 00:04:14,520
Se est generando a medida que llamas a la siguiente funcin.

87
00:04:15,390 --> 00:04:16,870
Lo siento, el siguiente mtodo.

88
00:04:16,870 --> 00:04:19,820
Por cierto, dunder next es nuevo en Python tres.

89
00:04:19,820 --> 00:04:21,070
Entonces, si usa Python

90
00:04:21,070 --> 00:04:24,410
dos, deber definir el siguiente sin el guin bajo.

91
00:04:24,410 --> 00:04:25,690
Eso es solo para Python dos.

92
00:04:25,690 --> 00:04:28,760
Si est usando Python, use tres dunder a continuacin.

93
00:04:30,142 --> 00:04:30,975
De acuerdo,

94
00:04:31,820 --> 00:04:35,620
todos los objetos que tienen este prximo mtodo dunder

95
00:04:35,620 --> 00:04:37,240
se llaman iteradores.

96
00:04:39,030 --> 00:04:41,740
Todos los generadores, como este, son iteradores,

97
00:04:41,740 --> 00:04:43,500
pero no al revs.

98
00:04:43,500 --> 00:04:46,941
Entonces puedes tener iteradores que no generen nmeros.

99
00:04:46,941 --> 00:04:50,180
Por ejemplo, si modifica su primer generador

100
00:04:50,180 --> 00:04:53,860
de nmeros para devolver parte de una lista

101
00:04:53,860 --> 00:04:57,490
como, primero cientos iteradores, no generadores, puede tener

102
00:04:57,490 --> 00:05:00,300
un mtodo init aqu, que dice

103
00:05:00,300 --> 00:05:02,470
auto. nmeros es, uno,

104
00:05:04,450 --> 00:05:06,090
dos, tres, cuatro, cinco.

105
00:05:06,090 --> 00:05:08,000
Obviamente no es, no primero

106
00:05:08,000 --> 00:05:11,450
cien, que son los primeros cinco iteradores, yo soy cero.

107
00:05:13,240 --> 00:05:15,160
Entonces ese es el ndice que vas a comenzar a devolver.

108
00:05:15,160 --> 00:05:16,900
Cero, y los nmeros que estamos

109
00:05:16,900 --> 00:05:18,470
devolviendo son del uno al cinco.

110
00:05:18,470 --> 00:05:23,110
Entonces, de nuevo, el siguiente mtodo aqu solo va a decir si

111
00:05:23,110 --> 00:05:26,610
soy menos que yo. nmeros, regresa a

112
00:05:28,160 --> 00:05:30,080
ti mismo. nmeros I.

113
00:05:31,970 --> 00:05:32,803
Derecha?

114
00:05:32,803 --> 00:05:35,490
Else raise stop iteration.

115
00:05:35,490 --> 00:05:37,890
Lo siento, no puedes ver eso bien,

116
00:05:37,890 --> 00:05:38,723
pero ah vamos.

117
00:05:40,190 --> 00:05:42,770
Entonces, todo lo que estamos haciendo aqu es que no estamos generando nada.

118
00:05:42,770 --> 00:05:44,960
Estamos diciendo que si soy menor

119
00:05:44,960 --> 00:05:48,700
que, por cierto, tenemos que hacerlo, por supuesto tenemos que

120
00:05:48,700 --> 00:05:50,140
hacer esto, ms uno

121
00:05:51,180 --> 00:05:52,850
igual, y devolver el actual.

122
00:05:52,850 --> 00:05:54,730
Tenemos que incrementar uno, y tenemos

123
00:05:54,730 --> 00:05:56,930
que incrementar I por uno, por supuesto.

124
00:05:58,090 --> 00:06:00,590
Nuevamente, no estamos generando nuevos nmeros.

125
00:06:01,540 --> 00:06:04,270
Estamos haciendo un seguimiento de I, el ndice en el que

126
00:06:04,270 --> 00:06:06,830
nos encontramos actualmente, debes hacer eso de alguna forma para

127
00:06:06,830 --> 00:06:08,780
que esto sea as. Yo por cierto.

128
00:06:08,780 --> 00:06:11,820
Se puede decir que no he preparado este ejemplo, pero

129
00:06:11,820 --> 00:06:13,230
solo quera mostrarles rpidamente que

130
00:06:13,230 --> 00:06:15,590
no todos los generadores, ni todos los iteradores,

131
00:06:15,590 --> 00:06:16,880
tienen que ser generadores.

132
00:06:16,880 --> 00:06:19,050
En este caso, no est generando los

133
00:06:19,050 --> 00:06:21,085
nmeros, los est devolviendo de una lista.

134
00:06:21,085 --> 00:06:23,600
Entonces, solo un rpido ejemplo all.

135
00:06:23,600 --> 00:06:26,340
Lo tendr en el cdigo de muestra de

136
00:06:26,340 --> 00:06:28,190
la seccin, si recuerdo agregarlo.

137
00:06:28,190 --> 00:06:33,190
Entonces, eso, aqu, lo que hacemos cuando definimos el siguiente mtodo,

138
00:06:33,560 --> 00:06:35,040
es que definimos

139
00:06:35,040 --> 00:06:38,260
un iterador, algo que puedes revisar uno

140
00:06:38,260 --> 00:06:40,938
por uno, llamando a la siguiente funcin.

141
00:06:40,938 --> 00:06:44,000
No necesariamente tiene que generar todos sus nmeros, pero puede hacerlo,

142
00:06:44,000 --> 00:06:46,890
pero nuevamente, tambin puede devolverlos de una lista, o de un

143
00:06:46,890 --> 00:06:48,540
envo, o en cualquier otro lugar.

144
00:06:49,980 --> 00:06:52,620
Entonces, en Python es importante.

145
00:06:52,620 --> 00:06:56,160
Iteradores son aquellos objetos que

146
00:06:56,160 --> 00:06:59,110
tienen un segundo mtodo siguiente.

147
00:06:59,110 --> 00:07:01,530
Puedes llamar a continuacin en ellos.

148
00:07:01,530 --> 00:07:04,400
Tenemos nosotros mismos un iterador,

149
00:07:04,400 --> 00:07:05,750
pero no podemos

150
00:07:05,750 --> 00:07:07,630
hacer por yo en

151
00:07:07,630 --> 00:07:09,020
mi gen, en

152
00:07:09,960 --> 00:07:11,440
mi gen.

153
00:07:14,720 --> 00:07:15,670
No puedes hacer esto.

154
00:07:15,670 --> 00:07:17,220
Djame decirte eso ahora mismo.

155
00:07:18,460 --> 00:07:22,070
Si ejecutamos esto, aparece un error que dice que el

156
00:07:22,070 --> 00:07:24,800
primer objeto generador no es iterable, pero

157
00:07:25,750 --> 00:07:29,930
acabo de decir que es un iterador y es un iterador.

158
00:07:29,930 --> 00:07:31,760
Lo que significa un iterador es

159
00:07:31,760 --> 00:07:33,280
que puede llamar a la

160
00:07:33,280 --> 00:07:35,550
siguiente funcin y le dar el prximo valor.

161
00:07:35,550 --> 00:07:39,600
Pero un iterador y un iterable son cosas diferentes.

162
00:07:39,600 --> 00:07:41,600
Puede iterar sobre un iterable, y el

163
00:07:42,840 --> 00:07:45,820
iterador se usa para obtener el siguiente valor de una

164
00:07:45,820 --> 00:07:47,870
secuencia o de los valores generados.

165
00:07:49,020 --> 00:07:52,160
Entonces, lo que tenemos aqu es

166
00:07:52,160 --> 00:07:54,430
un iterador no iterable.

167
00:07:54,430 --> 00:07:56,200
Vamos a aprender en el

168
00:07:56,200 --> 00:07:57,760
prximo video cmo crear un

169
00:07:57,760 --> 00:07:59,470
iterable, para que podamos recorrerlo,

170
00:07:59,470 --> 00:08:02,490
o hacer cosas como la suma de mi gen,

171
00:08:02,490 --> 00:08:05,800
o ya sabes, lo que sea que quieras hacer.

172
00:08:05,800 --> 00:08:07,230
Lista de mi gen

173
00:08:07,230 --> 00:08:11,600
Estas cosas aqu necesitan un iterable, no un iterador.

174
00:08:11,600 --> 00:08:13,820
As que hagmoslo en el prximo video.

175
00:08:13,820 --> 00:08:14,770
Te ver all.

