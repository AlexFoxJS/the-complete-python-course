1
00:00:00,120 --> 00:00:01,320
Jose: Ol e bem vindo de volta.

2
00:00:01,320 --> 00:00:02,580
Neste vdeo vamos falar

3
00:00:02,580 --> 00:00:05,840
sobre filas e pilhas novamente e tambm vamos introduzir um

4
00:00:05,840 --> 00:00:08,630
novo conceito que  muito popular na programao,

5
00:00:08,630 --> 00:00:11,913
mas s vezes pode causar um pouco de confuso.

6
00:00:13,160 --> 00:00:14,950
Vamos recapitular filas e empilhar primeiro.

7
00:00:14,950 --> 00:00:18,260
Voc se lembra desse diagrama de antes e de como,

8
00:00:18,260 --> 00:00:21,513
em uma fila, voc adiciona novos elementos no final e,

9
00:00:22,380 --> 00:00:23,810
quando remove um elemento,

10
00:00:23,810 --> 00:00:25,930
ele sempre  removido desde o incio.

11
00:00:25,930 --> 00:00:27,530
Esta  apenas uma fila como

12
00:00:27,530 --> 00:00:29,130
uma fila para o supermercado, por exemplo.

13
00:00:30,150 --> 00:00:33,070
E uma fila em python, podemos implementar usando listas,

14
00:00:33,070 --> 00:00:36,840
ou usando o mdulo de convs, ou o mdulo de fila,

15
00:00:36,840 --> 00:00:37,963
como vimos antes.

16
00:00:38,950 --> 00:00:43,910
Aqui est um exemplo simples de implementao de uma fila usando listas.

17
00:00:43,910 --> 00:00:45,570
Aqui temos nossa fila de aulas.

18
00:00:45,570 --> 00:00:46,810
Quando voc cria um

19
00:00:46,810 --> 00:00:49,870
novo objeto, ele se define. itens para ser uma lista vazia

20
00:00:49,870 --> 00:00:51,733
e, em seguida, voc pode empurrar e pop.

21
00:00:52,700 --> 00:00:56,300
Push e pop so dois nomes que so freqentemente

22
00:00:56,300 --> 00:00:59,770
usados no contexto de filas e pilhas, mas no

23
00:00:59,770 --> 00:01:03,257
sei ao certo por que esses nomes so usados

24
00:01:03,257 --> 00:01:06,940
exatamente, mas voc pode pensar nisso como adicionar um novo

25
00:01:06,940 --> 00:01:08,790
elemento e remover um elemento.

26
00:01:08,790 --> 00:01:10,270
E dependendo se voc est

27
00:01:10,270 --> 00:01:13,510
trabalhando com uma fila ou uma pilha, a adio ou a

28
00:01:13,510 --> 00:01:15,360
remoo acontecer em um lugar diferente.

29
00:01:16,470 --> 00:01:20,300
Aqui quando ns empurramos em uma fila, ns acrescentamos um item,

30
00:01:20,300 --> 00:01:23,200
ento adicionamos o novo item no final da fila.

31
00:01:23,200 --> 00:01:26,170
E quando ns pop, o que fazemos

32
00:01:26,170 --> 00:01:28,230
 criar uma varivel temporria

33
00:01:28,230 --> 00:01:31,130
chamada head, e configur-lo para ser auto-itens zero.

34
00:01:31,130 --> 00:01:34,340
E ento nos estabelecemos. itens para ser auto. itens a

35
00:01:34,340 --> 00:01:35,993
partir do valor um.

36
00:01:37,300 --> 00:01:38,850
E ento ns devolveramos a cabea.

37
00:01:38,850 --> 00:01:43,040
Esta no  uma soluo muito confivel.

38
00:01:43,040 --> 00:01:45,820
O que acontece se voc tiver apenas um item?

39
00:01:45,820 --> 00:01:49,320
Mas eu s queria ilustrar como uma fila poderia funcionar se

40
00:01:49,320 --> 00:01:51,320
voc fosse implement-la por conta prpria.

41
00:01:51,320 --> 00:01:53,220
Basta acrescentar no final e remover desde o incio,

42
00:01:53,220 --> 00:01:54,750
e  assim que voc o usa.

43
00:01:54,750 --> 00:01:55,910
Voc cria um novo objeto de

44
00:01:55,910 --> 00:01:57,900
fila e, em seguida, pode enviar valores para ele.

45
00:01:57,900 --> 00:02:00,560
Vamos empurrar cinco, sete e 11, e

46
00:02:00,560 --> 00:02:03,770
ento voc pode imprimir o resultado do popping,

47
00:02:03,770 --> 00:02:07,190
e isso vai meio que imprimir cinco no comeo.

48
00:02:07,190 --> 00:02:08,680
E ento vai deixar

49
00:02:08,680 --> 00:02:10,650
sete e 11 restantes na fila.

50
00:02:10,650 --> 00:02:12,530
Voc pode estourar novamente e isso vai

51
00:02:12,530 --> 00:02:15,830
estourar, meio que remover o prximo item da lista e imprimi-lo.

52
00:02:15,830 --> 00:02:17,513
E deixe sua lista com apenas 11.

53
00:02:18,950 --> 00:02:21,710
Com uma pilha  um pouco diferente.

54
00:02:21,710 --> 00:02:24,320
Esta  uma pilha e voc pode remover elementos da parte superior.

55
00:02:24,320 --> 00:02:27,020
E quando voc tem outro, ele volta ao topo.

56
00:02:27,980 --> 00:02:31,400
Portanto, os elementos mais antigos esto sempre na parte inferior e os

57
00:02:31,400 --> 00:02:33,243
elementos mais recentes esto no topo.

58
00:02:34,690 --> 00:02:37,240
E mais uma vez, implementando isso no Python, voc

59
00:02:37,240 --> 00:02:38,920
teria aqui sua pilha de classes

60
00:02:38,920 --> 00:02:41,290
que novamente define auto. itens para ser uma lista vazia.

61
00:02:41,290 --> 00:02:44,750
Quando voc aperta, voc aperta no comeo da lista.

62
00:02:44,750 --> 00:02:46,590
Ento estamos dizendo isso mesmo. items now

63
00:02:46,590 --> 00:02:50,140
 uma lista de apenas o novo elemento, que 

64
00:02:50,140 --> 00:02:52,990
o parmetro, mais self. Unid.

65
00:02:52,990 --> 00:02:55,290
Ento, isso vai juntar as duas listas juntas.

66
00:02:55,290 --> 00:02:56,280
Voc vai acabar

67
00:02:56,280 --> 00:02:58,200
essencialmente adicionando um elemento no comeo.

68
00:02:58,200 --> 00:03:01,060
E o pop s vai se fazer. Unid. pop e como

69
00:03:01,060 --> 00:03:03,487
voc pode ver listas nos permitem pop,

70
00:03:03,487 --> 00:03:06,210
e isso meio que remove o ltimo elemento

71
00:03:06,210 --> 00:03:08,170
da lista e o devolve, ento

72
00:03:08,170 --> 00:03:12,680
o pop da pilha e o pop da lista realmente fazem a mesma coisa.

73
00:03:12,680 --> 00:03:14,600
E mais uma vez, agora voc pode empurrar.

74
00:03:14,600 --> 00:03:16,690
Mas observe como quando voc aperta cinco voc recebe

75
00:03:16,690 --> 00:03:18,969
uma lista de apenas cinco e quando voc aperta sete,

76
00:03:18,969 --> 00:03:20,293
o sete vai na frente.

77
00:03:21,340 --> 00:03:23,430
E ento voc empurra 11, o 11 vai

78
00:03:23,430 --> 00:03:26,760
na frente, e quando voc estala voc comea a remover da frente tambm.

79
00:03:26,760 --> 00:03:29,580
Ento voc est adicionando e removendo do mesmo lugar.

80
00:03:29,580 --> 00:03:31,415
Ns j vimos filas e pilhas.

81
00:03:31,415 --> 00:03:32,248
Eu s queria

82
00:03:32,248 --> 00:03:34,740
te dar um pouco de cdigo sobre como

83
00:03:34,740 --> 00:03:37,000
eles funcionam, porque o que vamos falar

84
00:03:37,000 --> 00:03:39,900
a seguir  algo que eu acho realmente interessante.

85
00:03:39,900 --> 00:03:42,050
E isto , o conceito

86
00:03:42,050 --> 00:03:44,700
de quantos passos so necessrios para

87
00:03:44,700 --> 00:03:46,270
encontrar um elemento

88
00:03:46,270 --> 00:03:47,420
em uma fila

89
00:03:47,420 --> 00:03:50,353
ou uma pilha ou uma lista?

90
00:03:52,190 --> 00:03:53,990
Deixe-me passar por isso e tenho

91
00:03:53,990 --> 00:03:56,470
certeza que voc vai entender de onde eu venho.

92
00:03:56,470 --> 00:03:59,810
Podemos dizer que essas filas e pilhas e listas

93
00:03:59,810 --> 00:04:02,030
e muitas outras estruturas de dados

94
00:04:02,030 --> 00:04:04,430
tambm so o que chamamos de sequenciais.

95
00:04:04,430 --> 00:04:07,483
Voc comea a procurar elementos em uma

96
00:04:08,510 --> 00:04:11,480
extremidade e passa at a outra extremidade.

97
00:04:11,480 --> 00:04:14,121
Ento, se voc est com uma fila, voc comea no

98
00:04:14,121 --> 00:04:16,480
primeiro elemento e passa para o segundo, terceiro e

99
00:04:16,480 --> 00:04:18,423
assim por diante, at chegar ao ltimo elemento.

100
00:04:20,170 --> 00:04:22,400
Isto significa que se voc est procurando por

101
00:04:22,400 --> 00:04:23,980
um elemento no meio, voc tem

102
00:04:23,980 --> 00:04:26,660
que passar por todos os elementos ao longo do caminho.

103
00:04:26,660 --> 00:04:30,283
Portanto, pode ser realmente til comear a olhar para uma extremidade

104
00:04:31,310 --> 00:04:32,590
e passar por cada

105
00:04:32,590 --> 00:04:34,460
elemento at chegar ao ltimo.

106
00:04:34,460 --> 00:04:36,010
Mas tambm pode ser bem lento.

107
00:04:36,010 --> 00:04:39,140
Digamos que voc queira apenas obter o ltimo elemento, voc no pode

108
00:04:39,140 --> 00:04:42,020
fazer isso com uma fila, a menos que voc primeiro coloque

109
00:04:42,020 --> 00:04:43,870
todos os elementos que vieram antes dele.

110
00:04:45,320 --> 00:04:46,180
Aqui est outro exemplo.

111
00:04:46,180 --> 00:04:48,580
Digamos que voc tenha uma longa lista,

112
00:04:48,580 --> 00:04:51,400
uma longa e esteja procurando por um elemento especfico.

113
00:04:51,400 --> 00:04:53,520
Por exemplo, esta lista aqui.

114
00:04:53,520 --> 00:04:55,823
Digamos que estamos procurando o elemento 90.

115
00:04:58,840 --> 00:05:03,590
Bem, como voc pode ver, ns tivemos que fazer um monte de saltos.

116
00:05:03,590 --> 00:05:07,160
Passamos de 13 para 56, 38 e assim por diante

117
00:05:07,160 --> 00:05:09,563
at alcanarmos o elemento nmero 90.

118
00:05:11,470 --> 00:05:14,470
Isso ocorre porque uma lista  seqencial.

119
00:05:14,470 --> 00:05:15,840
Se voc est procurando por

120
00:05:15,840 --> 00:05:19,070
um elemento, a nica coisa que voc pode fazer  comear do comeo.

121
00:05:19,070 --> 00:05:22,940
Ou talvez voc possa comear no final, se isso for mais adequado.

122
00:05:22,940 --> 00:05:24,905
Mas de qualquer forma voc tem que comear

123
00:05:24,905 --> 00:05:28,463
de um lado, e passar por cada elemento at encontrar o que voc quer.

124
00:05:29,990 --> 00:05:31,480
Ento isso pode ser bem lento.

125
00:05:31,480 --> 00:05:34,030
Seria melhor se pudssemos apenas

126
00:05:34,030 --> 00:05:36,650
saber onde o elemento est.

127
00:05:36,650 --> 00:05:39,413
Mas  claro que com uma lista no podemos fazer isso.

128
00:05:56,870 --> 00:06:00,373
Ento, o nmero de passos que tivemos que

129
00:06:01,530 --> 00:06:03,750
fazer  um bom nmero.

130
00:06:03,750 --> 00:06:05,720
Nossa lista aqui tem 21 elementos.

131
00:06:05,720 --> 00:06:07,612
Voc no precisa cont-los.

132
00:06:07,612 --> 00:06:09,100
Apenas acredite em mim aqui.

133
00:06:09,100 --> 00:06:13,873
Ento, digamos que uma varivel arbitrria n seja 21.

134
00:06:14,950 --> 00:06:18,143
Se quisssemos encontrar o ltimo elemento dessa

135
00:06:19,460 --> 00:06:22,770
lista, poderamos ir desde o incio at cada

136
00:06:22,770 --> 00:06:24,850
elemento at chegarmos ao ltimo.

137
00:06:24,850 --> 00:06:27,860
Ento temos que realizar 21 tipos de saltos.

138
00:06:27,860 --> 00:06:30,110
Ns teramos que pular para o primeiro elemento e

139
00:06:30,110 --> 00:06:30,943
pular para o

140
00:06:30,943 --> 00:06:33,763
segundo elemento, e pular para o terceiro elemento e assim por diante.

141
00:06:36,050 --> 00:06:40,590
Isso significa que, para uma lista, que  uma estrutura

142
00:06:40,590 --> 00:06:44,090
sequencial, encontrar um elemento pode nos levar a

143
00:06:44,090 --> 00:06:45,730
at n saltos.

144
00:06:45,730 --> 00:06:48,133
Onde n  um nmero de elemento na lista.

145
00:06:49,770 --> 00:06:52,310
Repare que ele diz, at n saltos, porque, 

146
00:06:52,310 --> 00:06:54,920
claro, se voc est encontrando o primeiro elemento, isso

147
00:06:54,920 --> 00:06:56,680
s vai lhe dar um salto.

148
00:06:56,680 --> 00:06:58,220
Mas se voc est encontrando o ltimo

149
00:06:58,220 --> 00:06:59,903
elemento, isso vai levar voc a pular.

150
00:07:01,780 --> 00:07:05,650
E existe um termo especfico para isso.

151
00:07:05,650 --> 00:07:08,840
Quando voc leva at n saltos, para encontrar

152
00:07:08,840 --> 00:07:10,860
o elemento em uma estrutura,

153
00:07:10,860 --> 00:07:15,060
isso  chamado, isso  o que dizemos que isso,

154
00:07:15,060 --> 00:07:18,337
estrutura tem uma complexidade de O (n).

155
00:07:19,740 --> 00:07:20,573
OK?

156
00:07:20,573 --> 00:07:21,653
Isso  apenas a terminologia.

157
00:07:22,500 --> 00:07:24,990
O significa complexidade de.

158
00:07:24,990 --> 00:07:27,910
E dentro dos colchetes ns colocamos a complexidade.

159
00:07:27,910 --> 00:07:30,170
E neste caso a complexidade  n.

160
00:07:30,170 --> 00:07:33,123
Porque precisamos de at n saltos para encontrar esse elemento.

161
00:07:34,050 --> 00:07:35,160
OK?

162
00:07:35,160 --> 00:07:37,720
Isso  chamado de complexidade.

163
00:07:37,720 --> 00:07:41,260
Ento, novamente, uma complexidade de O (n) significa apenas que precisamos de

164
00:07:41,260 --> 00:07:44,163
um nmero de saltos igual ao nmero de elementos.

165
00:07:45,530 --> 00:07:47,302
Nada terrivelmente complicado l.

166
00:07:47,302 --> 00:07:49,640
Quando voc est encontrando um elemento

167
00:07:49,640 --> 00:07:52,060
em uma lista, voc precisa pular

168
00:07:52,060 --> 00:07:55,290
n vezes que  uma complexidade O (n).

169
00:07:55,290 --> 00:07:57,410
E vamos analisar mais

170
00:07:57,410 --> 00:07:59,980
a complexidade nos prximos vdeos,

171
00:07:59,980 --> 00:08:02,510
assim como podemos reduzir isso esperanosamente.

172
00:08:02,510 --> 00:08:04,980
Mas  claro que, em vez de n,

173
00:08:04,980 --> 00:08:07,010
voc pode ter outras coisas ali.

174
00:08:07,010 --> 00:08:09,970
Por exemplo, O de n ao quadrado, significa que

175
00:08:09,970 --> 00:08:12,070
voc precisa de at nove saltos para

176
00:08:12,070 --> 00:08:14,220
navegar por uma coleo de trs elementos.

177
00:08:15,110 --> 00:08:17,700
Trs ao quadrado  nove.

178
00:08:17,700 --> 00:08:20,760
Ento, isso  o que O (n) ao quadrado significa.

179
00:08:20,760 --> 00:08:22,680
Claro, voc pode ver imediatamente que isso

180
00:08:22,680 --> 00:08:24,827
vai ser mais lento que O (n).

181
00:08:26,490 --> 00:08:29,030
Com O (n), e voc tem uma lista de

182
00:08:29,030 --> 00:08:31,260
trs elementos, voc precisa fazer trs saltos.

183
00:08:31,260 --> 00:08:33,880
Com O (n) ao quadrado, se voc tiver uma lista de trs

184
00:08:33,880 --> 00:08:35,303
elementos, ter que fazer nove saltos.

185
00:08:36,600 --> 00:08:38,107
E voc pode ter o oposto.

186
00:08:38,107 --> 00:08:40,830
O de (log2n), o que significa que precisamos fazer

187
00:08:40,830 --> 00:08:42,530
at trs saltos para navegar

188
00:08:42,530 --> 00:08:44,940
por uma coleo de sete elementos, por exemplo.

189
00:08:44,940 --> 00:08:46,140
Para um elemento de necessidade nove.

190
00:08:48,180 --> 00:08:52,200
Ento, a coisa dentro dos colchetes , voc

191
00:08:52,200 --> 00:08:55,930
pode pensar nisso agora como o nmero

192
00:08:55,930 --> 00:08:59,007
de saltos, para alcanar o ltimo

193
00:08:59,007 --> 00:09:02,940
ou o elemento mais distante em uma coleo.

194
00:09:02,940 --> 00:09:06,500
Em uma lista, o elemento mais distante  o ltimo elemento.

195
00:09:06,500 --> 00:09:09,700
E voc pode precisar de at n saltos para

196
00:09:09,700 --> 00:09:11,860
chegar l se comear do comeo.

197
00:09:11,860 --> 00:09:14,970
E h outras estruturas que no so

198
00:09:14,970 --> 00:09:19,000
listas, onde esses outros tipos de complexidade se aplicam.

199
00:09:19,000 --> 00:09:21,730
Ns vamos olhar para eles em toda a seo.

200
00:09:21,730 --> 00:09:23,400
E no se preocupe se no

201
00:09:23,400 --> 00:09:25,450
tiver certeza do que, por exemplo, significa (log2n).

202
00:09:25,450 --> 00:09:27,050
Eu encorajarei voc a

203
00:09:27,050 --> 00:09:28,353
procurar, mas isso

204
00:09:28,353 --> 00:09:30,950
 to complicado quanto chegar nesta seo.

205
00:09:30,950 --> 00:09:33,292
Ns no vamos entrar em matemtica complicada.

206
00:09:33,292 --> 00:09:35,010
Eu no sou um grande f de matemtica.

207
00:09:35,010 --> 00:09:36,580
No sou muito boa nisso.

208
00:09:36,580 --> 00:09:39,080
Ento no vamos entrar em

209
00:09:39,080 --> 00:09:44,080
matemtica complicada, apenas (log2n)  o mais complicado que vamos ver.

210
00:09:44,140 --> 00:09:46,960
Ento no se preocupe muito se voc no tiver certeza,

211
00:09:46,960 --> 00:09:48,123
tudo vai ficar bem.

212
00:09:49,710 --> 00:09:50,543
OK?

213
00:09:50,543 --> 00:09:52,860
Espero que voc tenha gostado deste vdeo.

214
00:09:52,860 --> 00:09:54,917
Eu vou te ver no prximo.

